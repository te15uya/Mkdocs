{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/","text":"\u51c6\u5907\u5de5\u4f5c \u7cfb\u7edf\u914d\u7f6e \u5728\u865a\u62df\u673a\u4e2d\u5b89\u88c5Linux\u7cfb\u7edf\uff0c\u672c\u9879\u76ee\u91c7\u7528 VMware Workstation 16.1.2 \u548c Ubuntu 18.04 \uff0c\u672c\u673a\u7cfb\u7edf\u4e3a Win 10 \u66f4\u65b0 Ubuntu 18.04 \u6e90\u5e76\u5b89\u88c5 open-vm-tools \u8fdb\u5165 /etc/apt/sources.list \u4fee\u6539\u4e3a\u56fd\u5185\u955c\u50cf\u6e90\uff08\u901f\u5ea6\u5feb\uff09\uff0c\u5168\u90e8\u5220\u9664\uff0c\u66ff\u6362\u4e3a\u4e0b\u8ff0\u5185\u5bb9\uff0c\u5982\u679c\u66f4\u65b0\u62a5\u9519\uff0c\u5c06 https \u6362\u6210 http ```shell # \u9ed8\u8ba4\u6ce8\u91ca\u4e86\u6e90\u7801\u955c\u50cf\u4ee5\u63d0\u9ad8 apt update \u901f\u5ea6\uff0c\u5982\u6709\u9700\u8981\u53ef\u81ea\u884c\u53d6\u6d88\u6ce8\u91ca deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # \u9884\u53d1\u5e03\u8f6f\u4ef6\u6e90\uff0c\u4e0d\u5efa\u8bae\u542f\u7528 # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse ``` \u66f4\u65b0\u7cfb\u7edf\u6e90\uff1a shell # update \u662f\u540c\u6b65 /etc/apt/sources.list \u548c /etc/apt/sources.list.d \u4e2d\u5217\u51fa\u7684\u6e90\u7684\u7d22\u5f15\uff0c\u8fd9\u6837\u624d\u80fd\u83b7\u53d6\u5230\u6700\u65b0\u7684\u8f6f\u4ef6\u5305 sudo apt update # upgrade \u662f\u5347\u7ea7\u5df2\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305(\u53ef\u9009) # sudo apt upgrade \u5b89\u88c5 open-vm-tools \uff1a sudo apt install open-vm-tools ~~\u5982\u679c\u8981\u5b9e\u73b0\u6587\u4ef6\u5939\u5171\u4eab\uff0c\u9700\u8981\u5b89\u88c5 open-vm-tools-dkms \uff1a sudo apt install open-vm-tools-dkms ~~=>\u6e05\u534e\u6e90\u627e\u4e0d\u5230 open-vm-tools-dkms \uff0c\u4e0d\u5b89\u88c5\u4e0d\u5f71\u54cd \u684c\u9762\u73af\u5883\u8fd8\u9700\u8981\u5b89\u88c5 open-vm-tools-desktop \u4ee5\u652f\u6301\u53cc\u5411\u62d6\u653e\u6587\u4ef6\uff1a sudo apt install open-vm-tools-desktop \u91cd\u542f\uff08\u4f7f\u7528 VMware \u81ea\u5e26\u91cd\u542f\uff0c\u4f7f\u7528 reboot \u91cd\u542f\u53ef\u80fd\u5931\u8d25\uff09\u540e\u6210\u529f\u8fdb\u884c\u62d6\u62fd\u590d\u5236 \u6ce8\uff1a \u53c2\u8003\u94fe\u63a5 \u5728 Ubuntu 18.10 \u5b89\u88c5\u5fc5\u8981\u7ec4\u4ef6 ```shell # \u5b89\u88c5Vim\u73af\u5883 sudo apt install vim # \u7528\u4e8e\u8fdc\u7a0b\u8fde\u63a5\u865a\u62df\u673a sudo apt install openssh-server # \u7528\u4e8e\u67e5\u770bIP\u5730\u5740 sudo apt install net-tools # \u6811\u5f62\u67e5\u770b\u6587\u4ef6\u5939\u5185\u5bb9 sudo apt install tree ``` VS code \u5b89\u88c5 Remote Development \u63d2\u4ef6 \u5728Linux\u4e2d\u4f7f\u7528 ifconfig \u67e5\u770b ip\u5730\u5740 \u6309\u4e0b\u56fe\u6b65\u9aa4\u8bbe\u7f6e config \u6587\u4ef6 config \u5185\u5bb9\u5982\u4e0b shell # Read more about SSH config files: https://linux.die.net/man/5/ssh_config Host \u81ea\u5b9a\u4e49\u540d\u79f0 HostName \u8fdc\u7a0b\u670d\u52a1\u5668IP User \u8fdc\u7a0b\u670d\u52a1\u5668\u7528\u6237\u540d GCC \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/01 GCC \u5b89\u88c5 gcc \u547d\u4ee4\uff1a sudo apt install gcc g++ \uff0c\u672c\u9879\u76ee\u5b89\u88c5\u7248\u672c\u4e3a\uff1a 7.5.0 gcc\u5de5\u4f5c\u6d41\u7a0b gcc\u5e38\u7528\u53c2\u6570\u9009\u9879 -D \u5b9e\u4f8b \u6e90\u7a0b\u5e8f ```c include int main() { if DEBUG printf(\"Debug\\n\"); endif printf(\"hello, world\\n\"); return 0; } ``` \u7f16\u8bd1\u547d\u4ee41\uff1a ```shell gcc test.c -o test ./test \u8f93\u51fa hello, world ``` \u7f16\u8bd1\u547d\u4ee42\uff1a ```shell gcc test.c -o test -D DEBUG ./test \u8f93\u51fa Debug hello, world ``` gcc\u4e0eg++\u533a\u522b gcc \u548c g++ \u90fd\u662f GNU(\u7ec4\u7ec7) \u7684\u4e00\u4e2a\u7f16\u8bd1\u5668 \u8bef\u533a\u4e00 \uff1a gcc \u53ea\u80fd\u7f16\u8bd1 c \u4ee3\u7801\uff0cg++ \u53ea\u80fd\u7f16\u8bd1 c++ \u4ee3\u7801 \u540e\u7f00\u4e3a .c \u7684\uff0c gcc \u628a\u5b83\u5f53\u4f5c\u662f C \u7a0b\u5e8f\uff0c\u800c g++ \u5f53\u4f5c\u662f c++ \u7a0b\u5e8f \u540e\u7f00\u4e3a .cpp \u7684\uff0c\u4e24\u8005\u90fd\u4f1a\u8ba4\u4e3a\u662f C++ \u7a0b\u5e8f\uff0c C++ \u7684\u8bed\u6cd5\u89c4\u5219\u66f4\u52a0\u4e25\u8c28\u4e00\u4e9b \u7f16\u8bd1\u9636\u6bb5\uff0c g++ \u4f1a\u8c03\u7528 gcc \uff0c\u5bf9\u4e8e C++ \u4ee3\u7801\uff0c\u4e24\u8005\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u662f\u56e0\u4e3a gcc \u547d\u4ee4\u4e0d\u80fd\u81ea\u52a8\u548c C++ \u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u8054\u63a5\uff0c\u6240\u4ee5\u901a\u5e38\u7528 g++ \u6765\u5b8c\u6210\u94fe\u63a5\uff0c\u4e3a\u4e86\u7edf\u4e00\u8d77\u89c1\uff0c\u5e72\u8106\u7f16\u8bd1/\u94fe\u63a5\u7edf\u7edf\u7528 g++ \u4e86\uff0c\u8fd9\u5c31\u7ed9\u4eba\u4e00\u79cd\u9519\u89c9\uff0c\u597d\u50cf cpp \u7a0b\u5e8f\u53ea\u80fd\u7528 g++ \u4f3c\u7684 \u8bef\u533a\u4e8c \uff1a gcc \u4e0d\u4f1a\u5b9a\u4e49 __cplusplus \u5b8f\uff0c\u800c g++ \u4f1a \u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u5b8f\u53ea\u662f\u6807\u5fd7\u7740\u7f16\u8bd1\u5668\u5c06\u4f1a\u628a\u4ee3\u7801\u6309 C \u8fd8\u662f C++ \u8bed\u6cd5\u6765\u89e3\u91ca \u5982\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u540e\u7f00\u4e3a .c \uff0c\u5e76\u4e14\u91c7\u7528 gcc \u7f16\u8bd1\u5668\uff0c\u5219\u8be5\u5b8f\u5c31\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5426\u5219\uff0c\u5c31\u662f\u5df2\u5b9a\u4e49 \u8bef\u533a\u4e09 \uff1a\u7f16\u8bd1\u53ea\u80fd\u7528 gcc \uff0c\u94fe\u63a5\u53ea\u80fd\u7528 g++ \u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u53e5\u8bdd\u4e0d\u7b97\u9519\u8bef\uff0c\u4f46\u662f\u5b83\u6df7\u6dc6\u4e86\u6982\u5ff5\uff0c\u5e94\u8be5\u8fd9\u6837\u8bf4\uff1a\u7f16\u8bd1\u53ef\u4ee5\u7528 gcc/g++ \uff0c\u800c\u94fe\u63a5\u53ef\u4ee5\u7528 g++ \u6216\u8005 gcc -lstdc++ gcc \u547d\u4ee4\u4e0d\u80fd\u81ea\u52a8\u548cC++\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u8054\u63a5\uff0c\u6240\u4ee5\u901a\u5e38\u4f7f\u7528 g++ \u6765\u5b8c\u6210\u94fe\u63a5\u3002\u4f46\u5728\u7f16\u8bd1\u9636\u6bb5\uff0c g++ \u4f1a\u81ea\u52a8\u8c03\u7528 gcc \uff0c\u4e8c\u8005\u7b49\u4ef7 Linux\u7cfb\u7edf\u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6 \u9759\u6001\u5e93\u4e0e\u52a8\u6001\u5e93 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/02 \u9759\u6001\u5e93\u4e0e\u52a8\u6001\u5e93 \u5e93 \u5e93\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u4e0a\u7684\u4e00\u7c7b\u6587\u4ef6\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u5e93\u6587\u4ef6\u770b\u6210\u4e00\u79cd\u4ee3\u7801\u4ed3\u5e93\uff0c\u5b83\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\u4e00\u4e9b \u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u7528\u7684\u53d8\u91cf\u3001\u51fd\u6570\u6216\u7c7b \u5e93\u662f\u7279\u6b8a\u7684\u4e00\u79cd\u7a0b\u5e8f\uff0c\u7f16\u5199\u5e93\u7684\u7a0b\u5e8f\u548c\u7f16\u5199\u4e00\u822c\u7684\u7a0b\u5e8f\u533a\u522b\u4e0d\u5927\uff0c\u53ea\u662f \u5e93\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c \u5e93\u6587\u4ef6\u6709\u4e24\u79cd\uff0c \u9759\u6001\u5e93 \u548c \u52a8\u6001\u5e93\uff08\u5171\u4eab\u5e93\uff09 \u3002\u533a\u522b\u662f\uff1a \u9759\u6001\u5e93 \u5728\u7a0b\u5e8f\u7684\u94fe\u63a5\u9636\u6bb5\u88ab\u590d\u5236\u5230\u4e86\u7a0b\u5e8f\u4e2d \u52a8\u6001\u5e93 \u5728\u94fe\u63a5\u9636\u6bb5\u6ca1\u6709\u88ab\u590d\u5236\u5230\u7a0b\u5e8f\u4e2d\uff0c\u800c\u662f\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u7531\u7cfb\u7edf\u52a8\u6001\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u4f9b\u7a0b\u5e8f\u8c03\u7528 \u5e93\u7684\u597d\u5904\uff1a \u4ee3\u7801\u4fdd\u5bc6 \u548c \u65b9\u4fbf\u90e8\u7f72\u548c\u5206\u53d1 \u9759\u6001\u5e93\u7684\u5236\u4f5c \u89c4\u5219 \u793a\u4f8b\uff1a\u6709\u5982\u4e0b\u56fe\u6240\u793a\u6587\u4ef6(\u5176\u4e2d\u6bcf\u4e2a\u5206\u6587\u4ef6\u7528\u4e8e\u5b9e\u73b0\u56db\u5219\u8fd0\u7b97)\uff0c\u5c06\u5176\u6253\u5305\u4e3a \u9759\u6001\u5e93 \u751f\u6210 .o \u6587\u4ef6\uff1a gcc -c \u6587\u4ef6\u540d \u5c06 .o \u6587\u4ef6\u6253\u5305\uff1a ar rcs libxxx.a xx1.o xx2.o \u9759\u6001\u5e93\u7684\u4f7f\u7528 \u9700\u8981\u63d0\u4f9b \u9759\u6001\u5e93\u6587\u4ef6\u548c\u76f8\u5e94\u7684\u5934\u6587\u4ef6 \uff0c\u6709\u5982\u4e0b\u7ed3\u6784\u6587\u4ef6\uff0c\u5176\u4e2d main.c \u6d4b\u8bd5\u6587\u4ef6 ```c // main.c #include #include \"head.h\" int main() { int a = 20; int b = 12; printf(\"a = %d, b = %d\\n\", a, b); printf(\"a + b = %d\\n\", add(a, b)); printf(\"a - b = %d\\n\", subtract(a, b)); printf(\"a * b = %d\\n\", multiply(a, b)); printf(\"a / b = %f\\n\", divide(a, b)); return 0; } ``` \u7f16\u8bd1\u8fd0\u884c\uff1a gcc main.c -o app -I ./include -l calc -L ./lib -I ./include \uff1a\u6307\u5b9a\u5934\u6587\u4ef6\u76ee\u5f55\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef -l calc \uff1a\u6307\u5b9a\u9759\u6001\u5e93\u540d\u79f0\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef -L ./lib \uff1a\u6307\u5b9a\u9759\u6001\u5e93\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef \u6b63\u786e\u6267\u884c \uff08\u6210\u529f\u751f\u6210 app \u53ef\u6267\u884c\u6587\u4ef6\uff09 \u6d4b\u8bd5\u7a0b\u5e8f \u52a8\u6001\u5e93\u7684\u5236\u4f5c \u89c4\u5219 \u793a\u4f8b\uff1a\u6709\u5982\u4e0b\u56fe\u6240\u793a\u6587\u4ef6(\u5176\u4e2d\u6bcf\u4e2a\u5206\u6587\u4ef6\u7528\u4e8e\u5b9e\u73b0\u56db\u5219\u8fd0\u7b97)\uff0c\u5c06\u5176\u6253\u5305\u4e3a \u52a8\u6001\u5e93 \u751f\u6210 .o \u6587\u4ef6\uff1a gcc -c -fpic \u6587\u4ef6\u540d \u5c06 .o \u6587\u4ef6\u6253\u5305\uff1a gcc -shared xx1.o xx2.o -o libxxx.so \u52a8\u6001\u5e93\u7684\u4f7f\u7528 \u9700\u8981\u63d0\u4f9b \u52a8\u6001\u5e93\u6587\u4ef6\u548c\u76f8\u5e94\u7684\u5934\u6587\u4ef6 \u5b9a\u4f4d\u52a8\u6001\u5e93\uff08 \u539f\u56e0\u89c1\u5de5\u4f5c\u539f\u7406->\u5982\u4f55\u5b9a\u4f4d\u5171\u4eab\u5e93\u6587\u4ef6 \uff0c\u5176\u4e2d\u8def\u5f84\u4e3a\u52a8\u6001\u5e93\u6240\u5728\u4f4d\u7f6e\uff09 \u65b9\u6cd5\u4e00\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf\uff0c \u5f53\u524d\u7ec8\u7aef\u751f\u6548 \uff0c\u9000\u51fa\u5f53\u524d\u7ec8\u7aef\u5931\u6548 shell export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/u/Desktop/Linux/calc/lib \u65b9\u6cd5\u4e8c\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf\uff0c\u7528\u6237\u7ea7\u522b\u6c38\u4e45\u914d\u7f6e ```shell \u4fee\u6539~/.bashrc vim ~/.bashrc \u5728~/.bashrc\u4e2d\u6dfb\u52a0\u4e0b\u884c\uff0c\u4fdd\u5b58\u9000\u51fa export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/u/Desktop/Linux/calc/lib \u4f7f\u4fee\u6539\u751f\u6548 source ~/.bashrc ``` \u65b9\u6cd5\u4e09\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf\uff0c\u7cfb\u7edf\u7ea7\u522b\u6c38\u4e45\u914d\u7f6e ```shell \u4fee\u6539/etc/profile sudo vim /etc/profile \u5728~/.bashrc\u4e2d\u6dfb\u52a0\u4e0b\u884c\uff0c\u4fdd\u5b58\u9000\u51fa export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/u/Desktop/Linux/calc/lib \u4f7f\u4fee\u6539\u751f\u6548 source /etc/profile ``` \u65b9\u6cd5\u56db\uff1a\u4fee\u6539 /etc/ld.so.cache\u6587\u4ef6\u5217\u8868 ```shell \u4fee\u6539/etc/ld.so.conf sudo vim /etc/ld.so.conf \u5728/etc/ld.so.conf\u4e2d\u6dfb\u52a0\u4e0b\u884c\uff0c\u4fdd\u5b58\u9000\u51fa /home/u/Desktop/Linux/calc/lib \u66f4\u65b0\u914d\u7f6e sudo ldconfig ``` \u6709\u5982\u4e0b\u7ed3\u6784\u6587\u4ef6\uff0c\u5176\u4e2d main.c \u6d4b\u8bd5\u6587\u4ef6 \u7f16\u8bd1\u8fd0\u884c\uff1a gcc main.c -o app -I ./include -l calc -L ./lib \u6d4b\u8bd5\u7a0b\u5e8f \u5982\u679c\u4e0d\u5c06\u52a8\u6001\u5e93\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u52a0\u5165\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef \u5de5\u4f5c\u539f\u7406 \u9759\u6001\u5e93\uff1a GCC \u8fdb\u884c\u94fe\u63a5\u65f6\uff0c\u4f1a\u628a\u9759\u6001\u5e93\u4e2d\u4ee3\u7801\u6253\u5305\u5230\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d \u52a8\u6001\u5e93\uff1a GCC \u8fdb\u884c\u94fe\u63a5\u65f6\uff0c\u52a8\u6001\u5e93\u7684\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6253\u5305\u5230\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d \u7a0b\u5e8f\u542f\u52a8\u4e4b\u540e\uff0c\u52a8\u6001\u5e93\u4f1a\u88ab\u52a8\u6001\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u901a\u8fc7 ldd \uff08list dynamic dependencies\uff09 \u547d\u4ee4\u68c0\u67e5\u52a8\u6001\u5e93\u4f9d\u8d56\u5173\u7cfb \u5982\u4f55\u5b9a\u4f4d\u5171\u4eab\u5e93\u6587\u4ef6\u5462\uff1f \u5f53\u7cfb\u7edf\u52a0\u8f7d\u53ef\u6267\u884c\u4ee3\u7801\u65f6\u5019\uff0c\u80fd\u591f\u77e5\u9053\u5176\u6240\u4f9d\u8d56\u7684\u5e93\u7684\u540d\u5b57\uff0c\u4f46\u662f\u8fd8\u9700\u8981\u77e5\u9053 \u7edd\u5bf9\u8def\u5f84 \u3002\u6b64\u65f6\u5c31\u9700\u8981\u7cfb\u7edf\u7684\u52a8\u6001\u8f7d\u5165\u5668\u6765\u83b7\u53d6\u8be5\u7edd\u5bf9\u8def\u5f84 \u5bf9\u4e8e elf\u683c\u5f0f \u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u662f\u7531 ld-linux.so \u6765\u5b8c\u6210\u7684\uff0c\u5b83\u5148\u540e\u641c\u7d22 elf\u6587\u4ef6 \u7684 DT_RPATH \u6bb5 => \u73af\u5883\u53d8\u91cfLD_LIBRARY_PATH => /etc/ld.so.cache\u6587\u4ef6\u5217\u8868 => /lib/ \uff0c usr/lib \u76ee\u5f55\u627e\u5230\u5e93\u6587\u4ef6\u540e\u5c06\u5176\u8f7d\u5165\u5185\u5b58 \u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u7684\u5bf9\u6bd4 \u7a0b\u5e8f\u7f16\u8bd1\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b \u9759\u6001\u5e93\u5236\u4f5c\u8fc7\u7a0b \u52a8\u6001\u5e93\u5236\u4f5c\u8fc7\u7a0b \u9759\u6001\u5e93\u7684\u4f18\u7f3a\u70b9 \u52a8\u6001\u5e93\u7684\u4f18\u7f3a\u70b9 Makefile \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/03 Makefile \u6982\u5ff5\u53ca\u5b89\u88c5 \u4e00\u4e2a\u5de5\u7a0b\u4e2d\u7684\u6e90\u6587\u4ef6\u4e0d\u8ba1\u5176\u6570\uff0c\u5176\u6309\u7c7b\u578b\u3001\u529f\u80fd\u3001\u6a21\u5757\u5206\u522b\u653e\u5728\u82e5\u5e72\u4e2a\u76ee\u5f55\u4e2d\uff0c Makefile \u6587\u4ef6\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u6765\u6307\u5b9a\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u5148\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u540e\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u751a\u81f3\u4e8e\u8fdb\u884c\u66f4\u590d\u6742\u7684\u529f\u80fd\u64cd\u4f5c\uff0c\u56e0\u4e3a Makefile \u6587\u4ef6\u5c31\u50cf\u4e00\u4e2a Shell \u811a\u672c\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4 Makefile \u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u201c\u81ea\u52a8\u5316\u7f16\u8bd1\u201d \uff0c\u4e00\u65e6\u5199\u597d\uff0c\u53ea\u9700\u8981\u4e00\u4e2a make \u547d\u4ee4\uff0c\u6574\u4e2a\u5de5\u7a0b\u5b8c\u5168\u81ea\u52a8\u7f16\u8bd1\uff0c\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\u3002 make \u662f\u4e00\u4e2a\u547d\u4ee4\u5de5\u5177\uff0c\u662f\u4e00\u4e2a\u89e3\u91ca Makefile \u6587\u4ef6\u4e2d\u6307\u4ee4\u7684\u547d\u4ee4\u5de5\u5177\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5927\u591a\u6570\u7684 IDE \u90fd\u6709\u8fd9\u4e2a\u547d\u4ee4\uff0c\u6bd4\u5982 Delphi \u7684 make \uff0cVisual C++ \u7684 nmake \uff0cLinux \u4e0b GNU \u7684 make \u5b89\u88c5\uff1a sudo apt install make \uff0c\u5b89\u88c5\u65f6\u4f1a\u5b89\u88c5 man \u624b\u518c Makefile \u6587\u4ef6\u547d\u540d\u548c\u89c4\u5219 \u6587\u4ef6\u547d\u540d\uff1a makefile \u6216\u8005 Makefile Makefile \u89c4\u5219 \u4e00\u4e2a Makefile \u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u89c4\u5219 \u76ee\u6807 \uff1a\u6700\u7ec8\u8981\u751f\u6210\u7684\u6587\u4ef6\uff08\u4f2a\u76ee\u6807\u9664\u5916\uff09 \u4f9d\u8d56 \uff1a\u751f\u6210\u76ee\u6807\u6240\u9700\u8981\u7684\u6587\u4ef6\u6216\u662f\u76ee\u6807 \u547d\u4ee4 \uff1a\u901a\u8fc7\u6267\u884c\u547d\u4ee4\u5bf9\u4f9d\u8d56\u64cd\u4f5c\u751f\u6210\u76ee\u6807\uff08\u547d\u4ee4\u524d\u5fc5\u987b Tab \u7f29\u8fdb\uff09 Makefile \u4e2d\u7684\u5176\u5b83\u89c4\u5219\u4e00\u822c\u90fd\u662f\u4e3a\u7b2c\u4e00\u6761\u89c4\u5219\u670d\u52a1\u7684\u3002 Makefile\u7f16\u5199\u65b9\u5f0f \u8bf4\u660e \u5047\u8bbe\u6709\u5982\u4e0b\u6587\u4ef6 \u65b9\u5f0f\u4e00\uff1aMakefile+\u76f4\u63a5\u7f16\u8bd1\u94fe\u63a5\uff08\u4e0d\u63a8\u8350\uff09 app:add.c div.c multi.c sub.c main.c gcc add.c div.c multi.c sub.c main.c -o app \u65b9\u5f0f\u4e8c\uff1aMakefile+\u7f16\u8bd1+\u94fe\u63a5 app:add.o div.o multi.o sub.o main.o gcc add.o div.o multi.o sub.o main.o -o app add.o:add.c gcc -c add.c -o add.o div.o:div.c gcc -c div.c -o div.o multi.o:multi.c gcc -c multi.c -o multi.o sub.o:sub.c gcc -c sub.c -o sub.o main.o:main.c gcc -c main.c -o main.o \u65b9\u5f0f\u4e09\uff1aMakefile+\u53d8\u91cf \u77e5\u8bc6\u70b9 \u81ea\u5b9a\u4e49\u53d8\u91cf\uff1a \u53d8\u91cf\u540d=\u53d8\u91cf\u503c \uff0c\u5982 var=hello \u9884\u5b9a\u4e49\u53d8\u91cf AR : \u5f52\u6863\u7ef4\u62a4\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a ar CC : C \u7f16\u8bd1\u5668\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a cc CXX : C++ \u7f16\u8bd1\u5668\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a g++ $@ : \u76ee\u6807\u7684\u5b8c\u6574\u540d\u79f0 $< : \u7b2c\u4e00\u4e2a\u4f9d\u8d56\u6587\u4ef6\u7684\u540d\u79f0 $^ : \u6240\u6709\u7684\u4f9d\u8d56\u6587\u4ef6 \u793a\u4f8b \u83b7\u53d6\u53d8\u91cf\u7684\u503c\uff1a $(\u53d8\u91cf\u540d) \uff0c\u5982 $(var) \u793a\u4f8b src=add.o div.o multi.o sub.o main.o target=app $(target):$(src) $(CC) $^ -o $@ add.o:add.c $(CC) -c $^ -o $@ div.o:div.c $(CC) -c $^ -o $@ multi.o:multi.c $(CC) -c $^ -o $@ sub.o:sub.c $(CC) -c $^ -o $@ main.o:main.c $(CC) -c $^ -o $@ \u65b9\u5f0f\u56db\uff1aMakefile+\u6a21\u5f0f\u5339\u914d \u77e5\u8bc6\u70b9 \u5f53\u6240\u8981\u7f16\u8bd1\u7684\u6587\u4ef6\u8fc7\u591a\u65f6\uff0c\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u80fd\u591f\u7b80\u5316\u64cd\u4f5c \u793a\u4f8b src=add.o div.o multi.o sub.o main.o target=app $(target):$(src) $(CC) $^ -o $@ %.o:%.c $(CC) -c $< -o $@ \u65b9\u6cd5\u4e94\uff1aMakefile + \u51fd\u6570 \u77e5\u8bc6\u70b9 $(wildcard PATTERN...) \u529f\u80fd\uff1a\u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u6307\u5b9a\u7c7b\u578b\u7684\u6587\u4ef6\u5217\u8868 \u53c2\u6570\uff1aPATTERN \u6307\u7684\u662f\u67d0\u4e2a\u6216\u591a\u4e2a\u76ee\u5f55\u4e0b\u7684\u5bf9\u5e94\u7684\u67d0\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u76ee\u5f55\uff0c\u4e00\u822c\u4f7f\u7528\u7a7a\u683c\u95f4\u9694 \u8fd4\u56de\uff1a\u5f97\u5230\u7684\u82e5\u5e72\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u5217\u8868\uff0c\u6587\u4ef6\u540d\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u95f4\u9694 \u793a\u4f8b $(patsubst <pattern>,<replacement>,<text>) \u529f\u80fd\uff1a\u67e5\u627e <text> \u4e2d\u7684\u5355\u8bcd(\u5355\u8bcd\u4ee5\u201c\u7a7a\u683c\u201d\u3001\u201cTab\u201d\u6216\u201c\u56de\u8f66\u201d\u201c\u6362\u884c\u201d\u5206\u9694)\u662f\u5426\u7b26\u5408\u6a21\u5f0f <pattern> \uff0c\u5982\u679c\u5339\u914d\u7684\u8bdd\uff0c\u5219\u4ee5 <replacement> \u66ff\u6362 <pattern> \u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26 % \uff0c\u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u4e32\u3002\u5982\u679c <replacement> \u4e2d\u4e5f\u5305\u542b % \uff0c\u90a3\u4e48\uff0c <replacement> \u4e2d\u7684\u8fd9\u4e2a % \u5c06\u662f <pattern> \u4e2d\u7684\u90a3\u4e2a%\u6240\u4ee3\u8868\u7684\u5b57\u4e32\u3002(\u53ef\u4ee5\u7528 \\ \u6765\u8f6c\u4e49\uff0c\u4ee5 \\% \u6765\u8868\u793a\u771f\u5b9e\u542b\u4e49\u7684 % \u5b57\u7b26) \u8fd4\u56de\uff1a\u51fd\u6570\u8fd4\u56de\u88ab\u66ff\u6362\u8fc7\u540e\u7684\u5b57\u7b26\u4e32 \u793a\u4f8b \u793a\u4f8b src=$(wildcard ./*.c) objs=$(patsubst %.c, %.o, $(src)) target=app $(target):$(objs) $(CC) $^ -o $@ %.o:%.c $(CC) -c $< -o $@ \u6e05\u9664\u4e2d\u95f4\u6587\u4ef6 src=$(wildcard ./*.c) objs=$(patsubst %.c, %.o, $(src)) target=app $(target):$(objs) $(CC) $^ -o $@ %.o:%.c $(CC) -c $< -o $@ clean: rm *.o \u5de5\u4f5c\u539f\u7406 \u547d\u4ee4\u5728\u6267\u884c\u4e4b\u524d\uff0c\u9700\u8981\u5148\u68c0\u67e5\u89c4\u5219\u4e2d\u7684\u4f9d\u8d56\u662f\u5426\u5b58\u5728 \u5982\u679c\u5b58\u5728\uff0c\u6267\u884c\u547d\u4ee4 \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5411\u4e0b\u68c0\u67e5\u5176\u5b83\u7684\u89c4\u5219\uff0c\u68c0\u67e5\u6709\u6ca1\u6709\u4e00\u4e2a\u89c4\u5219\u662f\u7528\u6765\u751f\u6210\u8fd9\u4e2a\u4f9d\u8d56\u7684\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u6267\u884c\u8be5\u89c4\u5219\u4e2d\u7684\u547d\u4ee4 \u68c0\u6d4b\u66f4\u65b0\uff0c\u5728\u6267\u884c\u89c4\u5219\u4e2d\u7684\u547d\u4ee4\u65f6\uff0c\u4f1a\u6bd4\u8f83\u76ee\u6807\u548c\u4f9d\u8d56\u6587\u4ef6\u7684\u65f6\u95f4 \u5982\u679c\u4f9d\u8d56\u7684\u65f6\u95f4\u6bd4\u76ee\u6807\u7684\u65f6\u95f4\u665a\uff0c\u9700\u8981\u91cd\u65b0\u751f\u6210\u76ee\u6807 \u5982\u679c\u4f9d\u8d56\u7684\u65f6\u95f4\u6bd4\u76ee\u6807\u7684\u65f6\u95f4\u65e9\uff0c\u76ee\u6807\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u5bf9\u5e94\u89c4\u5219\u4e2d\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u88ab\u6267\u884c \u793a\u4f8b \u5f53\u4fee\u6539 main.c \u4e14\u91cd\u65b0 make \u65f6\uff0c\u5982\u4e0b \u5f53\u4e0d\u505a\u4efb\u4f55\u4fee\u6539\u4e14\u91cd\u65b0 make \u65f6\uff0c\u5982\u4e0b GDB\u8c03\u8bd5 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/04 GDB\u8c03\u8bd5 \u6982\u5ff5 GDB \u662f\u7531 GNU \u8f6f\u4ef6\u7cfb\u7edf\u793e\u533a\u63d0\u4f9b\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u540c GCC \u914d\u5957\u7ec4\u6210\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u5f00\u53d1\u73af\u5883\uff0c GDB \u662f Linux \u548c\u8bb8\u591a\u7c7b Unix \u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u5f00\u53d1\u73af\u5883 \u4e00\u822c\u6765\u8bf4\uff0c GDB \u4e3b\u8981\u5e2e\u52a9\u4f60\u5b8c\u6210\u4e0b\u9762\u56db\u4e2a\u65b9\u9762\u7684\u529f\u80fd \u542f\u52a8\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6309\u7167\u81ea\u5b9a\u4e49\u7684\u8981\u6c42\u968f\u5fc3\u6240\u6b32\u7684\u8fd0\u884c\u7a0b\u5e8f \u53ef\u8ba9\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f\u5728\u6240\u6307\u5b9a\u7684\u8c03\u7f6e\u7684\u65ad\u70b9\u5904\u505c\u4f4f\uff08\u65ad\u70b9\u53ef\u4ee5\u662f\u6761\u4ef6\u8868\u8fbe\u5f0f\uff09 \u5f53\u7a0b\u5e8f\u88ab\u505c\u4f4f\u65f6\uff0c\u53ef\u4ee5\u68c0\u67e5\u6b64\u65f6\u7a0b\u5e8f\u4e2d\u6240\u53d1\u751f\u7684\u4e8b \u53ef\u4ee5\u6539\u53d8\u7a0b\u5e8f\uff0c\u5c06\u4e00\u4e2a BUG \u4ea7\u751f\u7684\u5f71\u54cd\u4fee\u6b63\u4ece\u800c\u6d4b\u8bd5\u5176\u4ed6 BUG \u51c6\u5907\u5de5\u4f5c \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\uff1a gcc -g -Wall program.c -o program \u901a\u5e38\uff0c\u5728\u4e3a\u8c03\u8bd5\u800c\u7f16\u8bd1\u65f6\uff0c\u6211\u4eec\u4f1a \u5173\u6389\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u9009\u9879 \uff08 -O \uff09\uff0c \u5e76\u6253\u5f00 \u8c03\u8bd5\u9009\u9879 \uff08 -g \uff09\u3002\u53e6\u5916\uff0c -Wall \u5728\u5c3d\u91cf\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\u9009\u9879\u6253\u5f00\u6240\u6709warning\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8bb8\u591a\u95ee\u9898\uff0c\u907f\u514d\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684 BUG -g \u9009\u9879\u7684\u4f5c\u7528\u662f\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u52a0\u5165\u6e90\u4ee3\u7801\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7b2c\u51e0\u6761\u673a\u5668\u6307\u4ee4\u5bf9\u5e94\u6e90\u4ee3\u7801\u7684\u7b2c\u51e0\u884c\uff0c\u4f46\u5e76\u4e0d\u662f\u628a\u6574\u4e2a\u6e90\u6587\u4ef6\u5d4c\u5165\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5728\u8c03\u8bd5\u65f6\u5fc5\u987b\u4fdd\u8bc1 gdb \u80fd\u627e\u5230\u6e90\u6587\u4ef6 \u6ce8\uff1a\u5f53\u5728 gdb \u4e2d\u76f4\u63a5\u4f7f\u7528 \u56de\u8f66 \u65f6\uff0c\u4f1a\u9ed8\u8ba4\u6267\u884c\u4e0a\u4e00\u6761\u547d\u4ee4 \u5e38\u7528\u547d\u4ee4 \u8bf4\u660e \u542f\u52a8\u4e0e\u9000\u51fa \u81f3 \u67e5\u770b\u5f53\u524d\u6587\u4ef6\u4ee3\u7801 \u4f7f\u7528 test.c \u540e\u7eed\u5185\u5bb9\u4f7f\u7528\u8bfe\u4ef6\u4e2d\u5176\u4ed6\u6e90\u7a0b\u5e8f \u542f\u52a8\u4e0e\u9000\u51fa \u542f\u52a8\uff1a gdb \u53ef\u6267\u884c\u7a0b\u5e8f \u9000\u51fa\uff1a quit/q \u7ed9\u7a0b\u5e8f\u8bbe\u7f6e\u53c2\u6570/\u83b7\u53d6\u8bbe\u7f6e\u53c2\u6570 \u8bbe\u7f6e\u53c2\u6570\uff1a set args 10 20 \u83b7\u53d6\u8bbe\u7f6e\u53c2\u6570\uff1a show args // test.c \u6e90\u7801 #include <stdio.h> #include <stdlib.h> int test(int a); int main(int argc, char* argv[]) { int a, b; printf(\"argc = %d\\n\", argc); if(argc < 3) { a = 10; b = 30; } else { a = atoi(argv[1]); b = atoi(argv[2]); } printf(\"a = %d, b = %d\\n\", a, b); printf(\"a + b = %d\\n\", a + b); for(int i = 0; i < a; ++i) { printf(\"i = %d\\n\", i); // \u51fd\u6570\u8c03\u7528 int res = test(i); printf(\"res value: %d\\n\", res); } printf(\"THE END !!!\\n\"); return 0; } int test(int a) { int num = 0; for(int i = 0; i < a; ++i) { num += i; } return num; } GDB\u4f7f\u7528\u5e2e\u52a9 help \u67e5\u770b\u5f53\u524d\u6587\u4ef6\u4ee3\u7801 \u4ece\u9ed8\u8ba4\u4f4d\u7f6e\u663e\u793a\uff1a list/l \u4ece\u6307\u5b9a\u7684\u884c\u663e\u793a\uff1a list/l \u884c\u53f7 \u4ece\u6307\u5b9a\u7684\u51fd\u6570\u663e\u793a\uff1a list/l \u884c\u53f7 \u6ce8\uff1a \u67e5\u770b\u65f6\u4f1a\u663e\u793a\u524d\u540e\u6587 \u67e5\u770b\u975e\u5f53\u524d\u6587\u4ef6\u4ee3\u7801 \u7f16\u8bd1\u8fd0\u884c\u5e76\u4f7f\u7528 gdb main \u4ece\u6307\u5b9a\u6587\u4ef6\u6307\u5b9a\u7684\u884c\u663e\u793a\uff1a list/l \u6587\u4ef6\u540d:\u884c\u53f7 \u4ece\u6307\u5b9a\u6587\u4ef6\u6307\u5b9a\u7684\u51fd\u6570\u663e\u793a\uff1a list/l \u6587\u4ef6\u540d:\u51fd\u6570\u540d \u67e5\u770b\u53ca\u8bbe\u7f6e\u663e\u793a\u7684\u884c\u6570 \u67e5\u770b\u663e\u793a\u7684\u884c\u6570\uff1a show list/listsize \u8bbe\u7f6e\u663e\u793a\u7684\u884c\u6570\uff1a set list/listsize \u65ad\u70b9\u64cd\u4f5c \u67e5\u770b\u65ad\u70b9\uff1a i/info b/break \u8bbe\u7f6e\u4e00\u822c\u65ad\u70b9 b/break \u884c\u53f7 b/break \u51fd\u6570\u540d b/break \u6587\u4ef6\u540d:\u884c\u53f7 b/break \u6587\u4ef6\u540d:\u51fd\u6570 \u8bbe\u7f6e\u6761\u4ef6\u65ad\u70b9\uff08\u4e00\u822c\u7528\u5728\u5faa\u73af\u7684\u4f4d\u7f6e\uff09\uff1a b/break 10 if i==5 \u5220\u9664\u65ad\u70b9\uff1a d/del/delete \u65ad\u70b9\u7f16\u53f7 \u8bbe\u7f6e\u65ad\u70b9\u65e0\u6548\uff1a dis/disable \u65ad\u70b9\u7f16\u53f7 \u8bbe\u7f6e\u65ad\u70b9\u751f\u6548\uff1a ena/enable \u65ad\u70b9\u7f16\u53f7 \u8c03\u8bd5\u64cd\u4f5c \u8fd0\u884c GDB \u7a0b\u5e8f \u7a0b\u5e8f\u505c\u5728\u7b2c\u4e00\u884c\uff1a start \u9047\u5230\u65ad\u70b9\u624d\u505c\uff1a run \u7ee7\u7eed\u8fd0\u884c\uff0c\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u505c\uff1a c/continue \u5411\u4e0b\u6267\u884c\u4e00\u884c\u4ee3\u7801\uff08\u4e0d\u4f1a\u8fdb\u5165\u51fd\u6570\u4f53\uff09\uff1a n/next \u53d8\u91cf\u64cd\u4f5c \u6253\u5370\u53d8\u91cf\u503c\uff1a p/print \u53d8\u91cf\u540d \u6253\u5370\u53d8\u91cf\u7c7b\u578b\uff1a ptype \u53d8\u91cf\u540d \u5411\u4e0b\u5355\u6b65\u8c03\u8bd5\uff08\u9047\u5230\u51fd\u6570\u8fdb\u5165\u51fd\u6570\u4f53\uff09 s/step \u8df3\u51fa\u51fd\u6570\u4f53\uff1a finish \u81ea\u52a8\u53d8\u91cf\u64cd\u4f5c \u81ea\u52a8\u6253\u5370\u6307\u5b9a\u53d8\u91cf\u7684\u503c\uff1a display \u53d8\u91cf\u540d \u67e5\u770b\u81ea\u52a8\u53d8\u91cf\uff1a i/info display \u53d6\u6d88\u81ea\u52a8\u53d8\u91cf\uff1a undisplay \u7f16\u53f7 \u5176\u5b83\u64cd\u4f5c \u8bbe\u7f6e\u53d8\u91cf\u503c\uff1a set var \u53d8\u91cf\u540d=\u53d8\u91cf\u503c \uff08\u5faa\u73af\u4e2d\u7528\u7684\u8f83\u591a\uff09 \u8df3\u51fa\u5faa\u73af\uff1a until \u6587\u4ef6IO \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/05 \u6587\u4ef6IO \u5728 Linux \u4e2d\u4f7f\u7528 man 2 API\u540d \u67e5\u770b Linux\u7cfb\u7edfAPI \uff0c man 3 API\u540d \u67e5\u770b \u6807\u51c6C\u5e93API man 2 open man 3 fopen \u6807\u51c6 C \u5e93 IO \u51fd\u6570 \u6807\u51c6 C \u5e93 IO \u548c Linux \u7cfb\u7edf IO \u7684\u5173\u7cfb \u865a\u62df\u5730\u5740\u7a7a\u95f4 \u865a\u62df\u5730\u5740\u7a7a\u95f4\u662f\u4e3a\u4e86\u89e3\u51b3\u5185\u5b58\u52a0\u8f7d\u95ee\u9898 \u95ee\u98981\uff1a\u5047\u8bbe\u5b9e\u9645\u5185\u5b58\u4e3a 4G \uff0c\u6b64\u65f6\u5171\u6709 1G \u3001 2G \u3001 2G \u4e09\u4e2a\u7a0b\u5e8f\uff0c\u5982\u679c\u76f4\u63a5\u52a0\u8f7d\uff0c\u90a3\u4e48\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u7531\u4e8e\u5185\u5b58\u4e0d\u8db3\u800c\u65e0\u6cd5\u6267\u884c \u95ee\u98982\uff1a\u5f53\u95ee\u98981\u7684 1G \u7a0b\u5e8f\u6267\u884c\u5b8c\u540e\uff0c\u91ca\u653e\u5185\u5b58\uff0c\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\uff0c\u4f46\u6b64\u65f6\u5185\u5b58\u7a7a\u95f4\u4e0d\u8fde\u7eed \u5bf9\u4e8e32\u4f4d\u673a\u5668\u6765\u8bf4\uff0c\u5927\u5c0f\u7ea6\u4e3a$2^{32}$\uff0c\u5373 4G \u5de6\u53f3\uff0c\u5bf9\u4e8e64\u4f4d\u673a\u5668\u6765\u8bf4\uff0c\uff0c\u5927\u5c0f\u7ea6\u4e3a$2^{48}$\uff0c\u5373 256T \u5de6\u53f3 \u901a\u8fc7 CPU\u4e2d\u7684MMU(\u5185\u5b58\u7ba1\u7406\u5355\u5143) \u5c06\u865a\u62df\u5185\u5b58\u5730\u5740\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u5730\u5740\u4e0a \u6587\u4ef6\u63cf\u8ff0\u7b26 \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u662f\u4e00\u4e2a \u6570\u7ec4 \uff0c\u4e3a\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u591f\u540c\u65f6\u64cd\u4f5c\u591a\u4e2a\u6587\u4ef6 \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u9ed8\u8ba4\u5927\u5c0f\uff1a1024 Linux \u7cfb\u7edf IO \u51fd\u6570 open & close int open(const char *pathname, int flags); \uff0c\u4f7f\u7528 man 2 open \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 pathname \uff1a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u8def\u5f84 flags \uff1a\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\u8bbe\u7f6e\u8fd8\u6709\u5176\u4ed6\u7684\u8bbe\u7f6e( O_RDONLY, O_WRONLY, O_RDWR \u8fd9\u4e09\u4e2a\u8bbe\u7f6e\u662f\u4e92\u65a5\u7684\uff0c\u4ee3\u8868\u53ea\u8bfb\uff0c\u53ea\u5199\uff0c\u53ef\u8bfb\u53ef\u5199) \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e errno \uff0c errno \u5c5e\u4e8eLinux\u7cfb\u7edf\u51fd\u6570\u5e93\u91cc\u9762\u7684\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55\u7684\u662f\u6700\u8fd1\u7684\u9519\u8bef\u53f7 ```c / #include void perror(const char s);\u4f5c\u7528\uff1a\u6253\u5370errno\u5bf9\u5e94\u7684\u9519\u8bef\u63cf\u8ff0 \u53c2\u6570s\uff1a\u7528\u6237\u63cf\u8ff0\uff0c\u6bd4\u5982hello, \u6700\u7ec8\u8f93\u51fa\u7684\u5185\u5bb9\u662f hello:xxx(\u5b9e\u9645\u7684\u9519\u8bef\u63cf\u8ff0) */ #include // \u7cfb\u7edf\u5b8f #include #include // fopen\u51fd\u6570\u58f0\u660e\u5934\u6587\u4ef6 #include // close\u51fd\u6570\u58f0\u660e\u5934\u6587\u4ef6 #include int main() { // \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6 int fd = open(\"a.txt\", O_RDONLY); if(fd == -1) { perror(\"open\"); } // \u8bfb\u5199\u64cd\u4f5c // \u5173\u95ed close(fd); return 0; } ``` int open(const char *pathname, int flags, mode_t mode); \uff0c\u4f7f\u7528 man 2 open \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 pathname \uff1a\u8981\u521b\u5efa\u7684\u6587\u4ef6\u7684\u8def\u5f84 flags \uff1a\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\u548c\u5176\u4ed6\u7684\u8bbe\u7f6e \u5fc5\u9009\u9879\uff1a O_RDONLY , O_WRONLY , O_RDWR \u8fd9\u4e09\u4e2a\u4e4b\u95f4\u662f\u4e92\u65a5\u7684 \u53ef\u9009\u9879\uff1a O_CREAT \u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6 flags \u53c2\u6570\u662f\u4e00\u4e2aint\u7c7b\u578b\u7684\u6570\u636e\uff0c\u53604\u4e2a\u5b57\u8282\uff0c32\u4f4d\uff0c\u6bcf\u4e00\u4f4d\u5c31\u662f\u4e00\u4e2a\u6807\u5fd7\u4f4d\uff0c\u6240\u4ee5\u7528 | \u53ef\u4ee5\u4fdd\u8bc1\u80fd\u591f\u5b9e\u73b0\u591a\u4e2a\u64cd\u4f5c mode \uff1a\u516b\u8fdb\u5236\u7684\u6570\uff0c\u8868\u793a\u521b\u5efa\u51fa\u7684\u65b0\u7684\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\uff0c\u6bd4\u5982\uff1a0775 ```c / \u6700\u7ec8\u7684\u6743\u9650\u662f\uff1amode & ~umask 0777 -> 111111111 & 0775 -> 111111101 ---------------------------- 111111101 \u6309\u4f4d\u4e0e\uff1a0\u548c\u4efb\u4f55\u6570\u90fd\u4e3a0 umask\u7684\u4f5c\u7528\u5c31\u662f\u62b9\u53bb\u67d0\u4e9b\u6743\u9650, \u53ef\u4ee5\u76f4\u63a5\u5728\u7ec8\u7aef\u8f93\u5165 umask \u67e5\u770b\u9ed8\u8ba4\u503c / #include #include #include #include #include int main() { // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 int fd = open(\"create.txt\", O_RDWR | O_CREAT, 0777); if(fd == -1) { perror(\"open\"); } // \u5173\u95ed close(fd); return 0; } ``` int close(int fd); read & write ssize_t read(int fd, void *buf, size_t count); \uff0c\u4f7f\u7528 man 2 read \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 fd \uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0copen\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6 buf \uff1a\u9700\u8981\u8bfb\u53d6\u6570\u636e\u5b58\u653e\u7684\u5730\u65b9\uff0c\u6570\u7ec4\u7684\u5730\u5740\uff08\u4f20\u51fa\u53c2\u6570\uff09 count \uff1a\u6307\u5b9a\u7684\u6570\u7ec4\u7684\u5927\u5c0f \u8fd4\u56de\u503c \u6210\u529f > 0 : \u8fd4\u56de\u5b9e\u9645\u7684\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u6570 = 0 \uff1a\u6587\u4ef6\u5df2\u7ecf\u8bfb\u53d6\u5b8c\u4e86 \u5931\u8d25\uff1a-1 ssize_t write(int fd, const void *buf, size_t count); \uff0c\u4f7f\u7528 man 2 write \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 fd \uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0copen\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6 buf \uff1a\u8981\u5f80\u78c1\u76d8\u5199\u5165\u7684\u6570\u636e count \uff1a\u8981\u5199\u7684\u6570\u636e\u7684\u5b9e\u9645\u7684\u5927\u5c0f \u8fd4\u56de\u503c \u6210\u529f\uff1a\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570 \u5931\u8d25\uff1a\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e errno #include <unistd.h> #include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> int main() { // 1.\u901a\u8fc7open\u6253\u5f00english.txt\u6587\u4ef6 int srcfd = open(\"english.txt\", O_RDONLY); if(srcfd == -1) { perror(\"open\"); return -1; } // 2.\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\uff08\u62f7\u8d1d\u6587\u4ef6\uff09 int destfd = open(\"cpy.txt\", O_WRONLY | O_CREAT, 0664); if(destfd == -1) { perror(\"open\"); return -1; } // 3.\u9891\u7e41\u7684\u8bfb\u5199\u64cd\u4f5c char buf[1024] = {0}; int len = 0; while((len = read(srcfd, buf, sizeof(buf))) > 0) { write(destfd, buf, len); } // 4.\u5173\u95ed\u6587\u4ef6 close(destfd); close(srcfd); return 0; } lseek off_t lseek(int fd, off_t offset, int whence); \uff0c\u4f7f\u7528 man 2 lseek \u67e5\u770b\u5e2e\u52a9 /* \u6807\u51c6C\u5e93\u7684\u51fd\u6570 #include <stdio.h> int fseek(FILE *stream, long offset, int whence); Linux\u7cfb\u7edf\u51fd\u6570 #include <sys/types.h> #include <unistd.h> off_t lseek(int fd, off_t offset, int whence); \u53c2\u6570\uff1a - fd\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u901a\u8fc7open\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2afd\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6 - offset\uff1a\u504f\u79fb\u91cf - whence: SEEK_SET \u8bbe\u7f6e\u6587\u4ef6\u6307\u9488\u7684\u504f\u79fb\u91cf SEEK_CUR \u8bbe\u7f6e\u504f\u79fb\u91cf\uff1a\u5f53\u524d\u4f4d\u7f6e + \u7b2c\u4e8c\u4e2a\u53c2\u6570offset\u7684\u503c SEEK_END \u8bbe\u7f6e\u504f\u79fb\u91cf\uff1a\u6587\u4ef6\u5927\u5c0f + \u7b2c\u4e8c\u4e2a\u53c2\u6570offset\u7684\u503c \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u6587\u4ef6\u6307\u9488\u7684\u4f4d\u7f6e \u4f5c\u7528\uff1a 1.\u79fb\u52a8\u6587\u4ef6\u6307\u9488\u5230\u6587\u4ef6\u5934 lseek(fd, 0, SEEK_SET); 2.\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u6307\u9488\u7684\u4f4d\u7f6e lseek(fd, 0, SEEK_CUR); 3.\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6 lseek(fd, 0, SEEK_END); 4.\u62d3\u5c55\u6587\u4ef6\u7684\u957f\u5ea6\uff0c\u5f53\u524d\u6587\u4ef610b, 110b, \u589e\u52a0\u4e86100\u4e2a\u5b57\u8282 lseek(fd, 100, SEEK_END) \u6ce8\u610f\uff1a\u9700\u8981\u5199\u4e00\u6b21\u6570\u636e */ #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdio.h> int main() { int fd = open(\"hello.txt\", O_RDWR); if(fd == -1) { perror(\"open\"); return -1; } // \u6269\u5c55\u6587\u4ef6\u7684\u957f\u5ea6 int ret = lseek(fd, 100, SEEK_END); if(ret == -1) { perror(\"lseek\"); return -1; } // \u5199\u5165\u4e00\u4e2a\u7a7a\u6570\u636e\uff0c\u5982\u679c\u7f3a\u5c11\uff0c\u90a3\u4e48\u4f1a\u6269\u5c55\u5931\u8d25 write(fd, \" \", 1); // \u5173\u95ed\u6587\u4ef6 close(fd); return 0; } \u6269\u5c55\u524d \u6269\u5c55\u540e\uff08\u539f\u5148\u4e3a5\u4e2a\u5b57\u8282\uff0c\u6269\u5c55100\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff09 stat & lstat(\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\u53ca\u8f6f\u94fe\u63a5\u4fe1\u606f) int stat(const char *pathname, struct stat *statbuf); \uff0c\u4f7f\u7528 man 2 stat \u67e5\u770b\u5e2e\u52a9 int lstat(const char *pathname, struct stat *statbuf); \uff0c\u4f7f\u7528 man 2 lstat \u67e5\u770b\u5e2e\u52a9 Linux\u547d\u4ee4\uff1a stat stat \u7ed3\u6784\u4f53 c struct stat { dev_t st_dev; // \u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7 ino_t st_ino; // \u8282\u70b9 mode_t st_mode; // \u6587\u4ef6\u7684\u7c7b\u578b\u548c\u5b58\u53d6\u7684\u6743\u9650 nlink_t st_nlink; // \u8fde\u5230\u8be5\u6587\u4ef6\u7684\u786c\u8fde\u63a5\u6570\u76ee uid_t st_uid; // \u7528\u6237ID gid_t st_gid; // \u7ec4ID dev_t st_rdev; // \u8bbe\u5907\u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7 off_t st_size; // \u6587\u4ef6\u5b57\u8282\u6570(\u6587\u4ef6\u5927\u5c0f) blksize_t st_blksize; // \u5757\u5927\u5c0f blkcnt_t st_blocks; // \u5757\u6570 time_t st_atime; // \u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4 time_t st_mtime; // \u6700\u540e\u4e00\u6b21\u4fee\u6539\u65f6\u95f4 time_t st_ctime; // \u6700\u540e\u4e00\u6b21\u6539\u53d8\u65f6\u95f4(\u6307\u5c5e\u6027) }; st_mode /* #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> int stat(const char *pathname, struct stat *statbuf); \u4f5c\u7528\uff1a\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f \u53c2\u6570: - pathname\uff1a\u64cd\u4f5c\u7684\u6587\u4ef6\u7684\u8def\u5f84 - statbuf\uff1a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u7528\u4e8e\u4fdd\u5b58\u83b7\u53d6\u5230\u7684\u6587\u4ef6\u7684\u4fe1\u606f \u8fd4\u56de\u503c\uff1a \u6210\u529f\uff1a\u8fd4\u56de0 \u5931\u8d25\uff1a\u8fd4\u56de-1 \u8bbe\u7f6eerrno int lstat(const char *pathname, struct stat *statbuf); \u53c2\u6570: - pathname\uff1a\u64cd\u4f5c\u7684\u6587\u4ef6\u7684\u8def\u5f84 - statbuf\uff1a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u7528\u4e8e\u4fdd\u5b58\u83b7\u53d6\u5230\u7684\u6587\u4ef6\u7684\u4fe1\u606f \u8fd4\u56de\u503c\uff1a \u6210\u529f\uff1a\u8fd4\u56de0 \u5931\u8d25\uff1a\u8fd4\u56de-1 \u8bbe\u7f6eerrno */ #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <stdio.h> int main() { struct stat statbuf; int ret = stat(\"a.txt\", &statbuf); if(ret == -1) { perror(\"stat\"); return -1; } printf(\"size: %ld\\n\", statbuf.st_size); return 0; } \u6a21\u62df\u5b9e\u73b0 ls -l #include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <pwd.h> // for getpwuid() #include <grp.h> // for getgrgid() #include <time.h> // for ctime() #include <string.h> // for strncpy(), strlen() // \u6a21\u62df\u5b9e\u73b0 ls -l \u6307\u4ee4 // -rw-rw-r-- 1 nowcoder nowcoder 12 12\u6708 3 15:48 a.txt int main(int argc, char * argv[]) { // \u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u6b63\u786e if(argc < 2) { printf(\"%s filename\\n\", argv[0]); return -1; } // \u901a\u8fc7stat\u51fd\u6570\u83b7\u53d6\u7528\u6237\u4f20\u5165\u7684\u6587\u4ef6\u7684\u4fe1\u606f struct stat st; int ret = stat(argv[1], &st); if(ret == -1) { perror(\"stat\"); return -1; } // \u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\u548c\u6587\u4ef6\u6743\u9650 char perms[11] = {0}; // \u7528\u4e8e\u4fdd\u5b58\u6587\u4ef6\u7c7b\u578b\u548c\u6587\u4ef6\u6743\u9650\u7684\u5b57\u7b26\u4e32 switch(st.st_mode & S_IFMT) { case S_IFLNK: perms[0] = 'l'; break; case S_IFDIR: perms[0] = 'd'; break; case S_IFREG: perms[0] = '-'; break; case S_IFBLK: perms[0] = 'b'; break; case S_IFCHR: perms[0] = 'c'; break; case S_IFSOCK: perms[0] = 's'; break; case S_IFIFO: perms[0] = 'p'; break; default: perms[0] = '?'; break; } // \u5224\u65ad\u6587\u4ef6\u7684\u8bbf\u95ee\u6743\u9650 // \u6587\u4ef6\u6240\u6709\u8005 perms[1] = (st.st_mode & S_IRUSR) ? 'r' : '-'; perms[2] = (st.st_mode & S_IWUSR) ? 'w' : '-'; perms[3] = (st.st_mode & S_IXUSR) ? 'x' : '-'; // \u6587\u4ef6\u6240\u5728\u7ec4 perms[4] = (st.st_mode & S_IRGRP) ? 'r' : '-'; perms[5] = (st.st_mode & S_IWGRP) ? 'w' : '-'; perms[6] = (st.st_mode & S_IXGRP) ? 'x' : '-'; // \u5176\u4ed6\u4eba perms[7] = (st.st_mode & S_IROTH) ? 'r' : '-'; perms[8] = (st.st_mode & S_IWOTH) ? 'w' : '-'; perms[9] = (st.st_mode & S_IXOTH) ? 'x' : '-'; // \u786c\u8fde\u63a5\u6570 int linkNum = st.st_nlink; // \u6587\u4ef6\u6240\u6709\u8005 char* fileUser = getpwuid(st.st_uid)->pw_name; // \u6587\u4ef6\u6240\u5728\u7ec4 char* fileGrp = getgrgid(st.st_gid)->gr_name; // \u6587\u4ef6\u5927\u5c0f long int fileSize = st.st_size; // \u83b7\u53d6\u4fee\u6539\u7684\u65f6\u95f4 char* time = ctime(&st.st_mtime); char mtime[512] = {0}; strncpy(mtime, time, strlen(time) - 1); char buf[1024]; sprintf(buf, \"%s %d %s %s %ld %s %s\", perms, linkNum, fileUser, fileGrp, fileSize, mtime, argv[1]); printf(\"%s\\n\", buf); return 0; } \u6587\u4ef6\u5c5e\u6027\u64cd\u4f5c\u51fd\u6570 access int access(const char *pathname, int mode); /* #include <unistd.h> int access(const char *pathname, int mode); \u4f5c\u7528\uff1a\u5224\u65ad\u67d0\u4e2a\u6587\u4ef6\u662f\u5426\u6709\u67d0\u4e2a\u6743\u9650\uff0c\u6216\u8005\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 \u53c2\u6570\uff1a - pathname: \u5224\u65ad\u7684\u6587\u4ef6\u8def\u5f84 - mode: R_OK: \u5224\u65ad\u662f\u5426\u6709\u8bfb\u6743\u9650 W_OK: \u5224\u65ad\u662f\u5426\u6709\u5199\u6743\u9650 X_OK: \u5224\u65ad\u662f\u5426\u6709\u6267\u884c\u6743\u9650 F_OK: \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 */ #include <unistd.h> #include <stdio.h> int main() { int ret = access(\"a.txt\", F_OK); if(ret == -1) { perror(\"access\"); } printf(\"\u6587\u4ef6\u5b58\u5728\uff01\uff01!\\n\"); return 0; } chmod & chown int chmod(const char *filename, int mode); /* #include <sys/stat.h> int chmod(const char *pathname, mode_t mode); \u4fee\u6539\u6587\u4ef6\u7684\u6743\u9650 \u53c2\u6570\uff1a - pathname: \u9700\u8981\u4fee\u6539\u7684\u6587\u4ef6\u7684\u8def\u5f84 - mode:\u9700\u8981\u4fee\u6539\u7684\u6743\u9650\u503c\uff0c\u516b\u8fdb\u5236\u7684\u6570 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 */ #include <sys/stat.h> #include <stdio.h> int main() { int ret = chmod(\"a.txt\", 0777); if(ret == -1) { perror(\"chmod\"); return -1; } return 0; } int chown(const char *path, uid_t owner, gid_t group); \u4fee\u6539\u6587\u4ef6\u6240\u6709\u8005 \u53ef\u4f7f\u7528 vim /etc/passwd \u67e5\u770b\u6709\u54ea\u4e9b\u7528\u6237 \u53ef\u4f7f\u7528 vim /etc/group \u67e5\u770b\u6709\u54ea\u4e9b\u7ec4 truncate int truncate(const char *path, off_t length); /* #include <unistd.h> #include <sys/types.h> int truncate(const char *path, off_t length); \u4f5c\u7528\uff1a\u7f29\u51cf\u6216\u8005\u6269\u5c55\u6587\u4ef6\u7684\u5c3a\u5bf8\u81f3\u6307\u5b9a\u7684\u5927\u5c0f \u53c2\u6570\uff1a - path: \u9700\u8981\u4fee\u6539\u7684\u6587\u4ef6\u7684\u8def\u5f84 - length: \u9700\u8981\u6700\u7ec8\u6587\u4ef6\u53d8\u6210\u7684\u5927\u5c0f \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 */ #include <unistd.h> #include <sys/types.h> #include <stdio.h> int main() { int ret = truncate(\"b.txt\", 5); if(ret == -1) { perror(\"truncate\"); return -1; } return 0; } \u76ee\u5f55\u64cd\u4f5c\u51fd\u6570 mkdir int mkdir(const char *pathname, mode_t mode); /* #include <sys/stat.h> #include <sys/types.h> int mkdir(const char *pathname, mode_t mode); \u4f5c\u7528\uff1a\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55 \u53c2\u6570\uff1a pathname: \u521b\u5efa\u7684\u76ee\u5f55\u7684\u8def\u5f84 mode: \u6743\u9650\uff0c\u516b\u8fdb\u5236\u7684\u6570 \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 */ #include <sys/stat.h> #include <sys/types.h> #include <stdio.h> int main() { int ret = mkdir(\"aaa\", 0777); if(ret == -1) { perror(\"mkdir\"); return -1; } return 0; } rename int rename(const char *oldpath, const char *newpath); /* #include <stdio.h> int rename(const char *oldpath, const char *newpath); */ #include <stdio.h> int main() { int ret = rename(\"aaa\", \"bbb\"); if(ret == -1) { perror(\"rename\"); return -1; } return 0; } chdir & getcwd int chdir(const char *path); char *getcwd(char *buf, size_t size); /* #include <unistd.h> int chdir(const char *path); \u4f5c\u7528\uff1a\u4fee\u6539\u8fdb\u7a0b\u7684\u5de5\u4f5c\u76ee\u5f55 \u6bd4\u5982\u5728/home/nowcoder \u542f\u52a8\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8fa.out, \u8fdb\u7a0b\u7684\u5de5\u4f5c\u76ee\u5f55 /home/nowcoder \u53c2\u6570\uff1a path : \u9700\u8981\u4fee\u6539\u7684\u5de5\u4f5c\u76ee\u5f55 #include <unistd.h> char *getcwd(char *buf, size_t size); \u4f5c\u7528\uff1a\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u53c2\u6570\uff1a - buf : \u5b58\u50a8\u7684\u8def\u5f84\uff0c\u6307\u5411\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\uff08\u4f20\u51fa\u53c2\u6570\uff09 - size: \u6570\u7ec4\u7684\u5927\u5c0f \u8fd4\u56de\u503c\uff1a \u8fd4\u56de\u7684\u6307\u5411\u7684\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u4e2a\u6570\u636e\u5c31\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570 */ #include <unistd.h> #include <stdio.h> #include <sys/stat.h> #include <sys/types.h> #include <fcntl.h> int main() { // \u83b7\u53d6\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55 char buf[128]; getcwd(buf, sizeof(buf)); printf(\"\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\uff1a%s\\n\", buf); // \u4fee\u6539\u5de5\u4f5c\u76ee\u5f55 int ret = chdir(\"/home/u/Desktop/Linux/test\"); if(ret == -1) { perror(\"chdir\"); return -1; } // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 int fd = open(\"chdir.txt\", O_CREAT | O_RDWR, 0664); if(fd == -1) { perror(\"open\"); return -1; } close(fd); // \u83b7\u53d6\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55 char buf1[128]; getcwd(buf1, sizeof(buf1)); printf(\"\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\uff1a%s\\n\", buf1); return 0; } \u76ee\u5f55\u904d\u5386\u51fd\u6570 \u6253\u5f00\u4e00\u4e2a\u76ee\u5f55\uff1a DIR *opendir(const char *name); \u8bfb\u53d6\u76ee\u5f55\u4e2d\u7684\u6570\u636e\uff1a struct dirent *readdir(DIR *dirp); \u5173\u95ed\u76ee\u5f55\uff1a int closedir(DIR *dirp); dirent \u7ed3\u6784\u4f53\u548c d_type c struct dirent { // \u6b64\u76ee\u5f55\u8fdb\u5165\u70b9\u7684inode ino_t d_ino; // \u76ee\u5f55\u6587\u4ef6\u5f00\u5934\u81f3\u6b64\u76ee\u5f55\u8fdb\u5165\u70b9\u7684\u4f4d\u79fb off_t d_off; // d_name \u7684\u957f\u5ea6, \u4e0d\u5305\u542bNULL\u5b57\u7b26 unsigned short int d_reclen; // d_name \u6240\u6307\u7684\u6587\u4ef6\u7c7b\u578b unsigned char d_type; // \u6587\u4ef6\u540d char d_name[256]; }; d_type \u8bfb\u53d6\u6587\u4ef6\u5939\u6587\u4ef6\u6570\u76ee \u5b9e\u4f8b ```c / // \u6253\u5f00\u4e00\u4e2a\u76ee\u5f55 #include #include DIR opendir(const char *name); \u53c2\u6570\uff1a - name: \u9700\u8981\u6253\u5f00\u7684\u76ee\u5f55\u7684\u540d\u79f0 \u8fd4\u56de\u503c\uff1a DIR * \u7c7b\u578b\uff0c\u7406\u89e3\u4e3a\u76ee\u5f55\u6d41 \u9519\u8bef\u8fd4\u56deNULL // \u8bfb\u53d6\u76ee\u5f55\u4e2d\u7684\u6570\u636e #include <dirent.h> struct dirent *readdir(DIR *dirp); - \u53c2\u6570\uff1adirp\u662fopendir\u8fd4\u56de\u7684\u7ed3\u679c - \u8fd4\u56de\u503c\uff1a struct dirent\uff0c\u4ee3\u8868\u8bfb\u53d6\u5230\u7684\u6587\u4ef6\u7684\u4fe1\u606f \u8bfb\u53d6\u5230\u4e86\u672b\u5c3e\u6216\u8005\u5931\u8d25\u4e86\uff0c\u8fd4\u56deNULL // \u5173\u95ed\u76ee\u5f55 #include <sys/types.h> #include <dirent.h> int closedir(DIR *dirp); */ #include #include #include #include #include int getFileNum(const char * path); // \u8bfb\u53d6\u67d0\u4e2a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570 int main(int argc, char * argv[]) { if(argc < 2) { printf(\"%s path\\n\", argv[0]); return -1; } int num = getFileNum(argv[1]); printf(\"\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570\u4e3a\uff1a%d\\n\", num); return 0; } // \u7528\u4e8e\u83b7\u53d6\u76ee\u5f55\u4e0b\u6240\u6709\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570 int getFileNum(const char * path) { // 1.\u6253\u5f00\u76ee\u5f55 DIR * dir = opendir(path); if(dir == NULL) { perror(\"opendir\"); exit(0); } struct dirent *ptr; // \u8bb0\u5f55\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570 int total = 0; while((ptr = readdir(dir)) != NULL) { // \u83b7\u53d6\u540d\u79f0 char * dname = ptr->d_name; // \u5ffd\u7565\u6389. \u548c.. if(strcmp(dname, \".\") == 0 || strcmp(dname, \"..\") == 0) { continue; } // \u5224\u65ad\u662f\u5426\u662f\u666e\u901a\u6587\u4ef6\u8fd8\u662f\u76ee\u5f55 if(ptr->d_type == DT_DIR) { // \u76ee\u5f55,\u9700\u8981\u7ee7\u7eed\u8bfb\u53d6\u8fd9\u4e2a\u76ee\u5f55 char newpath[256]; sprintf(newpath, \"%s/%s\", path, dname); total += getFileNum(newpath); } if(ptr->d_type == DT_REG) { // \u666e\u901a\u6587\u4ef6 total++; } } // \u5173\u95ed\u76ee\u5f55 closedir(dir); return total; } ``` \u6587\u4ef6\u63cf\u8ff0\u7b26\u4e4b dup \u3001 dup2 dup int dup(int oldfd); \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 /* #include <unistd.h> int dup(int oldfd); \u4f5c\u7528\uff1a\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 fd=3, int fd1 = dup(fd), fd\u6307\u5411\u7684\u662fa.txt, fd1\u4e5f\u662f\u6307\u5411a.txt \u4ece\u7a7a\u95f2\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u4e2d\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u4f5c\u4e3a\u65b0\u7684\u62f7\u8d1d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 */ #include <unistd.h> #include <stdio.h> #include <fcntl.h> #include <sys/types.h> #include <sys/stat.h> #include <string.h> int main() { int fd = open(\"a.txt\", O_RDWR | O_CREAT, 0664); int fd1 = dup(fd); if(fd1 == -1) { perror(\"dup\"); return -1; } printf(\"fd : %d , fd1 : %d\\n\", fd, fd1); close(fd); char * str = \"hello,world\"; int ret = write(fd1, str, strlen(str)); if(ret == -1) { perror(\"write\"); return -1; } close(fd1); return 0; } dup2 int dup2(int oldfd, int newfd); \u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26 /* #include <unistd.h> int dup2(int oldfd, int newfd); \u4f5c\u7528\uff1a\u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26 oldfd \u6307\u5411 a.txt, newfd \u6307\u5411 b.txt \u8c03\u7528\u51fd\u6570\u6210\u529f\u540e\uff1anewfd \u548c b.txt \u505aclose, newfd \u6307\u5411\u4e86 a.txt oldfd \u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 oldfd\u548cnewfd\u503c\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u4ec0\u4e48\u90fd\u6ca1\u6709\u505a */ #include <unistd.h> #include <stdio.h> #include <string.h> #include <sys/stat.h> #include <sys/types.h> #include <fcntl.h> int main() { int fd = open(\"1.txt\", O_RDWR | O_CREAT, 0664); if(fd == -1) { perror(\"open\"); return -1; } int fd1 = open(\"2.txt\", O_RDWR | O_CREAT, 0664); if(fd1 == -1) { perror(\"open\"); return -1; } printf(\"fd : %d, fd1 : %d\\n\", fd, fd1); int fd2 = dup2(fd, fd1); if(fd2 == -1) { perror(\"dup2\"); return -1; } // \u901a\u8fc7fd1\u53bb\u5199\u6570\u636e\uff0c\u5b9e\u9645\u64cd\u4f5c\u7684\u662f1.txt\uff0c\u800c\u4e0d\u662f2.txt char * str = \"hello, dup2\"; int len = write(fd1, str, strlen(str)); if(len == -1) { perror(\"write\"); return -1; } printf(\"fd : %d, fd1 : %d, fd2 : %d\\n\", fd, fd1, fd2); close(fd); close(fd1); return 0; } fcntl \u51fd\u6570 int fcntl(int fd, int cmd, ... /* arg */ ); \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 \u548c \u8bbe\u7f6e/\u83b7\u53d6\u6587\u4ef6\u7684\u72b6\u6001\u6807\u5fd7 /* #include <unistd.h> #include <fcntl.h> int fcntl(int fd, int cmd, ...); \u53c2\u6570\uff1a fd : \u8868\u793a\u9700\u8981\u64cd\u4f5c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 cmd: \u8868\u793a\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u884c\u5982\u4f55\u64cd\u4f5c - F_DUPFD : \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26,\u590d\u5236\u7684\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570fd\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u8fd4\u56de\u503c\uff09 int ret = fcntl(fd, F_DUPFD); - F_GETFL : \u83b7\u53d6\u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6587\u4ef6\u72b6\u6001flag \u83b7\u53d6\u7684flag\u548c\u6211\u4eec\u901a\u8fc7open\u51fd\u6570\u4f20\u9012\u7684flag\u662f\u4e00\u4e2a\u4e1c\u897f\u3002 - F_SETFL : \u8bbe\u7f6e\u6587\u4ef6\u63cf\u8ff0\u7b26\u6587\u4ef6\u72b6\u6001flag \u5fc5\u9009\u9879\uff1aO_RDONLY, O_WRONLY, O_RDWR \u4e0d\u53ef\u4ee5\u88ab\u4fee\u6539 \u53ef\u9009\u6027\uff1aO_APPEND, O_NONBLOCK O_APPEND \u8868\u793a\u8ffd\u52a0\u6570\u636e NONBLOK \u8bbe\u7f6e\u6210\u975e\u963b\u585e \u963b\u585e\u548c\u975e\u963b\u585e\uff1a\u63cf\u8ff0\u7684\u662f\u51fd\u6570\u8c03\u7528\u7684\u884c\u4e3a\u3002 */ #include <unistd.h> #include <fcntl.h> #include <stdio.h> #include <string.h> int main() { // 1.\u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 // int fd = open(\"1.txt\", O_RDONLY); // int ret = fcntl(fd, F_DUPFD); // 2.\u4fee\u6539\u6216\u8005\u83b7\u53d6\u6587\u4ef6\u72b6\u6001flag int fd = open(\"1.txt\", O_RDWR); if(fd == -1) { perror(\"open\"); return -1; } // \u83b7\u53d6\u6587\u4ef6\u63cf\u8ff0\u7b26\u72b6\u6001flag int flag = fcntl(fd, F_GETFL); if(flag == -1) { perror(\"fcntl\"); return -1; } flag |= O_APPEND; // flag = flag | O_APPEND // \u4fee\u6539\u6587\u4ef6\u63cf\u8ff0\u7b26\u72b6\u6001\u7684flag\uff0c\u7ed9flag\u52a0\u5165O_APPEND\u8fd9\u4e2a\u6807\u8bb0 int ret = fcntl(fd, F_SETFL, flag); if(ret == -1) { perror(\"fcntl\"); return -1; } char * str = \"nihao\"; write(fd, str, strlen(str)); close(fd); return 0; }","title":"1.Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_1","text":"","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_2","text":"\u5728\u865a\u62df\u673a\u4e2d\u5b89\u88c5Linux\u7cfb\u7edf\uff0c\u672c\u9879\u76ee\u91c7\u7528 VMware Workstation 16.1.2 \u548c Ubuntu 18.04 \uff0c\u672c\u673a\u7cfb\u7edf\u4e3a Win 10 \u66f4\u65b0 Ubuntu 18.04 \u6e90\u5e76\u5b89\u88c5 open-vm-tools \u8fdb\u5165 /etc/apt/sources.list \u4fee\u6539\u4e3a\u56fd\u5185\u955c\u50cf\u6e90\uff08\u901f\u5ea6\u5feb\uff09\uff0c\u5168\u90e8\u5220\u9664\uff0c\u66ff\u6362\u4e3a\u4e0b\u8ff0\u5185\u5bb9\uff0c\u5982\u679c\u66f4\u65b0\u62a5\u9519\uff0c\u5c06 https \u6362\u6210 http ```shell # \u9ed8\u8ba4\u6ce8\u91ca\u4e86\u6e90\u7801\u955c\u50cf\u4ee5\u63d0\u9ad8 apt update \u901f\u5ea6\uff0c\u5982\u6709\u9700\u8981\u53ef\u81ea\u884c\u53d6\u6d88\u6ce8\u91ca deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse # \u9884\u53d1\u5e03\u8f6f\u4ef6\u6e90\uff0c\u4e0d\u5efa\u8bae\u542f\u7528 # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse ``` \u66f4\u65b0\u7cfb\u7edf\u6e90\uff1a shell # update \u662f\u540c\u6b65 /etc/apt/sources.list \u548c /etc/apt/sources.list.d \u4e2d\u5217\u51fa\u7684\u6e90\u7684\u7d22\u5f15\uff0c\u8fd9\u6837\u624d\u80fd\u83b7\u53d6\u5230\u6700\u65b0\u7684\u8f6f\u4ef6\u5305 sudo apt update # upgrade \u662f\u5347\u7ea7\u5df2\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305(\u53ef\u9009) # sudo apt upgrade \u5b89\u88c5 open-vm-tools \uff1a sudo apt install open-vm-tools ~~\u5982\u679c\u8981\u5b9e\u73b0\u6587\u4ef6\u5939\u5171\u4eab\uff0c\u9700\u8981\u5b89\u88c5 open-vm-tools-dkms \uff1a sudo apt install open-vm-tools-dkms ~~=>\u6e05\u534e\u6e90\u627e\u4e0d\u5230 open-vm-tools-dkms \uff0c\u4e0d\u5b89\u88c5\u4e0d\u5f71\u54cd \u684c\u9762\u73af\u5883\u8fd8\u9700\u8981\u5b89\u88c5 open-vm-tools-desktop \u4ee5\u652f\u6301\u53cc\u5411\u62d6\u653e\u6587\u4ef6\uff1a sudo apt install open-vm-tools-desktop \u91cd\u542f\uff08\u4f7f\u7528 VMware \u81ea\u5e26\u91cd\u542f\uff0c\u4f7f\u7528 reboot \u91cd\u542f\u53ef\u80fd\u5931\u8d25\uff09\u540e\u6210\u529f\u8fdb\u884c\u62d6\u62fd\u590d\u5236 \u6ce8\uff1a \u53c2\u8003\u94fe\u63a5 \u5728 Ubuntu 18.10 \u5b89\u88c5\u5fc5\u8981\u7ec4\u4ef6 ```shell # \u5b89\u88c5Vim\u73af\u5883 sudo apt install vim # \u7528\u4e8e\u8fdc\u7a0b\u8fde\u63a5\u865a\u62df\u673a sudo apt install openssh-server # \u7528\u4e8e\u67e5\u770bIP\u5730\u5740 sudo apt install net-tools # \u6811\u5f62\u67e5\u770b\u6587\u4ef6\u5939\u5185\u5bb9 sudo apt install tree ```","title":"\u7cfb\u7edf\u914d\u7f6e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#vs-code","text":"\u5b89\u88c5 Remote Development \u63d2\u4ef6 \u5728Linux\u4e2d\u4f7f\u7528 ifconfig \u67e5\u770b ip\u5730\u5740 \u6309\u4e0b\u56fe\u6b65\u9aa4\u8bbe\u7f6e config \u6587\u4ef6 config \u5185\u5bb9\u5982\u4e0b shell # Read more about SSH config files: https://linux.die.net/man/5/ssh_config Host \u81ea\u5b9a\u4e49\u540d\u79f0 HostName \u8fdc\u7a0b\u670d\u52a1\u5668IP User \u8fdc\u7a0b\u670d\u52a1\u5668\u7528\u6237\u540d","title":"VS code"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gcc","text":"","title":"GCC"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_3","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/01 GCC","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gcc_1","text":"\u547d\u4ee4\uff1a sudo apt install gcc g++ \uff0c\u672c\u9879\u76ee\u5b89\u88c5\u7248\u672c\u4e3a\uff1a 7.5.0","title":"\u5b89\u88c5gcc"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gcc_2","text":"","title":"gcc\u5de5\u4f5c\u6d41\u7a0b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gcc_3","text":"-D \u5b9e\u4f8b \u6e90\u7a0b\u5e8f ```c","title":"gcc\u5e38\u7528\u53c2\u6570\u9009\u9879"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#include","text":"int main() {","title":"include"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#if-debug","text":"printf(\"Debug\\n\");","title":"if DEBUG"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#endif","text":"printf(\"hello, world\\n\"); return 0; } ``` \u7f16\u8bd1\u547d\u4ee41\uff1a ```shell gcc test.c -o test ./test","title":"endif"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_4","text":"hello, world ``` \u7f16\u8bd1\u547d\u4ee42\uff1a ```shell gcc test.c -o test -D DEBUG ./test","title":"\u8f93\u51fa"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_5","text":"Debug hello, world ```","title":"\u8f93\u51fa"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gccg","text":"gcc \u548c g++ \u90fd\u662f GNU(\u7ec4\u7ec7) \u7684\u4e00\u4e2a\u7f16\u8bd1\u5668 \u8bef\u533a\u4e00 \uff1a gcc \u53ea\u80fd\u7f16\u8bd1 c \u4ee3\u7801\uff0cg++ \u53ea\u80fd\u7f16\u8bd1 c++ \u4ee3\u7801 \u540e\u7f00\u4e3a .c \u7684\uff0c gcc \u628a\u5b83\u5f53\u4f5c\u662f C \u7a0b\u5e8f\uff0c\u800c g++ \u5f53\u4f5c\u662f c++ \u7a0b\u5e8f \u540e\u7f00\u4e3a .cpp \u7684\uff0c\u4e24\u8005\u90fd\u4f1a\u8ba4\u4e3a\u662f C++ \u7a0b\u5e8f\uff0c C++ \u7684\u8bed\u6cd5\u89c4\u5219\u66f4\u52a0\u4e25\u8c28\u4e00\u4e9b \u7f16\u8bd1\u9636\u6bb5\uff0c g++ \u4f1a\u8c03\u7528 gcc \uff0c\u5bf9\u4e8e C++ \u4ee3\u7801\uff0c\u4e24\u8005\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u662f\u56e0\u4e3a gcc \u547d\u4ee4\u4e0d\u80fd\u81ea\u52a8\u548c C++ \u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u8054\u63a5\uff0c\u6240\u4ee5\u901a\u5e38\u7528 g++ \u6765\u5b8c\u6210\u94fe\u63a5\uff0c\u4e3a\u4e86\u7edf\u4e00\u8d77\u89c1\uff0c\u5e72\u8106\u7f16\u8bd1/\u94fe\u63a5\u7edf\u7edf\u7528 g++ \u4e86\uff0c\u8fd9\u5c31\u7ed9\u4eba\u4e00\u79cd\u9519\u89c9\uff0c\u597d\u50cf cpp \u7a0b\u5e8f\u53ea\u80fd\u7528 g++ \u4f3c\u7684 \u8bef\u533a\u4e8c \uff1a gcc \u4e0d\u4f1a\u5b9a\u4e49 __cplusplus \u5b8f\uff0c\u800c g++ \u4f1a \u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u5b8f\u53ea\u662f\u6807\u5fd7\u7740\u7f16\u8bd1\u5668\u5c06\u4f1a\u628a\u4ee3\u7801\u6309 C \u8fd8\u662f C++ \u8bed\u6cd5\u6765\u89e3\u91ca \u5982\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u540e\u7f00\u4e3a .c \uff0c\u5e76\u4e14\u91c7\u7528 gcc \u7f16\u8bd1\u5668\uff0c\u5219\u8be5\u5b8f\u5c31\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5426\u5219\uff0c\u5c31\u662f\u5df2\u5b9a\u4e49 \u8bef\u533a\u4e09 \uff1a\u7f16\u8bd1\u53ea\u80fd\u7528 gcc \uff0c\u94fe\u63a5\u53ea\u80fd\u7528 g++ \u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u53e5\u8bdd\u4e0d\u7b97\u9519\u8bef\uff0c\u4f46\u662f\u5b83\u6df7\u6dc6\u4e86\u6982\u5ff5\uff0c\u5e94\u8be5\u8fd9\u6837\u8bf4\uff1a\u7f16\u8bd1\u53ef\u4ee5\u7528 gcc/g++ \uff0c\u800c\u94fe\u63a5\u53ef\u4ee5\u7528 g++ \u6216\u8005 gcc -lstdc++ gcc \u547d\u4ee4\u4e0d\u80fd\u81ea\u52a8\u548cC++\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u8054\u63a5\uff0c\u6240\u4ee5\u901a\u5e38\u4f7f\u7528 g++ \u6765\u5b8c\u6210\u94fe\u63a5\u3002\u4f46\u5728\u7f16\u8bd1\u9636\u6bb5\uff0c g++ \u4f1a\u81ea\u52a8\u8c03\u7528 gcc \uff0c\u4e8c\u8005\u7b49\u4ef7","title":"gcc\u4e0eg++\u533a\u522b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#linux","text":"","title":"Linux\u7cfb\u7edf\u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_6","text":"","title":"\u9759\u6001\u5e93\u4e0e\u52a8\u6001\u5e93"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_7","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/02 \u9759\u6001\u5e93\u4e0e\u52a8\u6001\u5e93","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_8","text":"\u5e93\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u4e0a\u7684\u4e00\u7c7b\u6587\u4ef6\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u5e93\u6587\u4ef6\u770b\u6210\u4e00\u79cd\u4ee3\u7801\u4ed3\u5e93\uff0c\u5b83\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\u4e00\u4e9b \u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u7528\u7684\u53d8\u91cf\u3001\u51fd\u6570\u6216\u7c7b \u5e93\u662f\u7279\u6b8a\u7684\u4e00\u79cd\u7a0b\u5e8f\uff0c\u7f16\u5199\u5e93\u7684\u7a0b\u5e8f\u548c\u7f16\u5199\u4e00\u822c\u7684\u7a0b\u5e8f\u533a\u522b\u4e0d\u5927\uff0c\u53ea\u662f \u5e93\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c \u5e93\u6587\u4ef6\u6709\u4e24\u79cd\uff0c \u9759\u6001\u5e93 \u548c \u52a8\u6001\u5e93\uff08\u5171\u4eab\u5e93\uff09 \u3002\u533a\u522b\u662f\uff1a \u9759\u6001\u5e93 \u5728\u7a0b\u5e8f\u7684\u94fe\u63a5\u9636\u6bb5\u88ab\u590d\u5236\u5230\u4e86\u7a0b\u5e8f\u4e2d \u52a8\u6001\u5e93 \u5728\u94fe\u63a5\u9636\u6bb5\u6ca1\u6709\u88ab\u590d\u5236\u5230\u7a0b\u5e8f\u4e2d\uff0c\u800c\u662f\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u7531\u7cfb\u7edf\u52a8\u6001\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u4f9b\u7a0b\u5e8f\u8c03\u7528 \u5e93\u7684\u597d\u5904\uff1a \u4ee3\u7801\u4fdd\u5bc6 \u548c \u65b9\u4fbf\u90e8\u7f72\u548c\u5206\u53d1","title":"\u5e93"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_9","text":"\u89c4\u5219 \u793a\u4f8b\uff1a\u6709\u5982\u4e0b\u56fe\u6240\u793a\u6587\u4ef6(\u5176\u4e2d\u6bcf\u4e2a\u5206\u6587\u4ef6\u7528\u4e8e\u5b9e\u73b0\u56db\u5219\u8fd0\u7b97)\uff0c\u5c06\u5176\u6253\u5305\u4e3a \u9759\u6001\u5e93 \u751f\u6210 .o \u6587\u4ef6\uff1a gcc -c \u6587\u4ef6\u540d \u5c06 .o \u6587\u4ef6\u6253\u5305\uff1a ar rcs libxxx.a xx1.o xx2.o","title":"\u9759\u6001\u5e93\u7684\u5236\u4f5c"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_10","text":"\u9700\u8981\u63d0\u4f9b \u9759\u6001\u5e93\u6587\u4ef6\u548c\u76f8\u5e94\u7684\u5934\u6587\u4ef6 \uff0c\u6709\u5982\u4e0b\u7ed3\u6784\u6587\u4ef6\uff0c\u5176\u4e2d main.c \u6d4b\u8bd5\u6587\u4ef6 ```c // main.c #include #include \"head.h\" int main() { int a = 20; int b = 12; printf(\"a = %d, b = %d\\n\", a, b); printf(\"a + b = %d\\n\", add(a, b)); printf(\"a - b = %d\\n\", subtract(a, b)); printf(\"a * b = %d\\n\", multiply(a, b)); printf(\"a / b = %f\\n\", divide(a, b)); return 0; } ``` \u7f16\u8bd1\u8fd0\u884c\uff1a gcc main.c -o app -I ./include -l calc -L ./lib -I ./include \uff1a\u6307\u5b9a\u5934\u6587\u4ef6\u76ee\u5f55\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef -l calc \uff1a\u6307\u5b9a\u9759\u6001\u5e93\u540d\u79f0\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef -L ./lib \uff1a\u6307\u5b9a\u9759\u6001\u5e93\u4f4d\u7f6e\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef \u6b63\u786e\u6267\u884c \uff08\u6210\u529f\u751f\u6210 app \u53ef\u6267\u884c\u6587\u4ef6\uff09 \u6d4b\u8bd5\u7a0b\u5e8f","title":"\u9759\u6001\u5e93\u7684\u4f7f\u7528"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_11","text":"\u89c4\u5219 \u793a\u4f8b\uff1a\u6709\u5982\u4e0b\u56fe\u6240\u793a\u6587\u4ef6(\u5176\u4e2d\u6bcf\u4e2a\u5206\u6587\u4ef6\u7528\u4e8e\u5b9e\u73b0\u56db\u5219\u8fd0\u7b97)\uff0c\u5c06\u5176\u6253\u5305\u4e3a \u52a8\u6001\u5e93 \u751f\u6210 .o \u6587\u4ef6\uff1a gcc -c -fpic \u6587\u4ef6\u540d \u5c06 .o \u6587\u4ef6\u6253\u5305\uff1a gcc -shared xx1.o xx2.o -o libxxx.so","title":"\u52a8\u6001\u5e93\u7684\u5236\u4f5c"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_12","text":"\u9700\u8981\u63d0\u4f9b \u52a8\u6001\u5e93\u6587\u4ef6\u548c\u76f8\u5e94\u7684\u5934\u6587\u4ef6 \u5b9a\u4f4d\u52a8\u6001\u5e93\uff08 \u539f\u56e0\u89c1\u5de5\u4f5c\u539f\u7406->\u5982\u4f55\u5b9a\u4f4d\u5171\u4eab\u5e93\u6587\u4ef6 \uff0c\u5176\u4e2d\u8def\u5f84\u4e3a\u52a8\u6001\u5e93\u6240\u5728\u4f4d\u7f6e\uff09 \u65b9\u6cd5\u4e00\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf\uff0c \u5f53\u524d\u7ec8\u7aef\u751f\u6548 \uff0c\u9000\u51fa\u5f53\u524d\u7ec8\u7aef\u5931\u6548 shell export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/u/Desktop/Linux/calc/lib \u65b9\u6cd5\u4e8c\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf\uff0c\u7528\u6237\u7ea7\u522b\u6c38\u4e45\u914d\u7f6e ```shell","title":"\u52a8\u6001\u5e93\u7684\u4f7f\u7528"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#bashrc","text":"vim ~/.bashrc","title":"\u4fee\u6539~/.bashrc"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#bashrc_1","text":"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/u/Desktop/Linux/calc/lib","title":"\u5728~/.bashrc\u4e2d\u6dfb\u52a0\u4e0b\u884c\uff0c\u4fdd\u5b58\u9000\u51fa"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_13","text":"source ~/.bashrc ``` \u65b9\u6cd5\u4e09\uff1a\u4fee\u6539\u73af\u5883\u53d8\u91cf\uff0c\u7cfb\u7edf\u7ea7\u522b\u6c38\u4e45\u914d\u7f6e ```shell","title":"\u4f7f\u4fee\u6539\u751f\u6548"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#etcprofile","text":"sudo vim /etc/profile","title":"\u4fee\u6539/etc/profile"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#bashrc_2","text":"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/u/Desktop/Linux/calc/lib","title":"\u5728~/.bashrc\u4e2d\u6dfb\u52a0\u4e0b\u884c\uff0c\u4fdd\u5b58\u9000\u51fa"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_14","text":"source /etc/profile ``` \u65b9\u6cd5\u56db\uff1a\u4fee\u6539 /etc/ld.so.cache\u6587\u4ef6\u5217\u8868 ```shell","title":"\u4f7f\u4fee\u6539\u751f\u6548"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#etcldsoconf","text":"sudo vim /etc/ld.so.conf","title":"\u4fee\u6539/etc/ld.so.conf"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#etcldsoconf_1","text":"/home/u/Desktop/Linux/calc/lib","title":"\u5728/etc/ld.so.conf\u4e2d\u6dfb\u52a0\u4e0b\u884c\uff0c\u4fdd\u5b58\u9000\u51fa"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_15","text":"sudo ldconfig ``` \u6709\u5982\u4e0b\u7ed3\u6784\u6587\u4ef6\uff0c\u5176\u4e2d main.c \u6d4b\u8bd5\u6587\u4ef6 \u7f16\u8bd1\u8fd0\u884c\uff1a gcc main.c -o app -I ./include -l calc -L ./lib \u6d4b\u8bd5\u7a0b\u5e8f \u5982\u679c\u4e0d\u5c06\u52a8\u6001\u5e93\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\u52a0\u5165\u73af\u5883\u53d8\u91cf\uff0c\u5219\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u9519\u8bef","title":"\u66f4\u65b0\u914d\u7f6e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_16","text":"\u9759\u6001\u5e93\uff1a GCC \u8fdb\u884c\u94fe\u63a5\u65f6\uff0c\u4f1a\u628a\u9759\u6001\u5e93\u4e2d\u4ee3\u7801\u6253\u5305\u5230\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d \u52a8\u6001\u5e93\uff1a GCC \u8fdb\u884c\u94fe\u63a5\u65f6\uff0c\u52a8\u6001\u5e93\u7684\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6253\u5305\u5230\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d \u7a0b\u5e8f\u542f\u52a8\u4e4b\u540e\uff0c\u52a8\u6001\u5e93\u4f1a\u88ab\u52a8\u6001\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u901a\u8fc7 ldd \uff08list dynamic dependencies\uff09 \u547d\u4ee4\u68c0\u67e5\u52a8\u6001\u5e93\u4f9d\u8d56\u5173\u7cfb \u5982\u4f55\u5b9a\u4f4d\u5171\u4eab\u5e93\u6587\u4ef6\u5462\uff1f \u5f53\u7cfb\u7edf\u52a0\u8f7d\u53ef\u6267\u884c\u4ee3\u7801\u65f6\u5019\uff0c\u80fd\u591f\u77e5\u9053\u5176\u6240\u4f9d\u8d56\u7684\u5e93\u7684\u540d\u5b57\uff0c\u4f46\u662f\u8fd8\u9700\u8981\u77e5\u9053 \u7edd\u5bf9\u8def\u5f84 \u3002\u6b64\u65f6\u5c31\u9700\u8981\u7cfb\u7edf\u7684\u52a8\u6001\u8f7d\u5165\u5668\u6765\u83b7\u53d6\u8be5\u7edd\u5bf9\u8def\u5f84 \u5bf9\u4e8e elf\u683c\u5f0f \u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u662f\u7531 ld-linux.so \u6765\u5b8c\u6210\u7684\uff0c\u5b83\u5148\u540e\u641c\u7d22 elf\u6587\u4ef6 \u7684 DT_RPATH \u6bb5 => \u73af\u5883\u53d8\u91cfLD_LIBRARY_PATH => /etc/ld.so.cache\u6587\u4ef6\u5217\u8868 => /lib/ \uff0c usr/lib \u76ee\u5f55\u627e\u5230\u5e93\u6587\u4ef6\u540e\u5c06\u5176\u8f7d\u5165\u5185\u5b58","title":"\u5de5\u4f5c\u539f\u7406"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_17","text":"","title":"\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u7684\u5bf9\u6bd4"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_18","text":"","title":"\u7a0b\u5e8f\u7f16\u8bd1\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_19","text":"","title":"\u9759\u6001\u5e93\u5236\u4f5c\u8fc7\u7a0b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_20","text":"","title":"\u52a8\u6001\u5e93\u5236\u4f5c\u8fc7\u7a0b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_21","text":"","title":"\u9759\u6001\u5e93\u7684\u4f18\u7f3a\u70b9"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_22","text":"","title":"\u52a8\u6001\u5e93\u7684\u4f18\u7f3a\u70b9"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile","text":"","title":"Makefile"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_23","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/03 Makefile","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_24","text":"\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u7684\u6e90\u6587\u4ef6\u4e0d\u8ba1\u5176\u6570\uff0c\u5176\u6309\u7c7b\u578b\u3001\u529f\u80fd\u3001\u6a21\u5757\u5206\u522b\u653e\u5728\u82e5\u5e72\u4e2a\u76ee\u5f55\u4e2d\uff0c Makefile \u6587\u4ef6\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u6765\u6307\u5b9a\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u5148\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u540e\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u751a\u81f3\u4e8e\u8fdb\u884c\u66f4\u590d\u6742\u7684\u529f\u80fd\u64cd\u4f5c\uff0c\u56e0\u4e3a Makefile \u6587\u4ef6\u5c31\u50cf\u4e00\u4e2a Shell \u811a\u672c\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4 Makefile \u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u201c\u81ea\u52a8\u5316\u7f16\u8bd1\u201d \uff0c\u4e00\u65e6\u5199\u597d\uff0c\u53ea\u9700\u8981\u4e00\u4e2a make \u547d\u4ee4\uff0c\u6574\u4e2a\u5de5\u7a0b\u5b8c\u5168\u81ea\u52a8\u7f16\u8bd1\uff0c\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\u3002 make \u662f\u4e00\u4e2a\u547d\u4ee4\u5de5\u5177\uff0c\u662f\u4e00\u4e2a\u89e3\u91ca Makefile \u6587\u4ef6\u4e2d\u6307\u4ee4\u7684\u547d\u4ee4\u5de5\u5177\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5927\u591a\u6570\u7684 IDE \u90fd\u6709\u8fd9\u4e2a\u547d\u4ee4\uff0c\u6bd4\u5982 Delphi \u7684 make \uff0cVisual C++ \u7684 nmake \uff0cLinux \u4e0b GNU \u7684 make \u5b89\u88c5\uff1a sudo apt install make \uff0c\u5b89\u88c5\u65f6\u4f1a\u5b89\u88c5 man \u624b\u518c","title":"\u6982\u5ff5\u53ca\u5b89\u88c5"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_1","text":"\u6587\u4ef6\u547d\u540d\uff1a makefile \u6216\u8005 Makefile Makefile \u89c4\u5219 \u4e00\u4e2a Makefile \u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u89c4\u5219 \u76ee\u6807 \uff1a\u6700\u7ec8\u8981\u751f\u6210\u7684\u6587\u4ef6\uff08\u4f2a\u76ee\u6807\u9664\u5916\uff09 \u4f9d\u8d56 \uff1a\u751f\u6210\u76ee\u6807\u6240\u9700\u8981\u7684\u6587\u4ef6\u6216\u662f\u76ee\u6807 \u547d\u4ee4 \uff1a\u901a\u8fc7\u6267\u884c\u547d\u4ee4\u5bf9\u4f9d\u8d56\u64cd\u4f5c\u751f\u6210\u76ee\u6807\uff08\u547d\u4ee4\u524d\u5fc5\u987b Tab \u7f29\u8fdb\uff09 Makefile \u4e2d\u7684\u5176\u5b83\u89c4\u5219\u4e00\u822c\u90fd\u662f\u4e3a\u7b2c\u4e00\u6761\u89c4\u5219\u670d\u52a1\u7684\u3002","title":"Makefile \u6587\u4ef6\u547d\u540d\u548c\u89c4\u5219"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_2","text":"","title":"Makefile\u7f16\u5199\u65b9\u5f0f"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_25","text":"\u5047\u8bbe\u6709\u5982\u4e0b\u6587\u4ef6","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_3","text":"app:add.c div.c multi.c sub.c main.c gcc add.c div.c multi.c sub.c main.c -o app","title":"\u65b9\u5f0f\u4e00\uff1aMakefile+\u76f4\u63a5\u7f16\u8bd1\u94fe\u63a5\uff08\u4e0d\u63a8\u8350\uff09"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_4","text":"app:add.o div.o multi.o sub.o main.o gcc add.o div.o multi.o sub.o main.o -o app add.o:add.c gcc -c add.c -o add.o div.o:div.c gcc -c div.c -o div.o multi.o:multi.c gcc -c multi.c -o multi.o sub.o:sub.c gcc -c sub.c -o sub.o main.o:main.c gcc -c main.c -o main.o","title":"\u65b9\u5f0f\u4e8c\uff1aMakefile+\u7f16\u8bd1+\u94fe\u63a5"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_5","text":"","title":"\u65b9\u5f0f\u4e09\uff1aMakefile+\u53d8\u91cf"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_26","text":"\u81ea\u5b9a\u4e49\u53d8\u91cf\uff1a \u53d8\u91cf\u540d=\u53d8\u91cf\u503c \uff0c\u5982 var=hello \u9884\u5b9a\u4e49\u53d8\u91cf AR : \u5f52\u6863\u7ef4\u62a4\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a ar CC : C \u7f16\u8bd1\u5668\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a cc CXX : C++ \u7f16\u8bd1\u5668\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a g++ $@ : \u76ee\u6807\u7684\u5b8c\u6574\u540d\u79f0 $< : \u7b2c\u4e00\u4e2a\u4f9d\u8d56\u6587\u4ef6\u7684\u540d\u79f0 $^ : \u6240\u6709\u7684\u4f9d\u8d56\u6587\u4ef6 \u793a\u4f8b \u83b7\u53d6\u53d8\u91cf\u7684\u503c\uff1a $(\u53d8\u91cf\u540d) \uff0c\u5982 $(var)","title":"\u77e5\u8bc6\u70b9"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_27","text":"src=add.o div.o multi.o sub.o main.o target=app $(target):$(src) $(CC) $^ -o $@ add.o:add.c $(CC) -c $^ -o $@ div.o:div.c $(CC) -c $^ -o $@ multi.o:multi.c $(CC) -c $^ -o $@ sub.o:sub.c $(CC) -c $^ -o $@ main.o:main.c $(CC) -c $^ -o $@","title":"\u793a\u4f8b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_6","text":"","title":"\u65b9\u5f0f\u56db\uff1aMakefile+\u6a21\u5f0f\u5339\u914d"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_28","text":"\u5f53\u6240\u8981\u7f16\u8bd1\u7684\u6587\u4ef6\u8fc7\u591a\u65f6\uff0c\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u80fd\u591f\u7b80\u5316\u64cd\u4f5c","title":"\u77e5\u8bc6\u70b9"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_29","text":"src=add.o div.o multi.o sub.o main.o target=app $(target):$(src) $(CC) $^ -o $@ %.o:%.c $(CC) -c $< -o $@","title":"\u793a\u4f8b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#makefile_7","text":"","title":"\u65b9\u6cd5\u4e94\uff1aMakefile + \u51fd\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_30","text":"$(wildcard PATTERN...) \u529f\u80fd\uff1a\u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u6307\u5b9a\u7c7b\u578b\u7684\u6587\u4ef6\u5217\u8868 \u53c2\u6570\uff1aPATTERN \u6307\u7684\u662f\u67d0\u4e2a\u6216\u591a\u4e2a\u76ee\u5f55\u4e0b\u7684\u5bf9\u5e94\u7684\u67d0\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u76ee\u5f55\uff0c\u4e00\u822c\u4f7f\u7528\u7a7a\u683c\u95f4\u9694 \u8fd4\u56de\uff1a\u5f97\u5230\u7684\u82e5\u5e72\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u5217\u8868\uff0c\u6587\u4ef6\u540d\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u95f4\u9694 \u793a\u4f8b $(patsubst <pattern>,<replacement>,<text>) \u529f\u80fd\uff1a\u67e5\u627e <text> \u4e2d\u7684\u5355\u8bcd(\u5355\u8bcd\u4ee5\u201c\u7a7a\u683c\u201d\u3001\u201cTab\u201d\u6216\u201c\u56de\u8f66\u201d\u201c\u6362\u884c\u201d\u5206\u9694)\u662f\u5426\u7b26\u5408\u6a21\u5f0f <pattern> \uff0c\u5982\u679c\u5339\u914d\u7684\u8bdd\uff0c\u5219\u4ee5 <replacement> \u66ff\u6362 <pattern> \u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26 % \uff0c\u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u4e32\u3002\u5982\u679c <replacement> \u4e2d\u4e5f\u5305\u542b % \uff0c\u90a3\u4e48\uff0c <replacement> \u4e2d\u7684\u8fd9\u4e2a % \u5c06\u662f <pattern> \u4e2d\u7684\u90a3\u4e2a%\u6240\u4ee3\u8868\u7684\u5b57\u4e32\u3002(\u53ef\u4ee5\u7528 \\ \u6765\u8f6c\u4e49\uff0c\u4ee5 \\% \u6765\u8868\u793a\u771f\u5b9e\u542b\u4e49\u7684 % \u5b57\u7b26) \u8fd4\u56de\uff1a\u51fd\u6570\u8fd4\u56de\u88ab\u66ff\u6362\u8fc7\u540e\u7684\u5b57\u7b26\u4e32 \u793a\u4f8b","title":"\u77e5\u8bc6\u70b9"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_31","text":"src=$(wildcard ./*.c) objs=$(patsubst %.c, %.o, $(src)) target=app $(target):$(objs) $(CC) $^ -o $@ %.o:%.c $(CC) -c $< -o $@","title":"\u793a\u4f8b"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_32","text":"src=$(wildcard ./*.c) objs=$(patsubst %.c, %.o, $(src)) target=app $(target):$(objs) $(CC) $^ -o $@ %.o:%.c $(CC) -c $< -o $@ clean: rm *.o","title":"\u6e05\u9664\u4e2d\u95f4\u6587\u4ef6"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_33","text":"\u547d\u4ee4\u5728\u6267\u884c\u4e4b\u524d\uff0c\u9700\u8981\u5148\u68c0\u67e5\u89c4\u5219\u4e2d\u7684\u4f9d\u8d56\u662f\u5426\u5b58\u5728 \u5982\u679c\u5b58\u5728\uff0c\u6267\u884c\u547d\u4ee4 \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5411\u4e0b\u68c0\u67e5\u5176\u5b83\u7684\u89c4\u5219\uff0c\u68c0\u67e5\u6709\u6ca1\u6709\u4e00\u4e2a\u89c4\u5219\u662f\u7528\u6765\u751f\u6210\u8fd9\u4e2a\u4f9d\u8d56\u7684\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u6267\u884c\u8be5\u89c4\u5219\u4e2d\u7684\u547d\u4ee4 \u68c0\u6d4b\u66f4\u65b0\uff0c\u5728\u6267\u884c\u89c4\u5219\u4e2d\u7684\u547d\u4ee4\u65f6\uff0c\u4f1a\u6bd4\u8f83\u76ee\u6807\u548c\u4f9d\u8d56\u6587\u4ef6\u7684\u65f6\u95f4 \u5982\u679c\u4f9d\u8d56\u7684\u65f6\u95f4\u6bd4\u76ee\u6807\u7684\u65f6\u95f4\u665a\uff0c\u9700\u8981\u91cd\u65b0\u751f\u6210\u76ee\u6807 \u5982\u679c\u4f9d\u8d56\u7684\u65f6\u95f4\u6bd4\u76ee\u6807\u7684\u65f6\u95f4\u65e9\uff0c\u76ee\u6807\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u5bf9\u5e94\u89c4\u5219\u4e2d\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u88ab\u6267\u884c \u793a\u4f8b \u5f53\u4fee\u6539 main.c \u4e14\u91cd\u65b0 make \u65f6\uff0c\u5982\u4e0b \u5f53\u4e0d\u505a\u4efb\u4f55\u4fee\u6539\u4e14\u91cd\u65b0 make \u65f6\uff0c\u5982\u4e0b","title":"\u5de5\u4f5c\u539f\u7406"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gdb","text":"","title":"GDB\u8c03\u8bd5"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_34","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/04 GDB\u8c03\u8bd5","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_35","text":"GDB \u662f\u7531 GNU \u8f6f\u4ef6\u7cfb\u7edf\u793e\u533a\u63d0\u4f9b\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u540c GCC \u914d\u5957\u7ec4\u6210\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u5f00\u53d1\u73af\u5883\uff0c GDB \u662f Linux \u548c\u8bb8\u591a\u7c7b Unix \u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u5f00\u53d1\u73af\u5883 \u4e00\u822c\u6765\u8bf4\uff0c GDB \u4e3b\u8981\u5e2e\u52a9\u4f60\u5b8c\u6210\u4e0b\u9762\u56db\u4e2a\u65b9\u9762\u7684\u529f\u80fd \u542f\u52a8\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6309\u7167\u81ea\u5b9a\u4e49\u7684\u8981\u6c42\u968f\u5fc3\u6240\u6b32\u7684\u8fd0\u884c\u7a0b\u5e8f \u53ef\u8ba9\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f\u5728\u6240\u6307\u5b9a\u7684\u8c03\u7f6e\u7684\u65ad\u70b9\u5904\u505c\u4f4f\uff08\u65ad\u70b9\u53ef\u4ee5\u662f\u6761\u4ef6\u8868\u8fbe\u5f0f\uff09 \u5f53\u7a0b\u5e8f\u88ab\u505c\u4f4f\u65f6\uff0c\u53ef\u4ee5\u68c0\u67e5\u6b64\u65f6\u7a0b\u5e8f\u4e2d\u6240\u53d1\u751f\u7684\u4e8b \u53ef\u4ee5\u6539\u53d8\u7a0b\u5e8f\uff0c\u5c06\u4e00\u4e2a BUG \u4ea7\u751f\u7684\u5f71\u54cd\u4fee\u6b63\u4ece\u800c\u6d4b\u8bd5\u5176\u4ed6 BUG","title":"\u6982\u5ff5"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_36","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\uff1a gcc -g -Wall program.c -o program \u901a\u5e38\uff0c\u5728\u4e3a\u8c03\u8bd5\u800c\u7f16\u8bd1\u65f6\uff0c\u6211\u4eec\u4f1a \u5173\u6389\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u9009\u9879 \uff08 -O \uff09\uff0c \u5e76\u6253\u5f00 \u8c03\u8bd5\u9009\u9879 \uff08 -g \uff09\u3002\u53e6\u5916\uff0c -Wall \u5728\u5c3d\u91cf\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\u9009\u9879\u6253\u5f00\u6240\u6709warning\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8bb8\u591a\u95ee\u9898\uff0c\u907f\u514d\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684 BUG -g \u9009\u9879\u7684\u4f5c\u7528\u662f\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u52a0\u5165\u6e90\u4ee3\u7801\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7b2c\u51e0\u6761\u673a\u5668\u6307\u4ee4\u5bf9\u5e94\u6e90\u4ee3\u7801\u7684\u7b2c\u51e0\u884c\uff0c\u4f46\u5e76\u4e0d\u662f\u628a\u6574\u4e2a\u6e90\u6587\u4ef6\u5d4c\u5165\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5728\u8c03\u8bd5\u65f6\u5fc5\u987b\u4fdd\u8bc1 gdb \u80fd\u627e\u5230\u6e90\u6587\u4ef6 \u6ce8\uff1a\u5f53\u5728 gdb \u4e2d\u76f4\u63a5\u4f7f\u7528 \u56de\u8f66 \u65f6\uff0c\u4f1a\u9ed8\u8ba4\u6267\u884c\u4e0a\u4e00\u6761\u547d\u4ee4","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_37","text":"","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_38","text":"\u542f\u52a8\u4e0e\u9000\u51fa \u81f3 \u67e5\u770b\u5f53\u524d\u6587\u4ef6\u4ee3\u7801 \u4f7f\u7528 test.c \u540e\u7eed\u5185\u5bb9\u4f7f\u7528\u8bfe\u4ef6\u4e2d\u5176\u4ed6\u6e90\u7a0b\u5e8f","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_39","text":"\u542f\u52a8\uff1a gdb \u53ef\u6267\u884c\u7a0b\u5e8f \u9000\u51fa\uff1a quit/q","title":"\u542f\u52a8\u4e0e\u9000\u51fa"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_40","text":"\u8bbe\u7f6e\u53c2\u6570\uff1a set args 10 20 \u83b7\u53d6\u8bbe\u7f6e\u53c2\u6570\uff1a show args // test.c \u6e90\u7801 #include <stdio.h> #include <stdlib.h> int test(int a); int main(int argc, char* argv[]) { int a, b; printf(\"argc = %d\\n\", argc); if(argc < 3) { a = 10; b = 30; } else { a = atoi(argv[1]); b = atoi(argv[2]); } printf(\"a = %d, b = %d\\n\", a, b); printf(\"a + b = %d\\n\", a + b); for(int i = 0; i < a; ++i) { printf(\"i = %d\\n\", i); // \u51fd\u6570\u8c03\u7528 int res = test(i); printf(\"res value: %d\\n\", res); } printf(\"THE END !!!\\n\"); return 0; } int test(int a) { int num = 0; for(int i = 0; i < a; ++i) { num += i; } return num; }","title":"\u7ed9\u7a0b\u5e8f\u8bbe\u7f6e\u53c2\u6570/\u83b7\u53d6\u8bbe\u7f6e\u53c2\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#gdb_1","text":"help","title":"GDB\u4f7f\u7528\u5e2e\u52a9"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_41","text":"\u4ece\u9ed8\u8ba4\u4f4d\u7f6e\u663e\u793a\uff1a list/l \u4ece\u6307\u5b9a\u7684\u884c\u663e\u793a\uff1a list/l \u884c\u53f7 \u4ece\u6307\u5b9a\u7684\u51fd\u6570\u663e\u793a\uff1a list/l \u884c\u53f7 \u6ce8\uff1a \u67e5\u770b\u65f6\u4f1a\u663e\u793a\u524d\u540e\u6587","title":"\u67e5\u770b\u5f53\u524d\u6587\u4ef6\u4ee3\u7801"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_42","text":"\u7f16\u8bd1\u8fd0\u884c\u5e76\u4f7f\u7528 gdb main \u4ece\u6307\u5b9a\u6587\u4ef6\u6307\u5b9a\u7684\u884c\u663e\u793a\uff1a list/l \u6587\u4ef6\u540d:\u884c\u53f7 \u4ece\u6307\u5b9a\u6587\u4ef6\u6307\u5b9a\u7684\u51fd\u6570\u663e\u793a\uff1a list/l \u6587\u4ef6\u540d:\u51fd\u6570\u540d","title":"\u67e5\u770b\u975e\u5f53\u524d\u6587\u4ef6\u4ee3\u7801"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_43","text":"\u67e5\u770b\u663e\u793a\u7684\u884c\u6570\uff1a show list/listsize \u8bbe\u7f6e\u663e\u793a\u7684\u884c\u6570\uff1a set list/listsize","title":"\u67e5\u770b\u53ca\u8bbe\u7f6e\u663e\u793a\u7684\u884c\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_44","text":"\u67e5\u770b\u65ad\u70b9\uff1a i/info b/break \u8bbe\u7f6e\u4e00\u822c\u65ad\u70b9 b/break \u884c\u53f7 b/break \u51fd\u6570\u540d b/break \u6587\u4ef6\u540d:\u884c\u53f7 b/break \u6587\u4ef6\u540d:\u51fd\u6570 \u8bbe\u7f6e\u6761\u4ef6\u65ad\u70b9\uff08\u4e00\u822c\u7528\u5728\u5faa\u73af\u7684\u4f4d\u7f6e\uff09\uff1a b/break 10 if i==5 \u5220\u9664\u65ad\u70b9\uff1a d/del/delete \u65ad\u70b9\u7f16\u53f7 \u8bbe\u7f6e\u65ad\u70b9\u65e0\u6548\uff1a dis/disable \u65ad\u70b9\u7f16\u53f7 \u8bbe\u7f6e\u65ad\u70b9\u751f\u6548\uff1a ena/enable \u65ad\u70b9\u7f16\u53f7","title":"\u65ad\u70b9\u64cd\u4f5c"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_45","text":"\u8fd0\u884c GDB \u7a0b\u5e8f \u7a0b\u5e8f\u505c\u5728\u7b2c\u4e00\u884c\uff1a start \u9047\u5230\u65ad\u70b9\u624d\u505c\uff1a run \u7ee7\u7eed\u8fd0\u884c\uff0c\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u505c\uff1a c/continue \u5411\u4e0b\u6267\u884c\u4e00\u884c\u4ee3\u7801\uff08\u4e0d\u4f1a\u8fdb\u5165\u51fd\u6570\u4f53\uff09\uff1a n/next \u53d8\u91cf\u64cd\u4f5c \u6253\u5370\u53d8\u91cf\u503c\uff1a p/print \u53d8\u91cf\u540d \u6253\u5370\u53d8\u91cf\u7c7b\u578b\uff1a ptype \u53d8\u91cf\u540d \u5411\u4e0b\u5355\u6b65\u8c03\u8bd5\uff08\u9047\u5230\u51fd\u6570\u8fdb\u5165\u51fd\u6570\u4f53\uff09 s/step \u8df3\u51fa\u51fd\u6570\u4f53\uff1a finish \u81ea\u52a8\u53d8\u91cf\u64cd\u4f5c \u81ea\u52a8\u6253\u5370\u6307\u5b9a\u53d8\u91cf\u7684\u503c\uff1a display \u53d8\u91cf\u540d \u67e5\u770b\u81ea\u52a8\u53d8\u91cf\uff1a i/info display \u53d6\u6d88\u81ea\u52a8\u53d8\u91cf\uff1a undisplay \u7f16\u53f7 \u5176\u5b83\u64cd\u4f5c \u8bbe\u7f6e\u53d8\u91cf\u503c\uff1a set var \u53d8\u91cf\u540d=\u53d8\u91cf\u503c \uff08\u5faa\u73af\u4e2d\u7528\u7684\u8f83\u591a\uff09 \u8df3\u51fa\u5faa\u73af\uff1a until","title":"\u8c03\u8bd5\u64cd\u4f5c"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#io","text":"","title":"\u6587\u4ef6IO"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_46","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/01Linux\u7cfb\u7edf\u7f16\u7a0b\u5165\u95e8/05 \u6587\u4ef6IO \u5728 Linux \u4e2d\u4f7f\u7528 man 2 API\u540d \u67e5\u770b Linux\u7cfb\u7edfAPI \uff0c man 3 API\u540d \u67e5\u770b \u6807\u51c6C\u5e93API man 2 open man 3 fopen","title":"\u8bf4\u660e"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#c-io","text":"","title":"\u6807\u51c6 C \u5e93 IO \u51fd\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#c-io-linux-io","text":"","title":"\u6807\u51c6 C \u5e93 IO \u548c Linux \u7cfb\u7edf IO \u7684\u5173\u7cfb"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_47","text":"\u865a\u62df\u5730\u5740\u7a7a\u95f4\u662f\u4e3a\u4e86\u89e3\u51b3\u5185\u5b58\u52a0\u8f7d\u95ee\u9898 \u95ee\u98981\uff1a\u5047\u8bbe\u5b9e\u9645\u5185\u5b58\u4e3a 4G \uff0c\u6b64\u65f6\u5171\u6709 1G \u3001 2G \u3001 2G \u4e09\u4e2a\u7a0b\u5e8f\uff0c\u5982\u679c\u76f4\u63a5\u52a0\u8f7d\uff0c\u90a3\u4e48\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u7531\u4e8e\u5185\u5b58\u4e0d\u8db3\u800c\u65e0\u6cd5\u6267\u884c \u95ee\u98982\uff1a\u5f53\u95ee\u98981\u7684 1G \u7a0b\u5e8f\u6267\u884c\u5b8c\u540e\uff0c\u91ca\u653e\u5185\u5b58\uff0c\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\uff0c\u4f46\u6b64\u65f6\u5185\u5b58\u7a7a\u95f4\u4e0d\u8fde\u7eed \u5bf9\u4e8e32\u4f4d\u673a\u5668\u6765\u8bf4\uff0c\u5927\u5c0f\u7ea6\u4e3a$2^{32}$\uff0c\u5373 4G \u5de6\u53f3\uff0c\u5bf9\u4e8e64\u4f4d\u673a\u5668\u6765\u8bf4\uff0c\uff0c\u5927\u5c0f\u7ea6\u4e3a$2^{48}$\uff0c\u5373 256T \u5de6\u53f3 \u901a\u8fc7 CPU\u4e2d\u7684MMU(\u5185\u5b58\u7ba1\u7406\u5355\u5143) \u5c06\u865a\u62df\u5185\u5b58\u5730\u5740\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u5730\u5740\u4e0a","title":"\u865a\u62df\u5730\u5740\u7a7a\u95f4"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_48","text":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u662f\u4e00\u4e2a \u6570\u7ec4 \uff0c\u4e3a\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u591f\u540c\u65f6\u64cd\u4f5c\u591a\u4e2a\u6587\u4ef6 \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u9ed8\u8ba4\u5927\u5c0f\uff1a1024","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#linux-io","text":"","title":"Linux \u7cfb\u7edf IO \u51fd\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#open-close","text":"int open(const char *pathname, int flags); \uff0c\u4f7f\u7528 man 2 open \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 pathname \uff1a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u8def\u5f84 flags \uff1a\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\u8bbe\u7f6e\u8fd8\u6709\u5176\u4ed6\u7684\u8bbe\u7f6e( O_RDONLY, O_WRONLY, O_RDWR \u8fd9\u4e09\u4e2a\u8bbe\u7f6e\u662f\u4e92\u65a5\u7684\uff0c\u4ee3\u8868\u53ea\u8bfb\uff0c\u53ea\u5199\uff0c\u53ef\u8bfb\u53ef\u5199) \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e errno \uff0c errno \u5c5e\u4e8eLinux\u7cfb\u7edf\u51fd\u6570\u5e93\u91cc\u9762\u7684\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55\u7684\u662f\u6700\u8fd1\u7684\u9519\u8bef\u53f7 ```c / #include void perror(const char s);\u4f5c\u7528\uff1a\u6253\u5370errno\u5bf9\u5e94\u7684\u9519\u8bef\u63cf\u8ff0 \u53c2\u6570s\uff1a\u7528\u6237\u63cf\u8ff0\uff0c\u6bd4\u5982hello, \u6700\u7ec8\u8f93\u51fa\u7684\u5185\u5bb9\u662f hello:xxx(\u5b9e\u9645\u7684\u9519\u8bef\u63cf\u8ff0) */ #include // \u7cfb\u7edf\u5b8f #include #include // fopen\u51fd\u6570\u58f0\u660e\u5934\u6587\u4ef6 #include // close\u51fd\u6570\u58f0\u660e\u5934\u6587\u4ef6 #include int main() { // \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6 int fd = open(\"a.txt\", O_RDONLY); if(fd == -1) { perror(\"open\"); } // \u8bfb\u5199\u64cd\u4f5c // \u5173\u95ed close(fd); return 0; } ``` int open(const char *pathname, int flags, mode_t mode); \uff0c\u4f7f\u7528 man 2 open \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 pathname \uff1a\u8981\u521b\u5efa\u7684\u6587\u4ef6\u7684\u8def\u5f84 flags \uff1a\u5bf9\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\u548c\u5176\u4ed6\u7684\u8bbe\u7f6e \u5fc5\u9009\u9879\uff1a O_RDONLY , O_WRONLY , O_RDWR \u8fd9\u4e09\u4e2a\u4e4b\u95f4\u662f\u4e92\u65a5\u7684 \u53ef\u9009\u9879\uff1a O_CREAT \u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6 flags \u53c2\u6570\u662f\u4e00\u4e2aint\u7c7b\u578b\u7684\u6570\u636e\uff0c\u53604\u4e2a\u5b57\u8282\uff0c32\u4f4d\uff0c\u6bcf\u4e00\u4f4d\u5c31\u662f\u4e00\u4e2a\u6807\u5fd7\u4f4d\uff0c\u6240\u4ee5\u7528 | \u53ef\u4ee5\u4fdd\u8bc1\u80fd\u591f\u5b9e\u73b0\u591a\u4e2a\u64cd\u4f5c mode \uff1a\u516b\u8fdb\u5236\u7684\u6570\uff0c\u8868\u793a\u521b\u5efa\u51fa\u7684\u65b0\u7684\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\uff0c\u6bd4\u5982\uff1a0775 ```c / \u6700\u7ec8\u7684\u6743\u9650\u662f\uff1amode & ~umask 0777 -> 111111111 & 0775 -> 111111101 ---------------------------- 111111101 \u6309\u4f4d\u4e0e\uff1a0\u548c\u4efb\u4f55\u6570\u90fd\u4e3a0 umask\u7684\u4f5c\u7528\u5c31\u662f\u62b9\u53bb\u67d0\u4e9b\u6743\u9650, \u53ef\u4ee5\u76f4\u63a5\u5728\u7ec8\u7aef\u8f93\u5165 umask \u67e5\u770b\u9ed8\u8ba4\u503c / #include #include #include #include #include int main() { // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 int fd = open(\"create.txt\", O_RDWR | O_CREAT, 0777); if(fd == -1) { perror(\"open\"); } // \u5173\u95ed close(fd); return 0; } ``` int close(int fd);","title":"open &amp; close"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#read-write","text":"ssize_t read(int fd, void *buf, size_t count); \uff0c\u4f7f\u7528 man 2 read \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 fd \uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0copen\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6 buf \uff1a\u9700\u8981\u8bfb\u53d6\u6570\u636e\u5b58\u653e\u7684\u5730\u65b9\uff0c\u6570\u7ec4\u7684\u5730\u5740\uff08\u4f20\u51fa\u53c2\u6570\uff09 count \uff1a\u6307\u5b9a\u7684\u6570\u7ec4\u7684\u5927\u5c0f \u8fd4\u56de\u503c \u6210\u529f > 0 : \u8fd4\u56de\u5b9e\u9645\u7684\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u6570 = 0 \uff1a\u6587\u4ef6\u5df2\u7ecf\u8bfb\u53d6\u5b8c\u4e86 \u5931\u8d25\uff1a-1 ssize_t write(int fd, const void *buf, size_t count); \uff0c\u4f7f\u7528 man 2 write \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 fd \uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0copen\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6 buf \uff1a\u8981\u5f80\u78c1\u76d8\u5199\u5165\u7684\u6570\u636e count \uff1a\u8981\u5199\u7684\u6570\u636e\u7684\u5b9e\u9645\u7684\u5927\u5c0f \u8fd4\u56de\u503c \u6210\u529f\uff1a\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570 \u5931\u8d25\uff1a\u8fd4\u56de-1\uff0c\u5e76\u8bbe\u7f6e errno #include <unistd.h> #include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> int main() { // 1.\u901a\u8fc7open\u6253\u5f00english.txt\u6587\u4ef6 int srcfd = open(\"english.txt\", O_RDONLY); if(srcfd == -1) { perror(\"open\"); return -1; } // 2.\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\uff08\u62f7\u8d1d\u6587\u4ef6\uff09 int destfd = open(\"cpy.txt\", O_WRONLY | O_CREAT, 0664); if(destfd == -1) { perror(\"open\"); return -1; } // 3.\u9891\u7e41\u7684\u8bfb\u5199\u64cd\u4f5c char buf[1024] = {0}; int len = 0; while((len = read(srcfd, buf, sizeof(buf))) > 0) { write(destfd, buf, len); } // 4.\u5173\u95ed\u6587\u4ef6 close(destfd); close(srcfd); return 0; }","title":"read &amp; write"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#lseek","text":"off_t lseek(int fd, off_t offset, int whence); \uff0c\u4f7f\u7528 man 2 lseek \u67e5\u770b\u5e2e\u52a9 /* \u6807\u51c6C\u5e93\u7684\u51fd\u6570 #include <stdio.h> int fseek(FILE *stream, long offset, int whence); Linux\u7cfb\u7edf\u51fd\u6570 #include <sys/types.h> #include <unistd.h> off_t lseek(int fd, off_t offset, int whence); \u53c2\u6570\uff1a - fd\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u901a\u8fc7open\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8fd9\u4e2afd\u64cd\u4f5c\u67d0\u4e2a\u6587\u4ef6 - offset\uff1a\u504f\u79fb\u91cf - whence: SEEK_SET \u8bbe\u7f6e\u6587\u4ef6\u6307\u9488\u7684\u504f\u79fb\u91cf SEEK_CUR \u8bbe\u7f6e\u504f\u79fb\u91cf\uff1a\u5f53\u524d\u4f4d\u7f6e + \u7b2c\u4e8c\u4e2a\u53c2\u6570offset\u7684\u503c SEEK_END \u8bbe\u7f6e\u504f\u79fb\u91cf\uff1a\u6587\u4ef6\u5927\u5c0f + \u7b2c\u4e8c\u4e2a\u53c2\u6570offset\u7684\u503c \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u6587\u4ef6\u6307\u9488\u7684\u4f4d\u7f6e \u4f5c\u7528\uff1a 1.\u79fb\u52a8\u6587\u4ef6\u6307\u9488\u5230\u6587\u4ef6\u5934 lseek(fd, 0, SEEK_SET); 2.\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u6307\u9488\u7684\u4f4d\u7f6e lseek(fd, 0, SEEK_CUR); 3.\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6 lseek(fd, 0, SEEK_END); 4.\u62d3\u5c55\u6587\u4ef6\u7684\u957f\u5ea6\uff0c\u5f53\u524d\u6587\u4ef610b, 110b, \u589e\u52a0\u4e86100\u4e2a\u5b57\u8282 lseek(fd, 100, SEEK_END) \u6ce8\u610f\uff1a\u9700\u8981\u5199\u4e00\u6b21\u6570\u636e */ #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> #include <unistd.h> #include <stdio.h> int main() { int fd = open(\"hello.txt\", O_RDWR); if(fd == -1) { perror(\"open\"); return -1; } // \u6269\u5c55\u6587\u4ef6\u7684\u957f\u5ea6 int ret = lseek(fd, 100, SEEK_END); if(ret == -1) { perror(\"lseek\"); return -1; } // \u5199\u5165\u4e00\u4e2a\u7a7a\u6570\u636e\uff0c\u5982\u679c\u7f3a\u5c11\uff0c\u90a3\u4e48\u4f1a\u6269\u5c55\u5931\u8d25 write(fd, \" \", 1); // \u5173\u95ed\u6587\u4ef6 close(fd); return 0; } \u6269\u5c55\u524d \u6269\u5c55\u540e\uff08\u539f\u5148\u4e3a5\u4e2a\u5b57\u8282\uff0c\u6269\u5c55100\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff09","title":"lseek"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#stat-lstat","text":"int stat(const char *pathname, struct stat *statbuf); \uff0c\u4f7f\u7528 man 2 stat \u67e5\u770b\u5e2e\u52a9 int lstat(const char *pathname, struct stat *statbuf); \uff0c\u4f7f\u7528 man 2 lstat \u67e5\u770b\u5e2e\u52a9 Linux\u547d\u4ee4\uff1a stat stat \u7ed3\u6784\u4f53 c struct stat { dev_t st_dev; // \u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7 ino_t st_ino; // \u8282\u70b9 mode_t st_mode; // \u6587\u4ef6\u7684\u7c7b\u578b\u548c\u5b58\u53d6\u7684\u6743\u9650 nlink_t st_nlink; // \u8fde\u5230\u8be5\u6587\u4ef6\u7684\u786c\u8fde\u63a5\u6570\u76ee uid_t st_uid; // \u7528\u6237ID gid_t st_gid; // \u7ec4ID dev_t st_rdev; // \u8bbe\u5907\u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7 off_t st_size; // \u6587\u4ef6\u5b57\u8282\u6570(\u6587\u4ef6\u5927\u5c0f) blksize_t st_blksize; // \u5757\u5927\u5c0f blkcnt_t st_blocks; // \u5757\u6570 time_t st_atime; // \u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4 time_t st_mtime; // \u6700\u540e\u4e00\u6b21\u4fee\u6539\u65f6\u95f4 time_t st_ctime; // \u6700\u540e\u4e00\u6b21\u6539\u53d8\u65f6\u95f4(\u6307\u5c5e\u6027) }; st_mode /* #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> int stat(const char *pathname, struct stat *statbuf); \u4f5c\u7528\uff1a\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f \u53c2\u6570: - pathname\uff1a\u64cd\u4f5c\u7684\u6587\u4ef6\u7684\u8def\u5f84 - statbuf\uff1a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u7528\u4e8e\u4fdd\u5b58\u83b7\u53d6\u5230\u7684\u6587\u4ef6\u7684\u4fe1\u606f \u8fd4\u56de\u503c\uff1a \u6210\u529f\uff1a\u8fd4\u56de0 \u5931\u8d25\uff1a\u8fd4\u56de-1 \u8bbe\u7f6eerrno int lstat(const char *pathname, struct stat *statbuf); \u53c2\u6570: - pathname\uff1a\u64cd\u4f5c\u7684\u6587\u4ef6\u7684\u8def\u5f84 - statbuf\uff1a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u7528\u4e8e\u4fdd\u5b58\u83b7\u53d6\u5230\u7684\u6587\u4ef6\u7684\u4fe1\u606f \u8fd4\u56de\u503c\uff1a \u6210\u529f\uff1a\u8fd4\u56de0 \u5931\u8d25\uff1a\u8fd4\u56de-1 \u8bbe\u7f6eerrno */ #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <stdio.h> int main() { struct stat statbuf; int ret = stat(\"a.txt\", &statbuf); if(ret == -1) { perror(\"stat\"); return -1; } printf(\"size: %ld\\n\", statbuf.st_size); return 0; }","title":"stat &amp; lstat(\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\u53ca\u8f6f\u94fe\u63a5\u4fe1\u606f)"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#ls-l","text":"#include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <pwd.h> // for getpwuid() #include <grp.h> // for getgrgid() #include <time.h> // for ctime() #include <string.h> // for strncpy(), strlen() // \u6a21\u62df\u5b9e\u73b0 ls -l \u6307\u4ee4 // -rw-rw-r-- 1 nowcoder nowcoder 12 12\u6708 3 15:48 a.txt int main(int argc, char * argv[]) { // \u5224\u65ad\u8f93\u5165\u7684\u53c2\u6570\u662f\u5426\u6b63\u786e if(argc < 2) { printf(\"%s filename\\n\", argv[0]); return -1; } // \u901a\u8fc7stat\u51fd\u6570\u83b7\u53d6\u7528\u6237\u4f20\u5165\u7684\u6587\u4ef6\u7684\u4fe1\u606f struct stat st; int ret = stat(argv[1], &st); if(ret == -1) { perror(\"stat\"); return -1; } // \u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\u548c\u6587\u4ef6\u6743\u9650 char perms[11] = {0}; // \u7528\u4e8e\u4fdd\u5b58\u6587\u4ef6\u7c7b\u578b\u548c\u6587\u4ef6\u6743\u9650\u7684\u5b57\u7b26\u4e32 switch(st.st_mode & S_IFMT) { case S_IFLNK: perms[0] = 'l'; break; case S_IFDIR: perms[0] = 'd'; break; case S_IFREG: perms[0] = '-'; break; case S_IFBLK: perms[0] = 'b'; break; case S_IFCHR: perms[0] = 'c'; break; case S_IFSOCK: perms[0] = 's'; break; case S_IFIFO: perms[0] = 'p'; break; default: perms[0] = '?'; break; } // \u5224\u65ad\u6587\u4ef6\u7684\u8bbf\u95ee\u6743\u9650 // \u6587\u4ef6\u6240\u6709\u8005 perms[1] = (st.st_mode & S_IRUSR) ? 'r' : '-'; perms[2] = (st.st_mode & S_IWUSR) ? 'w' : '-'; perms[3] = (st.st_mode & S_IXUSR) ? 'x' : '-'; // \u6587\u4ef6\u6240\u5728\u7ec4 perms[4] = (st.st_mode & S_IRGRP) ? 'r' : '-'; perms[5] = (st.st_mode & S_IWGRP) ? 'w' : '-'; perms[6] = (st.st_mode & S_IXGRP) ? 'x' : '-'; // \u5176\u4ed6\u4eba perms[7] = (st.st_mode & S_IROTH) ? 'r' : '-'; perms[8] = (st.st_mode & S_IWOTH) ? 'w' : '-'; perms[9] = (st.st_mode & S_IXOTH) ? 'x' : '-'; // \u786c\u8fde\u63a5\u6570 int linkNum = st.st_nlink; // \u6587\u4ef6\u6240\u6709\u8005 char* fileUser = getpwuid(st.st_uid)->pw_name; // \u6587\u4ef6\u6240\u5728\u7ec4 char* fileGrp = getgrgid(st.st_gid)->gr_name; // \u6587\u4ef6\u5927\u5c0f long int fileSize = st.st_size; // \u83b7\u53d6\u4fee\u6539\u7684\u65f6\u95f4 char* time = ctime(&st.st_mtime); char mtime[512] = {0}; strncpy(mtime, time, strlen(time) - 1); char buf[1024]; sprintf(buf, \"%s %d %s %s %ld %s %s\", perms, linkNum, fileUser, fileGrp, fileSize, mtime, argv[1]); printf(\"%s\\n\", buf); return 0; }","title":"\u6a21\u62df\u5b9e\u73b0ls -l"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_49","text":"","title":"\u6587\u4ef6\u5c5e\u6027\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#access","text":"int access(const char *pathname, int mode); /* #include <unistd.h> int access(const char *pathname, int mode); \u4f5c\u7528\uff1a\u5224\u65ad\u67d0\u4e2a\u6587\u4ef6\u662f\u5426\u6709\u67d0\u4e2a\u6743\u9650\uff0c\u6216\u8005\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 \u53c2\u6570\uff1a - pathname: \u5224\u65ad\u7684\u6587\u4ef6\u8def\u5f84 - mode: R_OK: \u5224\u65ad\u662f\u5426\u6709\u8bfb\u6743\u9650 W_OK: \u5224\u65ad\u662f\u5426\u6709\u5199\u6743\u9650 X_OK: \u5224\u65ad\u662f\u5426\u6709\u6267\u884c\u6743\u9650 F_OK: \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 */ #include <unistd.h> #include <stdio.h> int main() { int ret = access(\"a.txt\", F_OK); if(ret == -1) { perror(\"access\"); } printf(\"\u6587\u4ef6\u5b58\u5728\uff01\uff01!\\n\"); return 0; }","title":"access"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#chmod-chown","text":"int chmod(const char *filename, int mode); /* #include <sys/stat.h> int chmod(const char *pathname, mode_t mode); \u4fee\u6539\u6587\u4ef6\u7684\u6743\u9650 \u53c2\u6570\uff1a - pathname: \u9700\u8981\u4fee\u6539\u7684\u6587\u4ef6\u7684\u8def\u5f84 - mode:\u9700\u8981\u4fee\u6539\u7684\u6743\u9650\u503c\uff0c\u516b\u8fdb\u5236\u7684\u6570 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 */ #include <sys/stat.h> #include <stdio.h> int main() { int ret = chmod(\"a.txt\", 0777); if(ret == -1) { perror(\"chmod\"); return -1; } return 0; } int chown(const char *path, uid_t owner, gid_t group); \u4fee\u6539\u6587\u4ef6\u6240\u6709\u8005 \u53ef\u4f7f\u7528 vim /etc/passwd \u67e5\u770b\u6709\u54ea\u4e9b\u7528\u6237 \u53ef\u4f7f\u7528 vim /etc/group \u67e5\u770b\u6709\u54ea\u4e9b\u7ec4","title":"chmod &amp; chown"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#truncate","text":"int truncate(const char *path, off_t length); /* #include <unistd.h> #include <sys/types.h> int truncate(const char *path, off_t length); \u4f5c\u7528\uff1a\u7f29\u51cf\u6216\u8005\u6269\u5c55\u6587\u4ef6\u7684\u5c3a\u5bf8\u81f3\u6307\u5b9a\u7684\u5927\u5c0f \u53c2\u6570\uff1a - path: \u9700\u8981\u4fee\u6539\u7684\u6587\u4ef6\u7684\u8def\u5f84 - length: \u9700\u8981\u6700\u7ec8\u6587\u4ef6\u53d8\u6210\u7684\u5927\u5c0f \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 */ #include <unistd.h> #include <sys/types.h> #include <stdio.h> int main() { int ret = truncate(\"b.txt\", 5); if(ret == -1) { perror(\"truncate\"); return -1; } return 0; }","title":"truncate"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_50","text":"","title":"\u76ee\u5f55\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#mkdir","text":"int mkdir(const char *pathname, mode_t mode); /* #include <sys/stat.h> #include <sys/types.h> int mkdir(const char *pathname, mode_t mode); \u4f5c\u7528\uff1a\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55 \u53c2\u6570\uff1a pathname: \u521b\u5efa\u7684\u76ee\u5f55\u7684\u8def\u5f84 mode: \u6743\u9650\uff0c\u516b\u8fdb\u5236\u7684\u6570 \u8fd4\u56de\u503c\uff1a \u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 */ #include <sys/stat.h> #include <sys/types.h> #include <stdio.h> int main() { int ret = mkdir(\"aaa\", 0777); if(ret == -1) { perror(\"mkdir\"); return -1; } return 0; }","title":"mkdir"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#rename","text":"int rename(const char *oldpath, const char *newpath); /* #include <stdio.h> int rename(const char *oldpath, const char *newpath); */ #include <stdio.h> int main() { int ret = rename(\"aaa\", \"bbb\"); if(ret == -1) { perror(\"rename\"); return -1; } return 0; }","title":"rename"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#chdir-getcwd","text":"int chdir(const char *path); char *getcwd(char *buf, size_t size); /* #include <unistd.h> int chdir(const char *path); \u4f5c\u7528\uff1a\u4fee\u6539\u8fdb\u7a0b\u7684\u5de5\u4f5c\u76ee\u5f55 \u6bd4\u5982\u5728/home/nowcoder \u542f\u52a8\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8fa.out, \u8fdb\u7a0b\u7684\u5de5\u4f5c\u76ee\u5f55 /home/nowcoder \u53c2\u6570\uff1a path : \u9700\u8981\u4fee\u6539\u7684\u5de5\u4f5c\u76ee\u5f55 #include <unistd.h> char *getcwd(char *buf, size_t size); \u4f5c\u7528\uff1a\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u53c2\u6570\uff1a - buf : \u5b58\u50a8\u7684\u8def\u5f84\uff0c\u6307\u5411\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\uff08\u4f20\u51fa\u53c2\u6570\uff09 - size: \u6570\u7ec4\u7684\u5927\u5c0f \u8fd4\u56de\u503c\uff1a \u8fd4\u56de\u7684\u6307\u5411\u7684\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u4e2a\u6570\u636e\u5c31\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570 */ #include <unistd.h> #include <stdio.h> #include <sys/stat.h> #include <sys/types.h> #include <fcntl.h> int main() { // \u83b7\u53d6\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55 char buf[128]; getcwd(buf, sizeof(buf)); printf(\"\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\uff1a%s\\n\", buf); // \u4fee\u6539\u5de5\u4f5c\u76ee\u5f55 int ret = chdir(\"/home/u/Desktop/Linux/test\"); if(ret == -1) { perror(\"chdir\"); return -1; } // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 int fd = open(\"chdir.txt\", O_CREAT | O_RDWR, 0664); if(fd == -1) { perror(\"open\"); return -1; } close(fd); // \u83b7\u53d6\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55 char buf1[128]; getcwd(buf1, sizeof(buf1)); printf(\"\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\uff1a%s\\n\", buf1); return 0; }","title":"chdir &amp; getcwd"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#_51","text":"\u6253\u5f00\u4e00\u4e2a\u76ee\u5f55\uff1a DIR *opendir(const char *name); \u8bfb\u53d6\u76ee\u5f55\u4e2d\u7684\u6570\u636e\uff1a struct dirent *readdir(DIR *dirp); \u5173\u95ed\u76ee\u5f55\uff1a int closedir(DIR *dirp); dirent \u7ed3\u6784\u4f53\u548c d_type c struct dirent { // \u6b64\u76ee\u5f55\u8fdb\u5165\u70b9\u7684inode ino_t d_ino; // \u76ee\u5f55\u6587\u4ef6\u5f00\u5934\u81f3\u6b64\u76ee\u5f55\u8fdb\u5165\u70b9\u7684\u4f4d\u79fb off_t d_off; // d_name \u7684\u957f\u5ea6, \u4e0d\u5305\u542bNULL\u5b57\u7b26 unsigned short int d_reclen; // d_name \u6240\u6307\u7684\u6587\u4ef6\u7c7b\u578b unsigned char d_type; // \u6587\u4ef6\u540d char d_name[256]; }; d_type \u8bfb\u53d6\u6587\u4ef6\u5939\u6587\u4ef6\u6570\u76ee \u5b9e\u4f8b ```c / // \u6253\u5f00\u4e00\u4e2a\u76ee\u5f55 #include #include DIR opendir(const char *name); \u53c2\u6570\uff1a - name: \u9700\u8981\u6253\u5f00\u7684\u76ee\u5f55\u7684\u540d\u79f0 \u8fd4\u56de\u503c\uff1a DIR * \u7c7b\u578b\uff0c\u7406\u89e3\u4e3a\u76ee\u5f55\u6d41 \u9519\u8bef\u8fd4\u56deNULL // \u8bfb\u53d6\u76ee\u5f55\u4e2d\u7684\u6570\u636e #include <dirent.h> struct dirent *readdir(DIR *dirp); - \u53c2\u6570\uff1adirp\u662fopendir\u8fd4\u56de\u7684\u7ed3\u679c - \u8fd4\u56de\u503c\uff1a struct dirent\uff0c\u4ee3\u8868\u8bfb\u53d6\u5230\u7684\u6587\u4ef6\u7684\u4fe1\u606f \u8bfb\u53d6\u5230\u4e86\u672b\u5c3e\u6216\u8005\u5931\u8d25\u4e86\uff0c\u8fd4\u56deNULL // \u5173\u95ed\u76ee\u5f55 #include <sys/types.h> #include <dirent.h> int closedir(DIR *dirp); */ #include #include #include #include #include int getFileNum(const char * path); // \u8bfb\u53d6\u67d0\u4e2a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570 int main(int argc, char * argv[]) { if(argc < 2) { printf(\"%s path\\n\", argv[0]); return -1; } int num = getFileNum(argv[1]); printf(\"\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570\u4e3a\uff1a%d\\n\", num); return 0; } // \u7528\u4e8e\u83b7\u53d6\u76ee\u5f55\u4e0b\u6240\u6709\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570 int getFileNum(const char * path) { // 1.\u6253\u5f00\u76ee\u5f55 DIR * dir = opendir(path); if(dir == NULL) { perror(\"opendir\"); exit(0); } struct dirent *ptr; // \u8bb0\u5f55\u666e\u901a\u6587\u4ef6\u7684\u4e2a\u6570 int total = 0; while((ptr = readdir(dir)) != NULL) { // \u83b7\u53d6\u540d\u79f0 char * dname = ptr->d_name; // \u5ffd\u7565\u6389. \u548c.. if(strcmp(dname, \".\") == 0 || strcmp(dname, \"..\") == 0) { continue; } // \u5224\u65ad\u662f\u5426\u662f\u666e\u901a\u6587\u4ef6\u8fd8\u662f\u76ee\u5f55 if(ptr->d_type == DT_DIR) { // \u76ee\u5f55,\u9700\u8981\u7ee7\u7eed\u8bfb\u53d6\u8fd9\u4e2a\u76ee\u5f55 char newpath[256]; sprintf(newpath, \"%s/%s\", path, dname); total += getFileNum(newpath); } if(ptr->d_type == DT_REG) { // \u666e\u901a\u6587\u4ef6 total++; } } // \u5173\u95ed\u76ee\u5f55 closedir(dir); return total; } ```","title":"\u76ee\u5f55\u904d\u5386\u51fd\u6570"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#dupdup2","text":"","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e4bdup\u3001dup2"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#dup","text":"int dup(int oldfd); \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 /* #include <unistd.h> int dup(int oldfd); \u4f5c\u7528\uff1a\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 fd=3, int fd1 = dup(fd), fd\u6307\u5411\u7684\u662fa.txt, fd1\u4e5f\u662f\u6307\u5411a.txt \u4ece\u7a7a\u95f2\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u4e2d\u627e\u4e00\u4e2a\u6700\u5c0f\u7684\uff0c\u4f5c\u4e3a\u65b0\u7684\u62f7\u8d1d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 */ #include <unistd.h> #include <stdio.h> #include <fcntl.h> #include <sys/types.h> #include <sys/stat.h> #include <string.h> int main() { int fd = open(\"a.txt\", O_RDWR | O_CREAT, 0664); int fd1 = dup(fd); if(fd1 == -1) { perror(\"dup\"); return -1; } printf(\"fd : %d , fd1 : %d\\n\", fd, fd1); close(fd); char * str = \"hello,world\"; int ret = write(fd1, str, strlen(str)); if(ret == -1) { perror(\"write\"); return -1; } close(fd1); return 0; }","title":"dup"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#dup2","text":"int dup2(int oldfd, int newfd); \u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26 /* #include <unistd.h> int dup2(int oldfd, int newfd); \u4f5c\u7528\uff1a\u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26 oldfd \u6307\u5411 a.txt, newfd \u6307\u5411 b.txt \u8c03\u7528\u51fd\u6570\u6210\u529f\u540e\uff1anewfd \u548c b.txt \u505aclose, newfd \u6307\u5411\u4e86 a.txt oldfd \u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 oldfd\u548cnewfd\u503c\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u4ec0\u4e48\u90fd\u6ca1\u6709\u505a */ #include <unistd.h> #include <stdio.h> #include <string.h> #include <sys/stat.h> #include <sys/types.h> #include <fcntl.h> int main() { int fd = open(\"1.txt\", O_RDWR | O_CREAT, 0664); if(fd == -1) { perror(\"open\"); return -1; } int fd1 = open(\"2.txt\", O_RDWR | O_CREAT, 0664); if(fd1 == -1) { perror(\"open\"); return -1; } printf(\"fd : %d, fd1 : %d\\n\", fd, fd1); int fd2 = dup2(fd, fd1); if(fd2 == -1) { perror(\"dup2\"); return -1; } // \u901a\u8fc7fd1\u53bb\u5199\u6570\u636e\uff0c\u5b9e\u9645\u64cd\u4f5c\u7684\u662f1.txt\uff0c\u800c\u4e0d\u662f2.txt char * str = \"hello, dup2\"; int len = write(fd1, str, strlen(str)); if(len == -1) { perror(\"write\"); return -1; } printf(\"fd : %d, fd1 : %d, fd2 : %d\\n\", fd, fd1, fd2); close(fd); close(fd1); return 0; }","title":"dup2"},{"location":"Linux504/01Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/#fcntl","text":"int fcntl(int fd, int cmd, ... /* arg */ ); \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 \u548c \u8bbe\u7f6e/\u83b7\u53d6\u6587\u4ef6\u7684\u72b6\u6001\u6807\u5fd7 /* #include <unistd.h> #include <fcntl.h> int fcntl(int fd, int cmd, ...); \u53c2\u6570\uff1a fd : \u8868\u793a\u9700\u8981\u64cd\u4f5c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 cmd: \u8868\u793a\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u884c\u5982\u4f55\u64cd\u4f5c - F_DUPFD : \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26,\u590d\u5236\u7684\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570fd\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u8fd4\u56de\u503c\uff09 int ret = fcntl(fd, F_DUPFD); - F_GETFL : \u83b7\u53d6\u6307\u5b9a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6587\u4ef6\u72b6\u6001flag \u83b7\u53d6\u7684flag\u548c\u6211\u4eec\u901a\u8fc7open\u51fd\u6570\u4f20\u9012\u7684flag\u662f\u4e00\u4e2a\u4e1c\u897f\u3002 - F_SETFL : \u8bbe\u7f6e\u6587\u4ef6\u63cf\u8ff0\u7b26\u6587\u4ef6\u72b6\u6001flag \u5fc5\u9009\u9879\uff1aO_RDONLY, O_WRONLY, O_RDWR \u4e0d\u53ef\u4ee5\u88ab\u4fee\u6539 \u53ef\u9009\u6027\uff1aO_APPEND, O_NONBLOCK O_APPEND \u8868\u793a\u8ffd\u52a0\u6570\u636e NONBLOK \u8bbe\u7f6e\u6210\u975e\u963b\u585e \u963b\u585e\u548c\u975e\u963b\u585e\uff1a\u63cf\u8ff0\u7684\u662f\u51fd\u6570\u8c03\u7528\u7684\u884c\u4e3a\u3002 */ #include <unistd.h> #include <fcntl.h> #include <stdio.h> #include <string.h> int main() { // 1.\u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26 // int fd = open(\"1.txt\", O_RDONLY); // int ret = fcntl(fd, F_DUPFD); // 2.\u4fee\u6539\u6216\u8005\u83b7\u53d6\u6587\u4ef6\u72b6\u6001flag int fd = open(\"1.txt\", O_RDWR); if(fd == -1) { perror(\"open\"); return -1; } // \u83b7\u53d6\u6587\u4ef6\u63cf\u8ff0\u7b26\u72b6\u6001flag int flag = fcntl(fd, F_GETFL); if(flag == -1) { perror(\"fcntl\"); return -1; } flag |= O_APPEND; // flag = flag | O_APPEND // \u4fee\u6539\u6587\u4ef6\u63cf\u8ff0\u7b26\u72b6\u6001\u7684flag\uff0c\u7ed9flag\u52a0\u5165O_APPEND\u8fd9\u4e2a\u6807\u8bb0 int ret = fcntl(fd, F_SETFL, flag); if(ret == -1) { perror(\"fcntl\"); return -1; } char * str = \"nihao\"; write(fd, str, strlen(str)); close(fd); return 0; }","title":"fcntl \u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/","text":"\u8fdb\u7a0b\u6982\u8ff0 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/01 \u8fdb\u7a0b\u6982\u8ff0 \u7a0b\u5e8f\u548c\u8fdb\u7a0b \u7a0b\u5e8f \u662f\u5305\u542b\u4e00\u7cfb\u5217 \u4fe1\u606f \u7684\u6587\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u63cf\u8ff0\u4e86\u5982\u4f55\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4e00\u4e2a \u8fdb\u7a0b \u4e8c\u8fdb\u5236\u683c\u5f0f\u6807\u8bc6 \uff1a\u6bcf\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u90fd\u5305\u542b\u7528\u4e8e\u63cf\u8ff0\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684\u5143\u4fe1\u606f\u3002\u5185\u6838\u5229\u7528\u6b64\u4fe1\u606f\u6765\u89e3\u91ca\u6587\u4ef6\u4e2d\u7684\u5176\u4ed6\u4fe1\u606f\uff0cLinux\u4e2d\u4e3aELF\u53ef\u6267\u884c\u8fde\u63a5\u683c\u5f0f \u673a\u5668\u8bed\u8a00\u6307\u4ee4 \uff1a\u5bf9\u7a0b\u5e8f\u7b97\u6cd5\u8fdb\u884c\u7f16\u7801 \u7a0b\u5e8f\u5165\u53e3\u5730\u5740 \uff1a\u6807\u8bc6\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\u7684\u8d77\u59cb\u6307\u4ee4\u4f4d\u7f6e \u6570\u636e \uff1a\u7a0b\u5e8f\u6587\u4ef6\u5305\u542b\u7684\u53d8\u91cf\u521d\u59cb\u503c\u548c\u7a0b\u5e8f\u4f7f\u7528\u7684\u5b57\u9762\u91cf\u503c\uff08\u6bd4\u5982\u5b57\u7b26\u4e32\uff09 \u7b26\u53f7\u8868\u53ca\u91cd\u5b9a\u4f4d\u8868 \uff1a\u63cf\u8ff0\u7a0b\u5e8f\u4e2d\u51fd\u6570\u548c\u53d8\u91cf\u7684\u4f4d\u7f6e\u53ca\u540d\u79f0\u3002\u8fd9\u4e9b\u8868\u683c\u6709\u591a\u91cd\u7528\u9014\uff0c\u5176\u4e2d\u5305\u62ec\u8c03\u8bd5\u548c\u8fd0\u884c\u65f6\u7684\u7b26\u53f7\u89e3\u6790\uff08\u52a8\u6001\u94fe\u63a5\uff09 \u5171\u4eab\u5e93\u548c\u52a8\u6001\u94fe\u63a5\u4fe1\u606f \uff1a\u7a0b\u5e8f\u6587\u4ef6\u6240\u5305\u542b\u7684\u4e00\u4e9b\u5b57\u6bb5\uff0c\u5217\u51fa\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u9700\u8981\u4f7f\u7528\u7684\u5171\u4eab\u5e93\uff0c\u4ee5\u53ca\u52a0\u8f7d\u5171\u4eab\u5e93\u7684\u52a8\u6001\u8fde\u63a5\u5668\u7684\u8def\u5f84\u540d \u5176\u4ed6\u4fe1\u606f\uff1a\u7a0b\u5e8f\u6587\u4ef6\u8fd8\u5305\u542b\u8bb8\u591a\u5176\u4ed6\u4fe1\u606f\uff0c\u7528\u4ee5\u63cf\u8ff0\u5982\u4f55\u521b\u5efa\u8fdb\u7a0b \u8fdb\u7a0b \u662f\u6b63\u5728\u8fd0\u884c\u7684 \u7a0b\u5e8f \u7684\u5b9e\u4f8b \u3002\u662f\u4e00\u4e2a\u5177\u6709\u4e00\u5b9a\u72ec\u7acb\u529f\u80fd\u7684\u7a0b\u5e8f\u5173\u4e8e\u67d0\u4e2a\u6570\u636e\u96c6\u5408\u7684\u4e00\u6b21\u8fd0\u884c\u6d3b\u52a8\u3002\u5b83\u662f\u64cd\u4f5c\u7cfb\u7edf\u52a8\u6001\u6267\u884c\u7684\u57fa\u672c\u5355\u5143\uff0c\u5728\u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0b\u65e2\u662f\u57fa\u672c\u7684\u5206\u914d\u5355\u5143\uff0c\u4e5f\u662f\u57fa\u672c\u7684\u6267\u884c\u5355\u5143 \u53ef\u4ee5\u7528 \u4e00\u4e2a\u7a0b\u5e8f\u6765\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b \uff0c\u8fdb\u7a0b\u662f\u7531\u5185\u6838\u5b9a\u4e49\u7684\u62bd\u8c61\u5b9e\u4f53\uff0c\u5e76\u4e3a\u8be5\u5b9e\u4f53\u5206\u914d\u7528\u4ee5\u6267\u884c\u7a0b\u5e8f\u7684\u5404\u9879\u7cfb\u7edf\u8d44\u6e90\u3002\u4ece\u5185\u6838\u7684\u89d2\u5ea6\u770b\uff0c\u8fdb\u7a0b\u7531\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u548c\u4e00\u7cfb\u5217\u5185\u6838\u6570\u636e\u7ed3\u6784\u7ec4\u6210\uff0c\u5176\u4e2d\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u5305\u542b\u4e86\u7a0b\u5e8f\u4ee3\u7801\u53ca\u4ee3\u7801\u6240\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u800c\u5185\u6838\u6570\u636e\u7ed3\u6784\u5219\u7528\u4e8e\u7ef4\u62a4\u8fdb\u7a0b\u72b6\u6001\u4fe1\u606f\u3002\u8bb0\u5f55\u5728\u5185\u6838\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4fe1\u606f\u5305\u62ec\u8bb8\u591a\u4e0e\u8fdb\u7a0b\u76f8\u5173\u7684\u6807\u8bc6\u53f7\uff08IDs\uff09\u3001\u865a\u62df\u5185\u5b58\u8868\u3001\u6253\u5f00\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u8868\u3001\u4fe1\u53f7\u4f20\u9012\u53ca\u5904\u7406\u7684\u6709\u5173\u4fe1\u606f\u3001\u8fdb\u7a0b\u8d44\u6e90\u4f7f\u7528\u53ca\u9650\u5236\u3001\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u548c\u5927\u91cf\u7684\u5176\u4ed6\u4fe1\u606f \u5355\u9053\u3001\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1 \u5355\u9053\u7a0b\u5e8f \uff0c\u5373\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u53ea\u5141\u8bb8\u4e00\u4e2a\u7684\u7a0b\u5e8f\u8fd0\u884c \u591a\u9053\u7a0b\u5e8f \u8bbe\u8ba1\u6280\u672f\u662f\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u540c\u65f6\u5b58\u653e\u51e0\u9053\u76f8\u4e92\u72ec\u7acb\u7684\u7a0b\u5e8f\uff0c\u4f7f\u5b83\u4eec \u5728\u7ba1\u7406\u7a0b\u5e8f\u63a7\u5236\u4e0b\uff0c\u76f8\u4e92\u7a7f\u63d2\u8fd0\u884c \uff0c\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7a0b\u5e8f\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u540c\u5904\u4e8e\u5f00\u59cb\u5230\u7ed3\u675f\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5171\u4eab\u8ba1\u7b97\u673a\u7cfb\u7edf\u8d44\u6e90\u3002 \u5f15\u5165\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u6280\u672f\u7684\u6839\u672c\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8 CPU \u7684\u5229\u7528\u7387 \u5bf9\u4e8e\u4e00\u4e2a \u5355 CPU \u7cfb\u7edf \u6765\u8bf4\uff0c\u7a0b\u5e8f\u540c\u65f6\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u53ea\u662f\u4e00\u79cd\u5b8f\u89c2\u4e0a\u7684\u6982\u5ff5\uff0c\u4ed6\u4eec\u867d\u7136\u90fd\u5df2\u7ecf\u5f00\u59cb\u8fd0\u884c\uff0c\u4f46 \u5c31\u5fae\u89c2\u800c\u8a00\uff0c\u4efb\u610f\u65f6\u523b\uff0cCPU \u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a \u5728\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u578b\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u8f6e\u6d41\u4f7f\u7528 CPU\u3002\u800c\u5f53\u4e0b\u5e38\u89c1 CPU \u4e3a\u7eb3\u79d2\u7ea7 \uff0c1\u79d2\u53ef\u4ee5\u6267\u884c\u5927\u7ea6 10 \u4ebf\u6761\u6307\u4ee4\u3002\u7531\u4e8e \u4eba\u773c\u7684\u53cd\u5e94\u901f\u5ea6\u662f\u6beb\u79d2\u7ea7 \uff0c\u6240\u4ee5\u770b\u4f3c\u540c\u65f6\u5728\u8fd0\u884c \u65f6\u95f4\u7247 \u65f6\u95f4\u7247\uff08timeslice\uff09 \u53c8\u79f0\u4e3a \u91cf\u5b50\uff08quantum\uff09 \u6216 \u5904\u7406\u5668\u7247\uff08processor slice\uff09 \u662f\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7ed9\u6bcf\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u5fae\u89c2\u4e0a\u7684\u4e00\u6bb5 CPU \u65f6\u95f4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u867d\u7136\u4e00\u53f0\u8ba1\u7b97\u673a\u901a\u5e38\u53ef\u80fd\u6709\u591a\u4e2a CPU\uff0c\u4f46\u662f\u540c\u4e00\u4e2a CPU \u6c38\u8fdc\u4e0d\u53ef\u80fd\u771f\u6b63\u5730\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u4efb\u52a1\u3002\u5728\u53ea\u8003\u8651\u4e00\u4e2a CPU \u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u201c\u770b\u8d77\u6765\u50cf\u201d\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u5b9e\u5219\u662f\u8f6e\u756a\u7a7f\u63d2\u5730\u8fd0\u884c\uff0c\u7531\u4e8e\u65f6\u95f4\u7247\u901a\u5e38\u5f88\u77ed\uff08\u5728 Linux \u4e0a\u4e3a 5ms\uff0d800ms \uff09\uff0c\u7528\u6237\u4e0d\u4f1a\u611f\u89c9\u5230 \u65f6\u95f4\u7247\u7531\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u8c03\u5ea6\u7a0b\u5e8f\u5206\u914d\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b \u3002\u9996\u5148\uff0c\u5185\u6838\u4f1a\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u76f8\u7b49\u7684\u521d\u59cb\u65f6\u95f4\u7247\uff0c\u7136\u540e\u6bcf\u4e2a\u8fdb\u7a0b\u8f6e\u756a\u5730\u6267\u884c\u76f8\u5e94\u7684\u65f6\u95f4\uff0c\u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u5904\u4e8e\u65f6\u95f4\u7247\u8017\u5c3d\u7684\u72b6\u6001\u65f6\uff0c\u5185\u6838\u4f1a\u91cd\u65b0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u8ba1\u7b97\u5e76\u5206\u914d\u65f6\u95f4\u7247\uff0c\u5982\u6b64\u5f80\u590d \u5e76\u884c\u548c\u5e76\u53d1 \u5e76\u884c(parallel) \uff1a\u6307\u5728\u540c\u4e00\u65f6\u523b\uff0c\u6709\u591a\u6761\u6307\u4ee4\u5728\u591a\u4e2a\u5904\u7406\u5668\u4e0a\u540c\u65f6\u6267\u884c \u5e76\u53d1(concurrency) \uff1a\u6307\u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u6761\u6307\u4ee4\u6267\u884c\uff0c\u4f46\u591a\u4e2a\u8fdb\u7a0b\u6307\u4ee4\u88ab\u5feb\u901f\u7684\u8f6e\u6362\u6267\u884c\uff0c\u4f7f\u5f97\u5728\u5b8f\u89c2\u4e0a\u5177\u6709\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u6267\u884c\u7684\u6548\u679c\uff0c\u4f46\u5728\u5fae\u89c2\u4e0a\u5e76\u4e0d\u662f\u540c\u65f6\u6267\u884c\u7684\uff0c\u53ea\u662f\u628a\u65f6\u95f4\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u591a\u4e2a\u8fdb\u7a0b\u5feb\u901f\u4ea4\u66ff\u7684\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u5757\uff08PCB\uff09 \u4e3a\u4e86\u7ba1\u7406\u8fdb\u7a0b\uff0c\u5185\u6838\u5fc5\u987b\u5bf9\u6bcf\u4e2a\u8fdb\u7a0b\u6240\u505a\u7684\u4e8b\u60c5\u8fdb\u884c\u6e05\u695a\u7684\u63cf\u8ff0\u3002\u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a PCB(Processing Control Block)\u8fdb\u7a0b\u63a7\u5236\u5757 \uff0c\u7ef4\u62a4\u8fdb\u7a0b\u76f8\u5173\u7684\u4fe1\u606f\uff0cLinux \u5185\u6838\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\u662f task_struct \u7ed3\u6784\u4f53 \u5728 /usr/src/linux-headers-xxx/include/linux/sched.h \u6587\u4ef6\u4e2d\u53ef\u4ee5\u67e5\u770b struct task_struct \u7ed3\u6784\u4f53\u5b9a\u4e49\uff0c\u5176\u4e2d linux-headers-xxx \u9700\u8981\u66ff\u6362\u4e3a\u8be5\u76ee\u5f55\u4e0b\u76f8\u5e94\u7684\u7248\u672c \u9700\u8981\u638c\u63e1\u7684 struct task_struct \u7ed3\u6784\u4f53\u6210\u5458 \u8fdb\u7a0bid \uff1a\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u552f\u4e00\u7684 id\uff0c\u7528 pid_t \u7c7b\u578b\u8868\u793a\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 \u8fdb\u7a0b\u7684\u72b6\u6001 \uff1a\u6709 \u5c31\u7eea \u3001 \u8fd0\u884c \u3001 \u6302\u8d77 \u3001 \u505c\u6b62 \u7b49\u72b6\u6001 \u8fdb\u7a0b\u5207\u6362\u65f6\u9700\u8981 \u4fdd\u5b58\u548c\u6062\u590d\u7684\u4e00\u4e9bCPU\u5bc4\u5b58\u5668 \u63cf\u8ff0 \u865a\u62df\u5730\u5740\u7a7a\u95f4 \u7684\u4fe1\u606f \u63cf\u8ff0 \u63a7\u5236\u7ec8\u7aef \u7684\u4fe1\u606f \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff08Current Working Directory\uff09 umask \u63a9\u7801 \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\uff0c\u5305\u542b\u5f88\u591a\u6307\u5411 file \u7ed3\u6784\u4f53\u7684\u6307\u9488 \u548c\u4fe1\u53f7\u76f8\u5173\u7684\u4fe1\u606f \u7528\u6237 id \u548c\u7ec4 id \u4f1a\u8bdd\uff08Session\uff09\u548c\u8fdb\u7a0b\u7ec4 \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7684\u8d44\u6e90\u4e0a\u9650\uff08Resource Limit\uff09\uff0c\u5728Linux\u4e2d\u53ef\u7528 ulimit -a \u67e5\u770b\u8d44\u6e90\u4e0a\u9650 \u8fdb\u7a0b\u72b6\u6001 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/02 \u8fdb\u7a0b\u72b6\u6001\u53ca\u8f6c\u6362 \u57fa\u672c\u6982\u5ff5 \u8fdb\u7a0b\u72b6\u6001\u53cd\u6620\u8fdb\u7a0b\u6267\u884c\u8fc7\u7a0b\u7684\u53d8\u5316\uff0c\u8fd9\u4e9b\u72b6\u6001\u968f\u7740\u8fdb\u7a0b\u7684\u6267\u884c\u548c\u5916\u754c\u6761\u4ef6\u7684\u53d8\u5316\u800c\u8f6c\u6362 \u5206\u4e3a \u4e09\u6001\u6a21\u578b \u548c \u4e94\u6001\u6a21\u578b \u4e09\u6001\u6a21\u578b \u8fd0\u884c\u6001 \uff1a\u8fdb\u7a0b\u5360\u6709\u5904\u7406\u5668\u6b63\u5728\u8fd0\u884c \u5c31\u7eea\u6001 \uff1a\u8fdb\u7a0b\u5177\u5907\u8fd0\u884c\u6761\u4ef6\uff0c\u7b49\u5f85\u7cfb\u7edf\u5206\u914d\u5904\u7406\u5668\u4ee5\u4fbf\u8fd0\u884c\u3002\u5f53\u8fdb\u7a0b\u5df2\u5206\u914d\u5230\u9664CPU\u4ee5\u5916\u7684\u6240\u6709\u5fc5\u8981\u8d44\u6e90\u540e\uff0c\u53ea\u8981\u518d\u83b7\u5f97CPU\uff0c\u4fbf\u53ef\u7acb\u5373\u6267\u884c\u3002\u5728\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u7684\u8fdb\u7a0b\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u901a\u5e38\u5c06\u5b83\u4eec\u6392\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u79f0\u4e3a\u5c31\u7eea\u961f\u5217 \u963b\u585e\u6001 \uff1a\u53c8\u79f0\u4e3a\u7b49\u5f85(wait)\u6001\u6216\u7761\u7720(sleep)\u6001\uff0c\u6307\u8fdb\u7a0b\u4e0d\u5177\u5907\u8fd0\u884c\u6761\u4ef6\uff0c\u6b63\u5728\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\u7684\u5b8c\u6210 \u4e94\u6001\u6a21\u578b \u9664 \u65b0\u5efa\u6001 \u548c \u7ec8\u6b62\u6001 \uff0c\u5176\u4f59\u4e09\u4e2a\u72b6\u6001\u4e0e \u4e09\u6001\u6a21\u578b \u4e00\u81f4 \u65b0\u5efa\u6001 \uff1a\u8fdb\u7a0b\u521a\u88ab\u521b\u5efa\u65f6\u7684\u72b6\u6001\uff0c\u5c1a\u672a\u8fdb\u5165\u5c31\u7eea\u961f\u5217 \u7ec8\u6b62\u6001 \uff1a\u8fdb\u7a0b\u5b8c\u6210\u4efb\u52a1\u5230\u8fbe\u6b63\u5e38\u7ed3\u675f\u70b9\uff0c\u6216\u51fa\u73b0\u65e0\u6cd5\u514b\u670d\u7684\u9519\u8bef\u800c\u5f02\u5e38\u7ec8\u6b62\uff0c\u6216\u88ab\u64cd\u4f5c\u7cfb\u7edf\u53ca\u6709\u7ec8\u6b62\u6743\u7684\u8fdb\u7a0b\u6240\u7ec8\u6b62\u65f6\u6240\u5904\u7684\u72b6\u6001\u3002\u8fdb\u5165\u7ec8\u6b62\u6001\u7684\u8fdb\u7a0b\u4ee5\u540e\u4e0d\u518d\u6267\u884c\uff0c\u4f46\u4f9d\u7136\u4fdd\u7559\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7b49\u5f85\u5584\u540e\u3002\u4e00\u65e6\u5176\u4ed6\u8fdb\u7a0b\u5b8c\u6210\u4e86\u5bf9\u7ec8\u6b62\u6001\u8fdb\u7a0b\u7684\u4fe1\u606f\u62bd\u53d6\u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5220\u9664\u8be5\u8fdb\u7a0b \u8fdb\u7a0b\u76f8\u5173\u547d\u4ee4 \u67e5\u770b\u8fdb\u7a0b-\u9759\u6001 ps \u547d\u4ee4\u7528\u6765\u67e5\u770b\u8fdb\u7a0b\uff08\u9759\u6001\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528 man ps \u67e5\u770b\u4f7f\u7528\u8bf4\u660e \u5e38\u7528\u53c2\u6570\u542b\u4e49 a\uff1a\u663e\u793a\u7ec8\u7aef\u4e0a\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u5305\u62ec\u5176\u4ed6\u7528\u6237\u7684\u8fdb\u7a0b u\uff1a\u663e\u793a\u8fdb\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f x\uff1a\u663e\u793a\u6ca1\u6709\u63a7\u5236\u7ec8\u7aef\u7684\u8fdb\u7a0b j\uff1a\u5217\u51fa\u4e0e\u4f5c\u4e1a\u63a7\u5236\u76f8\u5173\u7684\u4fe1\u606f ps -aux \u6216 ps aux USER \uff1a\u8fdb\u7a0b\u6240\u5c5e\u7528\u6237 PID \uff1a\u8fdb\u7a0bID %CPU \uff1aCPU\u4f7f\u7528\u5360\u6bd4 %MEM \uff1a\u5185\u5b58\u4f7f\u7528\u5360\u6bd4 TTY \uff1a\u8fdb\u7a0b\u6240\u5c5e\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u76f4\u63a5\u6267\u884c tty \u53ef\u67e5\u770b\u5f53\u524d Terminal \u6240\u5c5e\u7ec8\u7aef\uff08\u56e0\u4e3a\u6b64\u65f6\u6211\u8fd8\u6253\u5f00\u4e86\u53e6\u5916\u4e24\u4e2a\u7ec8\u7aef\uff09 STAT \uff1a\u8fdb\u7a0b\u72b6\u6001 D \uff1a\u4e0d\u53ef\u4e2d\u65ad Uninterruptible\uff08usually IO\uff09 R\uff1a\u6b63\u5728\u8fd0\u884c\uff0c\u6216\u5728\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b S(\u5927\u5199) \uff1a\u5904\u4e8e\u4f11\u7720\u72b6\u6001 T\uff1a\u505c\u6b62\u6216\u88ab\u8ffd\u8e2a Z\uff1a\u50f5\u5c38\u8fdb\u7a0b W\uff1a\u8fdb\u5165\u5185\u5b58\u4ea4\u6362\uff08\u4ece\u5185\u68382.6\u5f00\u59cb\u65e0\u6548\uff09 X\uff1a\u6b7b\u6389\u7684\u8fdb\u7a0b <\uff1a\u9ad8\u4f18\u5148\u7ea7 N\uff1a\u4f4e\u4f18\u5148\u7ea7 s\uff1a\u5305\u542b\u5b50\u8fdb\u7a0b +\uff1a\u4f4d\u4e8e\u524d\u53f0\u7684\u8fdb\u7a0b\u7ec4 START \uff1a\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u65f6\u95f4 TIME \uff1a\u8fdb\u7a0b\u6267\u884c\u6301\u7eed\u65f6\u95f4 COMMAND \uff1a\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4 ps -ajx \u6216 ps ajx PPID \uff1a\u8be5\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bID PGID \uff1a\u8be5\u8fdb\u7a0b\u6240\u5c5e\u7ec4ID SID \uff1a\u8be5\u8fdb\u7a0b\u6240\u5c5e\u4f1a\u8bdd(session)ID\uff0c\u591a\u4e2a\u7ec4\u6784\u6210\u4f1a\u8bdd \u67e5\u770b\u8fdb\u7a0b-\u52a8\u6001 top \u53ef\u4ee5\u5728\u4f7f\u7528 top \u547d\u4ee4\u65f6\u52a0\u4e0a -d \u6765\u6307\u5b9a\u663e\u793a\u4fe1\u606f\u66f4\u65b0\u7684\u65f6\u95f4\u95f4\u9694 \u5728 top \u547d\u4ee4\u6267\u884c\u540e\uff0c\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6309\u952e\u5bf9\u663e\u793a\u7684\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f M\uff1a\u6839\u636e\u5185\u5b58\u4f7f\u7528\u91cf\u6392\u5e8f P\uff1a\u6839\u636e CPU \u5360\u6709\u7387\u6392\u5e8f T\uff1a\u6839\u636e\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4\u957f\u77ed\u6392\u5e8f U\uff1a\u6839\u636e\u7528\u6237\u540d\u6765\u7b5b\u9009\u8fdb\u7a0b K\uff1a\u8f93\u5165\u6307\u5b9a\u7684 PID \u6740\u6b7b\u8fdb\u7a0b \u6740\u6b7b\u8fdb\u7a0b kill [-signal] pid kill -l \uff1a\u5217\u51fa\u6240\u6709\u4fe1\u53f7 kill -9 \u8fdb\u7a0bID \u7b49\u4ef7\u4e8e kill \u2013SIGKILL \u8fdb\u7a0bID killall name \uff1a\u6839\u636e\u8fdb\u7a0b\u540d\u6740\u6b7b\u8fdb\u7a0b \u8fdb\u7a0b\u53f7\u548c\u76f8\u5173\u51fd\u6570 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7531\u8fdb\u7a0b\u53f7\u6765\u6807\u8bc6\uff0c\u5176\u7c7b\u578b\u4e3a pid_t\uff08\u6574\u578b\uff09 \uff0c\u8fdb\u7a0b\u53f7\u7684\u8303\u56f4\uff1a 0\uff5e32767 \u3002\u8fdb\u7a0b\u53f7\u603b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u53ef\u4ee5\u91cd\u7528\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u540e\uff0c\u5176\u8fdb\u7a0b\u53f7\u5c31\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528 \u4efb\u4f55\u8fdb\u7a0b\uff08\u9664 init \u8fdb\u7a0b\uff09\u90fd\u662f\u7531\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u521b\u5efa \uff0c\u8be5\u8fdb\u7a0b\u79f0\u4e3a\u88ab\u521b\u5efa\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff0c\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7\u79f0\u4e3a\u7236\u8fdb\u7a0b\u53f7\uff08PPID\uff09 \u8fdb\u7a0b\u7ec4\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u7684\u96c6\u5408 \u3002\u4ed6\u4eec\u4e4b\u95f4\u76f8\u4e92\u5173\u8054\uff0c\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u63a5\u6536\u540c\u4e00\u7ec8\u7aef\u7684\u5404\u79cd\u4fe1\u53f7\uff0c\u5173\u8054\u7684\u8fdb\u7a0b\u6709\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53f7\uff08PGID\uff09\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u524d\u7684\u8fdb\u7a0b\u53f7\u4f1a\u5f53\u505a\u5f53\u524d\u7684\u8fdb\u7a0b\u7ec4\u53f7 \u8fdb\u7a0b\u53f7\u548c\u8fdb\u7a0b\u7ec4\u76f8\u5173\u51fd\u6570 pid_t getpid(void); \uff1a\u83b7\u53d6\u8fdb\u7a0bID pid_t getppid(void); \uff1a\u83b7\u53d6\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bID pid_t getpgid(pid_t pid); \uff1a\u83b7\u53d6\u8fdb\u7a0b\u7684\u7ec4ID \u8fdb\u7a0b\u521b\u5efa \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/03 \u8fdb\u7a0b\u521b\u5efa \u8fdb\u7a0b\u521b\u5efa\uff1afork \u53ef\u901a\u8fc7 man 2 fork \u67e5\u770b\u5e2e\u52a9 pid_t fork(void); ```c /* #include #include pid_t fork(void); \u51fd\u6570\u7684\u4f5c\u7528\uff1a\u7528\u4e8e\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002 \u8fd4\u56de\u503c\uff1a fork()\u7684\u8fd4\u56de\u503c\u4f1a\u8fd4\u56de\u4e24\u6b21\u3002\u4e00\u6b21\u662f\u5728\u7236\u8fdb\u7a0b\u4e2d\uff0c\u4e00\u6b21\u662f\u5728\u5b50\u8fdb\u7a0b\u4e2d\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd4\u56de\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684ID, \u5728\u5b50\u8fdb\u7a0b\u4e2d\u8fd4\u56de0 \u5982\u4f55\u533a\u5206\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\uff1a\u901a\u8fc7fork\u7684\u8fd4\u56de\u503c\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd4\u56de-1\uff0c\u8868\u793a\u521b\u5efa\u5b50\u8fdb\u7a0b\u5931\u8d25\uff0c\u5e76\u4e14\u8bbe\u7f6eerrno */ #include #include #include int main() { int num = 10; // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); // \u5224\u65ad\u662f\u7236\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b if(pid > 0) { printf(\"pid : %d\\n\", pid); // \u5982\u679c\u5927\u4e8e0\uff0c\u8fd4\u56de\u7684\u662f\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53f7\uff0c\u5f53\u524d\u662f\u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d, ppid : %d\\n\", getpid(), getppid()); printf(\"parent num : %d\\n\", num); num += 10; printf(\"parent num += 10 : %d\\n\", num); } else if(pid == 0) { // \u5f53\u524d\u662f\u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d, ppid : %d\\n\", getpid(),getppid()); printf(\"child num : %d\\n\", num); num += 100; printf(\"child num += 100 : %d\\n\", num); } // for\u5faa\u73af for(int i = 0; i < 3; i++) { printf(\"i : %d , pid : %d\\n\", i , getpid()); sleep(1); } return 0; } ``` fork\u5de5\u4f5c\u539f\u7406 Linux \u7684 fork() \u4f7f\u7528\u662f\u901a\u8fc7 \u5199\u65f6\u62f7\u8d1d (copy- on-write) \u5b9e\u73b0 \u3002\u5199\u65f6\u62f7\u8d1d\u662f\u4e00\u79cd\u53ef\u4ee5\u63a8\u8fdf\u751a\u81f3\u907f\u514d\u62f7\u8d1d\u6570\u636e\u7684\u6280\u672f \u5185\u6838\u6b64\u65f6\u5e76\u4e0d\u590d\u5236\u6574\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u662f\u8ba9 \u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4 \uff0c\u53ea\u6709\u5728 \u9700\u8981\u5199\u5165\u7684\u65f6\u5019 \u624d\u4f1a\u590d\u5236\u5730\u5740\u7a7a\u95f4\uff0c\u4ece\u800c\u4f7f\u5404\u4e2a\u8fdb\u7a0b\u62e5\u6709\u5404\u81ea\u7684\u5730\u5740\u7a7a\u95f4\u3002\u5373 \u8d44\u6e90\u7684\u590d\u5236\u662f\u5728\u9700\u8981\u5199\u5165\u7684\u65f6\u5019\u624d\u4f1a\u8fdb\u884c\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u53ea\u6709\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u5171\u4eab \uff08\u793a\u4f8b\u7a0b\u5e8f\u4e2d num \u7684\u4f5c\u7528\uff09 fork\u4e4b\u540e\u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u6587\u4ef6 \u3002fork\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0b \u6709\u76f8\u540c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6307\u5411\u76f8\u540c\u7684\u6587\u4ef6\u8868 \uff0c\u5f15\u7528\u8ba1\u6570\u589e\u52a0\uff0c\u5171\u4eab\u6587\u4ef6\u504f\u79fb\u6307\u9488 \u4f7f\u7528 \u865a\u62df\u5730\u5740\u7a7a\u95f4 \uff0c\u7531\u4e8e\u7528\u7684\u662f \u5199\u65f6\u62f7\u8d1d (copy- on-write) \uff0c\u4e0b\u56fe \u4e0d\u5b8c\u5168\u51c6\u786e\uff0c\u4f46\u53ef\u5e2e\u52a9\u7406\u89e3 \u7236\u5b50\u8fdb\u7a0b\u5173\u7cfb \u533a\u522b fork()\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u540c \u3002\u7236\u8fdb\u7a0b\u4e2d: >0 \u8fd4\u56de\u7684\u662f\u5b50\u8fdb\u7a0b\u7684ID\uff0c\u5b50\u8fdb\u7a0b\u4e2d: =0 pcb\u4e2d\u7684\u4e00\u4e9b\u6570\u636e\u4e0d\u540c \u3002pcb\u4e2d\u5b58\u7684\u662f \u5f53\u524d\u8fdb\u7a0b\u7684ID(pid) \uff0c \u5f53\u524d\u8fdb\u7a0b\u7684\u7236ID(ppid) \u548c \u4fe1\u53f7\u96c6 \u5171\u540c\u70b9 \u5728\u67d0\u4e9b\u72b6\u6001\u4e0b\uff0c\u5373 \u5b50\u8fdb\u7a0b\u521a\u88ab\u521b\u5efa\u51fa\u6765\uff0c\u8fd8\u6ca1\u6709\u6267\u884c\u4efb\u4f55\u7684\u5199\u6570\u636e\u7684\u64cd\u4f5c \u3002\u6b64\u65f6 \u7528\u6237\u533a\u7684\u6570\u636e \u548c \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868 \u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u4e00\u6837 \u7236\u5b50\u8fdb\u7a0b\u5bf9\u53d8\u91cf\u5171\u4eab\u8bf4\u660e \u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u662f\u4e00\u6837\u7684\uff0c\u5171\u4eab\u7684\u3002\u5982\u679c\u4fee\u6539\u4e86\u6570\u636e\uff0c\u4e0d\u5171\u4eab\u4e86 \u8bfb\u65f6\u5171\u4eab\uff08\u5b50\u8fdb\u7a0b\u88ab\u521b\u5efa\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u5199\u7684\u64cd\u4f5c\uff09\uff0c\u5199\u65f6\u62f7\u8d1d GDB \u591a\u8fdb\u7a0b\u8c03\u8bd5 \u5728\u4ee5\u4e0b\u8c03\u8bd5\u7a0b\u5e8f \u7b2c10\u884c \u53ca \u7b2c20\u884c \u6253\u65ad\u70b9\uff0c\u540e\u7eed\u8bf4\u660e\u90fd\u57fa\u4e8e\u8fd9\u4e24\u4e2a\u65ad\u70b9 \u6253\u65ad\u70b9\u53ca\u67e5\u770b \u4f7f\u7528 GDB \u8c03\u8bd5\u7684\u65f6\u5019\uff0cGDB \u9ed8\u8ba4\u53ea\u80fd\u8ddf\u8e2a\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u5728 fork \u51fd\u6570\u8c03\u7528\u4e4b\u524d\uff0c\u901a\u8fc7\u6307\u4ee4\u8bbe\u7f6e GDB \u8c03\u8bd5\u5de5\u5177\u8ddf\u8e2a\u7236\u8fdb\u7a0b\u6216\u8005\u662f\u8ddf\u8e2a\u5b50\u8fdb\u7a0b\uff0c \u9ed8\u8ba4\u8ddf\u8e2a\u7236\u8fdb\u7a0b \u67e5\u770b\u5f53\u524d\u8ddf\u8e2a\u7684\u8fdb\u7a0b\uff1a show follow-fork-mode \u8bbe\u7f6e\u8c03\u8bd5\u7236\u8fdb\u7a0b\u6216\u8005\u5b50\u8fdb\u7a0b\uff1a set follow-fork-mode [parent\uff08\u9ed8\u8ba4\uff09| child] \u8c03\u8bd5\u7236\u8fdb\u7a0b\uff0c\u5b50\u8fdb\u7a0b\u5faa\u73af\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u5b8c\u6bd5\u540e\u9700\u8981\u8f93\u5165 n \u7ee7\u7eed\u6267\u884c\u7236\u8fdb\u7a0b \u8c03\u8bd5\u5b50\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u5faa\u73af\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u5b8c\u6bd5\u540e\u9700\u8981\u8f93\u5165 n \u7ee7\u7eed\u6267\u884c\u5b50\u8fdb\u7a0b \u67e5\u770b\u8c03\u8bd5\u6a21\u5f0f\uff1a show detach-on-fork \u8bbe\u7f6e\u8c03\u8bd5\u6a21\u5f0f\uff1a set detach-on-fork [on | off] \u9ed8\u8ba4\u4e3a on\uff0c\u8868\u793a\u8c03\u8bd5\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5176\u5b83\u7684\u8fdb\u7a0b\u7ee7\u7eed\u8fd0\u884c\uff0c\u5982\u679c\u4e3a off\uff0c\u8c03\u8bd5\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5176\u5b83\u8fdb\u7a0b\u88ab GDB \u6302\u8d77 \u6ce8\uff1a\u5728\u8bbe\u7f6e\u4e3a off \u65f6\uff0c\u6267\u884c\u7a0b\u5e8f\u4f1a\u62a5\u4ee5\u4e0b\u9519\u8bef\uff0c\u539f\u56e0\u662f gdb 8.x\u7248\u672c\u5b58\u5728bug \u4ee5\u4e0b\u6b63\u5e38\u6267\u884c\u7684 gdb \u7248\u672c\u4e3a v7.11.1 \uff08\u622a\u56fe\u6765\u6e90\u4e8e\u89c6\u9891\uff09\uff0c\u4e0e\u8bbe\u7f6e\u4e3a on \u7684\u533a\u522b\u5728\u4e8e\uff0c for \u5faa\u73af\u662f\u5426\u6253\u5370 \u67e5\u770b\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff1a info inferiors \uff0c\u6b64\u65f6\u8c03\u8bd5\u8fdb\u7a0b\u4e3a parent \uff0c\u9700\u8981\u6267\u884c\u540e\u624d\u4f1a\u663e\u793a\u8fdb\u7a0b \u5f53 detach-on-fork \u4e3a on \u65f6\uff0c\u53ea\u4f1a\u663e\u793a\u4e00\u4e2a\u8fdb\u7a0b\uff08==\u56e0\u4e3a\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u5df2\u7ecf\u6267\u884c\u5b8c\u6bd5\uff0c\u9500\u6bc1==\uff0c\u731c\u6d4b\uff09 \u5f53 detach-on-fork \u4e3a off \u65f6\uff0c\u4f1a\u663e\u793a\u4e24\u4e2a\u8fdb\u7a0b \u5207\u6362\u5f53\u524d\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff1a inferior Num \u4f7f\u8fdb\u7a0b\u8131\u79bb GDB \u8c03\u8bd5\uff1a detach inferiors Num exec\u51fd\u6570\u65cf \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/04 exec\u51fd\u6570\u65cf \u57fa\u672c\u6982\u5ff5 \u53ef\u901a\u8fc7 man 3 exec \u67e5\u770b\u5e2e\u52a9 exec \u51fd\u6570\u65cf \u7684\u4f5c\u7528\u662f\u6839\u636e\u6307\u5b9a\u7684\u6587\u4ef6\u540d\u627e\u5230\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u7528\u5b83\u6765\u53d6\u4ee3\u8c03\u7528\u8fdb\u7a0b\u7684\u5185\u5bb9\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f \u5728\u8c03\u7528\u8fdb\u7a0b\u5185\u90e8\u6267\u884c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 exec \u51fd\u6570\u65cf\u7684\u51fd\u6570\u6267\u884c\u6210\u529f\u540e\u4e0d\u4f1a\u8fd4\u56de\uff0c\u56e0\u4e3a\u8c03\u7528\u8fdb\u7a0b\u7684\u5b9e\u4f53\uff0c\u5305\u62ec\u4ee3\u7801\u6bb5\uff0c\u6570\u636e\u6bb5\u548c\u5806\u6808\u7b49\u90fd\u5df2\u7ecf\u88ab\u65b0\u7684\u5185\u5bb9\u53d6\u4ee3\uff0c\u53ea\u7559\u4e0b\u8fdb\u7a0b ID \u7b49\u4e00\u4e9b\u8868\u9762\u4e0a\u7684\u4fe1\u606f\u4ecd\u4fdd\u6301\u539f\u6837\uff0c\u9887\u6709\u4e9b\u795e\u4f3c\u201c\u4e09\u5341\u516d\u8ba1\u201d\u4e2d\u7684\u201c\u91d1\u8749\u8131\u58f3\u201d\u3002\u770b\u4e0a\u53bb\u8fd8\u662f\u65e7\u7684\u8eaf\u58f3\uff0c\u5374\u5df2\u7ecf\u6ce8\u5165\u4e86\u65b0\u7684\u7075\u9b42\u3002\u53ea\u6709\u8c03\u7528\u5931\u8d25\u4e86\uff0c\u5b83\u4eec\u624d\u4f1a\u8fd4\u56de -1\uff0c\u4ece\u539f\u7a0b\u5e8f\u7684\u8c03\u7528\u70b9\u63a5\u7740\u5f80\u4e0b\u6267\u884c \u7528\u6237\u533a\u66ff\u6362\u4e3a a.out \u7684\u5185\u5bb9\uff0c\u5185\u6838\u533a\u4e0d\u53d8 \u79cd\u7c7b \u57fa\u672c\u7ec4\u4ef6\u4e3a exec \uff0c\u540e\u9762\u8ddf\u4e0d\u540c\u53c2\u6570\uff0c\u4ee3\u8868\u4e0d\u540c\u542b\u4e49 l(list) \uff1a\u53c2\u6570\u5730\u5740\u5217\u8868\uff0c\u4ee5 \u7a7a\u6307\u9488\u7ed3\u5c3e v(vector) \uff1a\u5b58\u6709\u5404\u53c2\u6570\u5730\u5740\u7684\u6307\u9488\u6570\u7ec4\u7684\u5730\u5740 p(path) \uff1a\u6309 PATH \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u7684\u76ee\u5f55\u641c\u7d22\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u7528 env \u67e5\u770b\u73b0\u6709\u7684\u73af\u5883\u53d8\u91cf e(environment) \uff1a\u5b58\u6709\u73af\u5883\u53d8\u91cf\u5b57\u7b26\u4e32\u5730\u5740\u7684\u6307\u9488\u6570\u7ec4\u7684\u5730\u5740\uff0c\u589e\u52a0\u65b0\u7684\u73af\u5883\u53d8\u91cf \u8bf4\u660e\uff1a\u4e0b\u5217\u793a\u4f8b\u7a0b\u5e8f\u9664\u6838\u5fc3\u4ee3\u7801\u5916\uff0c\u4fdd\u6301\u4e00\u81f4\uff0c\u521d\u59cb\u5305\u542b\u6587\u4ef6\u6709 int execl(const char *path, const char *arg, .../* (char *) NULL */); path \uff1a\u9700\u8981\u6307\u5b9a\u7684\u6267\u884c\u7684\u6587\u4ef6\u7684\u8def\u5f84\u6216\u8005\u540d\u79f0 arg \uff1a\u662f\u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6\u6240\u9700\u8981\u7684\u53c2\u6570\u5217\u8868\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e00\u822c\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e00\u822c\u5199\u7684\u662f\u6267\u884c\u7684\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5f00\u59cb\u5f80\u540e\uff0c\u5c31\u662f\u7a0b\u5e8f\u6267\u884c\u6240\u9700\u8981\u7684\u7684\u53c2\u6570\u5217\u8868\uff0c\u53c2\u6570\u6700\u540e\u9700\u8981\u4ee5NULL\u7ed3\u675f\uff08\u54e8\u5175\uff09 code ```c include include int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); // \u5982\u679c\u4e0d\u52a0\u8fd9\u53e5\uff0c\u4f1a\u5b58\u5728\u5b64\u513f\u8fdb\u7a0b\uff0c\u8f93\u51fa\u5f02\u5e38 sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b // \u8c03\u7528\u81ea\u5df1\u5199\u7684\u53ef\u6267\u884c\u7a0b\u5e8f execl(\"/home/u/Desktop/Linux/hello\",\"hello\",NULL); // \u8c03\u7528\u7cfb\u7edf\u8fdb\u7a0b // execl(\"/bin/ps\", \"ps\", \"aux\", NULL); perror(\"execl\"); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output \u8bf4\u660e\uff1a\u53ef\u4ee5\u770b\u5230\uff0c\u5b50\u8fdb\u7a0b\u7684\u5185\u5bb9\uff08\u7528\u6237\u533a\uff09\u88ab\u66ff\u6362\uff0c\u6253\u5370\u7684\u662f hello \u4e2d\u7684\u5185\u5bb9 int execlp(const char *file, const char *arg, ... /* (char *) NULL */); \u4f1a\u5230\u73af\u5883\u53d8\u91cf\u4e2d\u67e5\u627e\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u6267\u884c\uff0c\u627e\u4e0d\u5230\u5c31\u6267\u884c\u4e0d\u6210\u529f file \uff1a\u53ea\u9700\u8981\u63d0\u4f9b\u540d\u79f0\uff08\u4e0d\u9700\u8981\u63d0\u4f9b\u8def\u5f84\uff09 code ```c include include int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b execlp(\"ps\", \"ps\", \"aux\", NULL); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */); envp \uff1a\u6dfb\u52a0\u8def\u5f84\u81f3\u73af\u5883\u53d8\u91cf\uff0c\u6ce8\u610f\u4ee5 NULL \u7ed3\u5c3e\uff0c\u5426\u5219\u62a5 execle: Bad address code ```c include include int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b // \u9700\u8981\u5df2NULL\u7ed3\u5c3e\uff0c\u5426\u5219\u62a5 execle: Bad address \u9519\u8bef char* envp[] = {\"/home/u/Desktop/Linux/\", NULL}; execle(\"/home/u/Desktop/Linux/hello\", \"hello\", NULL, envp); perror(\"execle\"); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output int execv(const char *path, char *const argv[]); argv \uff1a\u5c06\u8fd0\u884c\u53c2\u6570\u90fd\u5199\u5728\u6570\u7ec4\u4e2d code ```c include include int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b char* argv[] = {\"hello\", NULL}; execv(\"/home/u/Desktop/Linux/hello\", argv); perror(\"execv\"); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output int execvp(const char *file, char *const argv[]); int execvpe(const char *file, char *const argv[], char *const envp[]); int execve(const char *filename, char *const argv[], char *const envp[]); \u8fdb\u7a0b\u63a7\u5236 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/05 \u8fdb\u7a0b\u63a7\u5236 \u8fdb\u7a0b\u9000\u51fa \u6807\u51c6C\u5e93\uff1a exit() Linux\u7cfb\u7edf\uff1a _exit() \u533a\u522b \u7a0b\u5e8f\u8bf4\u660e exit() _exit() \u539f\u56e0\uff1a\u8c03\u7528 _exit \u65f6\u6ca1\u6709\u5237\u65b0\u7f13\u51b2\u533a\uff0c\u6240\u4ee5 world \u8fd8\u7559\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u6ca1\u6709\u88ab\u8f93\u51fa\uff0c \\n \u4f1a\u5237\u65b0\u7f13\u51b2\u533a \u5b64\u513f\u8fdb\u7a0b \u7236\u8fdb\u7a0b\u8fd0\u884c\u7ed3\u675f\uff0c\u4f46\u5b50\u8fdb\u7a0b\u8fd8\u5728\u8fd0\u884c\uff08\u672a\u8fd0\u884c\u7ed3\u675f\uff09\uff0c\u8fd9\u6837\u7684\u5b50\u8fdb\u7a0b\u5c31\u79f0\u4e3a \u5b64\u513f\u8fdb\u7a0b\uff08Orphan Process\uff09 \u6bcf\u5f53\u51fa\u73b0\u4e00\u4e2a\u5b64\u513f\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5185\u6838\u5c31\u628a\u5b64\u513f\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a init \uff0c\u800c init \u8fdb\u7a0b\u4f1a\u5faa\u73af\u5730 wait() \u5b83\u7684\u5df2\u7ecf\u9000\u51fa\u7684\u5b50\u8fdb\u7a0b\u3002 \u5b64\u513f\u8fdb\u7a0b\u5e76\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5371\u5bb3 #include <sys/types.h> #include <unistd.h> #include <stdio.h> int main() { // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); // \u5224\u65ad\u662f\u7236\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b if(pid > 0) { printf(\"i am parent process, pid : %d, ppid : %d\\n\", getpid(), getppid()); } else if(pid == 0) { sleep(1); // \u5f53\u524d\u662f\u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d, ppid : %d\\n\", getpid(),getppid()); } // for\u5faa\u73af for(int i = 0; i < 3; i++) { printf(\"i : %d , pid : %d\\n\", i , getpid()); } return 0; } \u50f5\u5c38\u8fdb\u7a0b \u6bcf\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c\u90fd\u4f1a\u91ca\u653e\u81ea\u5df1\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u7528\u6237\u533a\u6570\u636e\uff0c\u5185\u6838\u533a\u7684 PCB \u6ca1\u6709\u529e\u6cd5\u81ea\u5df1\u91ca\u653e\u6389\uff0c\u9700\u8981\u7236\u8fdb\u7a0b\u53bb\u91ca\u653e \u8fdb\u7a0b\u7ec8\u6b62\u65f6\uff0c\u7236\u8fdb\u7a0b\u5c1a\u672a\u56de\u6536\uff0c\u5b50\u8fdb\u7a0b\u6b8b\u7559\u8d44\u6e90\uff08PCB\uff09\u5b58\u653e\u4e8e\u5185\u6838\u4e2d\uff0c\u53d8\u6210 \u50f5\u5c38\uff08Zombie\uff09\u8fdb\u7a0b \u50f5\u5c38\u8fdb\u7a0b\u4e0d\u80fd\u88ab kill -9 \u6740\u6b7b \uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u4e0d\u8c03\u7528 wait() \u6216 waitpid() \u7684\u8bdd\uff0c\u90a3\u4e48\u4fdd\u7559\u7684\u90a3\u6bb5\u4fe1\u606f\u5c31\u4e0d\u4f1a\u91ca\u653e\uff0c\u5176\u8fdb\u7a0b\u53f7\u5c31\u4f1a\u4e00\u76f4\u88ab\u5360\u7528\uff0c\u4f46\u662f\u7cfb\u7edf\u6240\u80fd\u4f7f\u7528\u7684\u8fdb\u7a0b\u53f7\u662f\u6709\u9650\u7684\uff0c\u5982\u679c\u5927\u91cf\u7684\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b\uff0c\u5c06\u56e0\u4e3a\u6ca1\u6709\u53ef\u7528\u7684\u8fdb\u7a0b\u53f7\u800c\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u80fd\u4ea7\u751f\u65b0\u7684\u8fdb\u7a0b\uff0c\u6b64\u5373\u4e3a\u50f5\u5c38\u8fdb\u7a0b\u7684\u5371\u5bb3\uff0c\u5e94\u5f53\u907f\u514d \u793a\u4f8b code ```c include include include int main() { // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); // \u5224\u65ad\u662f\u7236\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b if(pid > 0) { while(1) { printf(\"i am parent process, pid : %d, ppid : %d\\n\", getpid(), getppid()); sleep(1); } } else if(pid == 0) { // \u5f53\u524d\u662f\u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d, ppid : %d\\n\", getpid(),getppid()); } // for\u5faa\u73af for(int i = 0; i < 3; i++) { printf(\"i : %d , pid : %d\\n\", i , getpid()); } return 0; } ``` \u50f5\u5c38\u8fdb\u7a0bID\uff1a45161\uff0c\u53ef\u4ee5\u901a\u8fc7\u6740\u6b7b\u7236\u8fdb\u7a0b45160\uff0c\u4ece\u800c\u4f7f\u50f5\u5c38\u8fdb\u7a0b\u53d8\u4e3a\u5b64\u513f\u8fdb\u7a0b\uff0c\u8ba9init\u9886\u517b\u8fdb\u884c\u91ca\u653e \u91ca\u653e\u540e \u8fdb\u7a0b\u56de\u6536 \u57fa\u672c\u6982\u5ff5 \u5728\u6bcf\u4e2a\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c\u5185\u6838\u91ca\u653e\u8be5\u8fdb\u7a0b\u6240\u6709\u7684\u8d44\u6e90\u3001\u5305\u62ec\u6253\u5f00\u7684\u6587\u4ef6\u3001\u5360\u7528\u7684\u5185\u5b58\u7b49\u3002\u4f46\u662f\u4ecd\u7136\u4e3a\u5176\u4fdd\u7559\u4e00\u5b9a\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4e3b\u8981\u4e3b\u8981\u6307\u8fdb\u7a0b\u63a7\u5236\u5757PCB\u7684\u4fe1\u606f\uff08\u5305\u62ec\u8fdb\u7a0b\u53f7\u3001\u9000\u51fa\u72b6\u6001\u3001\u8fd0\u884c\u65f6\u95f4\u7b49\uff09 \u7236\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 wait \u6216 waitpid \u5f97\u5230\u5b83\u7684\u9000\u51fa\u72b6\u6001\u540c\u65f6\u5f7b\u5e95\u6e05\u9664\u6389\u8fd9\u4e2a\u8fdb\u7a0b\uff0c\u67e5\u770b\u5e2e\u52a9\uff1a man 2 wait wait() \u548c waitpid() \u51fd\u6570\u7684\u529f\u80fd\u4e00\u6837\uff0c\u533a\u522b\u5728\u4e8e wait() \u51fd\u6570\u4f1a\u963b\u585e waitpid() \u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u963b\u585e\uff0c waitpid() \u8fd8\u53ef\u4ee5\u6307\u5b9a\u7b49\u5f85\u54ea\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f \u6ce8\u610f\uff1a \u4e00\u6b21 wait \u6216 waitpid \u8c03\u7528\u53ea\u80fd\u6e05\u7406\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u6e05\u7406\u591a\u4e2a\u5b50\u8fdb\u7a0b\u5e94\u4f7f\u7528\u5faa\u73af \u9000\u51fa\u4fe1\u606f\u76f8\u5173\u5b8f\u51fd\u6570 WIFEXITED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u6b63\u5e38\u9000\u51fa WEXITSTATUS(status) \uff1a\u5982\u679c\u4e0a\u5b8f\u4e3a\u771f\uff0c\u83b7\u53d6\u8fdb\u7a0b\u9000\u51fa\u7684\u72b6\u6001\uff08exit\u7684\u53c2\u6570\uff09 WIFSIGNALED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u5f02\u5e38\u7ec8\u6b62 WTERMSIG(status) \uff1a\u5982\u679c\u4e0a\u5b8f\u4e3a\u771f\uff0c\u83b7\u53d6\u4f7f\u8fdb\u7a0b\u7ec8\u6b62\u7684\u4fe1\u53f7\u7f16\u53f7 WIFSTOPPED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u5904\u4e8e\u6682\u505c\u72b6\u6001 WSTOPSIG(status) \uff1a\u5982\u679c\u4e0a\u5b8f\u4e3a\u771f\uff0c\u83b7\u53d6\u4f7f\u8fdb\u7a0b\u6682\u505c\u7684\u4fe1\u53f7\u7684\u7f16\u53f7 WIFCONTINUED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u6682\u505c\u540e\u5df2\u7ecf\u7ee7\u7eed\u8fd0\u884c wait() \u53ef\u901a\u8fc7 man 2 wait \u67e5\u770b\u5e2e\u52a9 pid_t wait(int *wstatus); \u529f\u80fd\uff1a\u7b49\u5f85\u4efb\u610f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff0c\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f\u4e86\uff0c\u6b64\u51fd\u6570\u4f1a\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90 \u53c2\u6570 int *wstatus \uff1a\u8fdb\u7a0b\u9000\u51fa\u65f6\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4f20\u5165\u7684\u662f\u4e00\u4e2aint\u7c7b\u578b\u7684\u5730\u5740\uff0c\u4f20\u51fa\u53c2\u6570\u3002 \u8fd4\u56de\u503c \u6210\u529f\uff1a\u8fd4\u56de\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b\u7684id \u5931\u8d25\uff1a-1 (\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u90fd\u7ed3\u675f\uff0c\u8c03\u7528\u51fd\u6570\u5931\u8d25) \u5176\u4ed6\u8bf4\u660e \u8c03\u7528wait\u51fd\u6570\u7684\u8fdb\u7a0b\u4f1a\u88ab\u6302\u8d77\uff08\u963b\u585e\uff09\uff0c\u76f4\u5230\u5b83\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u9000\u51fa\u6216\u8005\u6536\u5230\u4e00\u4e2a\u4e0d\u80fd\u88ab\u5ffd\u7565\u7684\u4fe1\u53f7\u65f6\u624d\u88ab\u5524\u9192\uff08\u76f8\u5f53\u4e8e\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff09 \u5982\u679c\u6ca1\u6709\u5b50\u8fdb\u7a0b\u4e86\uff0c\u51fd\u6570\u7acb\u523b\u8fd4\u56de\uff0c\u8fd4\u56de-1\uff1b\u5982\u679c\u5b50\u8fdb\u7a0b\u90fd\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u4e5f\u4f1a\u7acb\u5373\u8fd4\u56de\uff0c\u8fd4\u56de-1 #include <sys/types.h> #include <sys/wait.h> #include <stdio.h> #include <unistd.h> #include <stdlib.h> int main() { // \u6709\u4e00\u4e2a\u7236\u8fdb\u7a0b\uff0c\u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b\uff08\u5144\u5f1f\uff09 pid_t pid; // \u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b for(int i = 0; i < 5; i++) { pid = fork(); // \u907f\u514d\u5d4c\u5957\u91cd\u590d\u751f\u6210\u5b50\u8fdb\u7a0b if(pid == 0) { break; } } if(pid > 0) { // \u7236\u8fdb\u7a0b while(1) { printf(\"parent, pid = %d\\n\", getpid()); // int ret = wait(NULL); int st; int ret = wait(&st); if(ret == -1) { break; } if(WIFEXITED(st)) { // \u662f\u4e0d\u662f\u6b63\u5e38\u9000\u51fa printf(\"\u9000\u51fa\u7684\u72b6\u6001\u7801\uff1a%d\\n\", WEXITSTATUS(st)); } if(WIFSIGNALED(st)) { // \u662f\u4e0d\u662f\u5f02\u5e38\u7ec8\u6b62 printf(\"\u88ab\u54ea\u4e2a\u4fe1\u53f7\u5e72\u6389\u4e86\uff1a%d\\n\", WTERMSIG(st)); } printf(\"child die, pid = %d\\n\", ret); sleep(1); } } else if (pid == 0){ // \u5b50\u8fdb\u7a0b while(1) { printf(\"child, pid = %d\\n\",getpid()); sleep(1); } exit(0); } return 0; // exit(0) } \u7a0b\u5e8f\u5f00\u59cb\u6267\u884c \u901a\u8fc7\u547d\u4ee4\u6740\u6b7b\u5b50\u8fdb\u7a0b\uff1a kill -9 47548 waitpid() \u53ef\u901a\u8fc7 man 2 wait \u67e5\u770b\u5e2e\u52a9 pid_t waitpid(pid_t pid, int *wstatus, int options); \u529f\u80fd\uff1a\u56de\u6536\u6307\u5b9a\u8fdb\u7a0b\u53f7\u7684\u5b50\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u963b\u585e \u53c2\u6570 pid pid > 0 : \u56de\u6536\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u7684pid pid = 0 : \u56de\u6536\u5f53\u524d\u8fdb\u7a0b\u7ec4\u7684\u6240\u6709\u5b50\u8fdb\u7a0b pid = -1 : \u56de\u6536\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\uff0c\u76f8\u5f53\u4e8e wait() \uff08\u6700\u5e38\u7528\uff09 pid < -1 : \u67d0\u4e2a\u8fdb\u7a0b\u7ec4\u7684\u7ec4id\u7684\u7edd\u5bf9\u503c\uff0c\u56de\u6536\u6307\u5b9a\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u5b50\u8fdb\u7a0b options\uff1a\u8bbe\u7f6e\u963b\u585e\u6216\u8005\u975e\u963b\u585e 0 : \u963b\u585e WNOHANG : \u975e\u963b\u585e \u8fd4\u56de\u503c > 0 : \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684id 0 : options=WNOHANG, \u8868\u793a\u8fd8\u6709\u5b50\u8fdb\u7a0b\u6d3b\u7740 -1 \uff1a\u9519\u8bef\uff0c\u6216\u8005\u6ca1\u6709\u5b50\u8fdb\u7a0b\u4e86 #include <sys/types.h> #include <sys/wait.h> #include <stdio.h> #include <unistd.h> #include <stdlib.h> int main() { // \u6709\u4e00\u4e2a\u7236\u8fdb\u7a0b\uff0c\u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b\uff08\u5144\u5f1f\uff09 pid_t pid; // \u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b for(int i = 0; i < 5; i++) { pid = fork(); if(pid == 0) { break; } } if(pid > 0) { // \u7236\u8fdb\u7a0b while(1) { printf(\"parent, pid = %d\\n\", getpid()); sleep(1); int st; // int ret = waitpid(-1, &st, 0); int ret = waitpid(-1, &st, WNOHANG); if(ret == -1) { break; } else if(ret == 0) { // \u8bf4\u660e\u8fd8\u6709\u5b50\u8fdb\u7a0b\u5b58\u5728 continue; } else if(ret > 0) { if(WIFEXITED(st)) { // \u662f\u4e0d\u662f\u6b63\u5e38\u9000\u51fa printf(\"\u9000\u51fa\u7684\u72b6\u6001\u7801\uff1a%d\\n\", WEXITSTATUS(st)); } if(WIFSIGNALED(st)) { // \u662f\u4e0d\u662f\u5f02\u5e38\u7ec8\u6b62 printf(\"\u88ab\u54ea\u4e2a\u4fe1\u53f7\u5e72\u6389\u4e86\uff1a%d\\n\", WTERMSIG(st)); } printf(\"child die, pid = %d\\n\", ret); } } } else if (pid == 0){ // \u5b50\u8fdb\u7a0b while(1) { printf(\"child, pid = %d\\n\",getpid()); sleep(1); } exit(0); } return 0; } \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u7ba1\u9053\u53ca\u5185\u5b58\u6620\u5c04 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/06 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u7ba1\u9053\u53ca\u5185\u5b58\u6620\u5c04 \u8fdb\u7a0b\u95f4\u901a\u8baf\u6982\u5ff5 \u8fdb\u7a0b\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8d44\u6e90\u5206\u914d\u5355\u5143\uff0c\u4e0d\u540c\u8fdb\u7a0b\uff08\u8fd9\u91cc\u6240\u8bf4\u7684\u8fdb\u7a0b\u901a\u5e38\u6307\u7684\u662f\u7528\u6237\u8fdb\u7a0b\uff09\u4e4b\u95f4\u7684\u8d44\u6e90\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u5173\u8054\uff0c\u4e0d\u80fd\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u76f4\u63a5\u8bbf\u95ee\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90 \u4f46\u662f\uff0c\u8fdb\u7a0b\u4e0d\u662f\u5b64\u7acb\u7684\uff0c\u4e0d\u540c\u7684\u8fdb\u7a0b\u9700\u8981\u8fdb\u884c\u4fe1\u606f\u7684\u4ea4\u4e92\u548c\u72b6\u6001\u7684\u4f20\u9012\u7b49\uff0c\u56e0\u6b64\u9700\u8981 \u8fdb\u7a0b\u95f4\u901a\u4fe1( IPC\uff1aInter Processes Communication) \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u76ee\u7684 \u6570\u636e\u4f20\u8f93\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u5c06\u5b83\u7684\u6570\u636e\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b \u901a\u77e5\u4e8b\u4ef6\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u5411\u53e6\u4e00\u4e2a\u6216\u4e00\u7ec4\u8fdb\u7a0b\u53d1\u9001\u6d88\u606f\uff0c\u901a\u77e5\u5b83\uff08\u5b83\u4eec\uff09\u53d1\u751f\u4e86\u67d0\u79cd\u4e8b\u4ef6\uff08\u5982\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u8981\u901a\u77e5\u7236\u8fdb\u7a0b\uff09 \u8d44\u6e90\u5171\u4eab\uff1a\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u540c\u6837\u7684\u8d44\u6e90\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u9700\u8981\u5185\u6838\u63d0\u4f9b\u4e92\u65a5\u548c\u540c\u6b65\u673a\u5236 \u8fdb\u7a0b\u63a7\u5236\uff1a\u6709\u4e9b\u8fdb\u7a0b\u5e0c\u671b\u5b8c\u5168\u63a7\u5236\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6267\u884c\uff08\u5982 Debug \u8fdb\u7a0b\uff09\uff0c\u6b64\u65f6\u63a7\u5236\u8fdb\u7a0b\u5e0c\u671b\u80fd\u591f\u62e6\u622a\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6240\u6709\u9677\u5165\u548c\u5f02\u5e38\uff0c\u5e76\u80fd\u591f\u53ca\u65f6\u77e5\u9053\u5b83\u7684\u72b6\u6001\u6539\u53d8 Linux \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f \u7ba1\u9053 \u7ba1\u9053\u7279\u70b9 \u7ba1\u9053\u5176\u5b9e\u662f\u4e00\u4e2a\u5728 \u5185\u6838\u5185\u5b58\u4e2d\u7ef4\u62a4\u7684\u7f13\u51b2\u5668 \uff0c\u8fd9\u4e2a\u7f13\u51b2\u5668\u7684\u5b58\u50a8\u80fd\u529b\u662f\u6709\u9650\u7684\uff0c\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u5927\u5c0f\u4e0d\u4e00\u5b9a\u76f8\u540c \u7ba1\u9053\u62e5\u6709\u6587\u4ef6\u7684\u7279\u8d28\uff1a\u8bfb\u64cd\u4f5c\u3001\u5199\u64cd\u4f5c \u533f\u540d\u7ba1\u9053 \u6ca1\u6709\u6587\u4ef6\u5b9e\u4f53 \u6709\u540d\u7ba1\u9053 \u6709\u6587\u4ef6\u5b9e\u4f53\uff0c\u4f46\u4e0d\u5b58\u50a8\u6570\u636e\u3002\u53ef\u4ee5\u6309\u7167\u64cd\u4f5c\u6587\u4ef6\u7684\u65b9\u5f0f\u5bf9\u7ba1\u9053\u8fdb\u884c\u64cd\u4f5c \u4e00\u4e2a\u7ba1\u9053\u662f\u4e00\u4e2a\u5b57\u8282\u6d41 \uff0c\u4f7f\u7528\u7ba1\u9053\u65f6\u4e0d\u5b58\u5728\u6d88\u606f\u6216\u8005\u6d88\u606f\u8fb9\u754c\u7684\u6982\u5ff5\uff0c\u4ece\u7ba1\u9053\u8bfb\u53d6\u6570\u636e\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\u5757\uff0c\u800c\u4e0d\u7ba1\u5199\u5165\u8fdb\u7a0b\u5199\u5165\u7ba1\u9053\u7684\u6570\u636e\u5757\u7684\u5927\u5c0f\u662f\u591a\u5c11 \u901a\u8fc7\u7ba1\u9053\u4f20\u9012\u7684\u6570\u636e\u662f\u987a\u5e8f\u7684\uff0c\u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u51fa\u6765\u7684\u5b57\u8282\u7684\u987a\u5e8f\u548c\u5b83\u4eec\u88ab\u5199\u5165\u7ba1\u9053\u7684\u987a\u5e8f\u662f\u5b8c\u5168\u4e00\u6837\u7684 \u5728\u7ba1\u9053\u4e2d\u7684\u6570\u636e\u7684\u4f20\u9012\u65b9\u5411\u662f\u5355\u5411\u7684\uff0c\u4e00\u7aef\u7528\u4e8e\u5199\u5165\uff0c\u4e00\u7aef\u7528\u4e8e\u8bfb\u53d6\uff0c\u7ba1\u9053\u662f \u534a\u53cc\u5de5 \u7684 \u4ece\u7ba1\u9053\u8bfb\u6570\u636e\u662f\u4e00\u6b21\u6027\u64cd\u4f5c\uff0c\u6570\u636e\u4e00\u65e6\u88ab\u8bfb\u8d70\uff0c\u5b83\u5c31\u4ece\u7ba1\u9053\u4e2d\u88ab\u629b\u5f03\uff0c\u91ca\u653e\u7a7a\u95f4\u4ee5\u4fbf\u5199\u66f4\u591a\u7684\u6570\u636e\uff0c \u5728\u7ba1\u9053\u4e2d\u65e0\u6cd5\u4f7f\u7528 lseek() \u6765\u968f\u673a\u7684\u8bbf\u95ee\u6570\u636e \u533f\u540d\u7ba1\u9053 \u53ea\u80fd\u5728 \u5177\u6709\u516c\u5171\u7956\u5148\u7684\u8fdb\u7a0b\uff08\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0b\uff0c\u6216\u8005\u4e24\u4e2a\u5144\u5f1f\u8fdb\u7a0b\uff0c\u5177\u6709\u4eb2\u7f18\u5173\u7cfb\uff09\u4e4b\u95f4\u4f7f\u7528 \u7ba1\u9053\u5b9e\u73b0\u8fdb\u7a0b\u901a\u4fe1\u7684\u539f\u7406 \u7ba1\u9053\u76f8\u5f53\u4e8e \u4e00\u4e2a\u4e2d\u95f4\u5a92\u4ecb\uff0c\u5171\u4eab\u6570\u636e \u7ba1\u9053\u7684\u6570\u636e\u7ed3\u6784 \u533f\u540d\u7ba1\u9053 \u6982\u5ff5\u53ca\u4f7f\u7528 \u7ba1\u9053 \u4e5f\u53eb \u65e0\u540d\uff08\u533f\u540d\uff09\u7ba1\u9053 \uff0c\u5b83\u662f\u662f UNIX \u7cfb\u7edf IPC\uff08\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09\u7684\u6700\u53e4\u8001\u5f62\u5f0f\uff0c\u6240\u6709\u7684 UNIX \u7cfb\u7edf\u90fd\u652f\u6301\u8fd9\u79cd\u901a\u4fe1\u673a\u5236 \u7edf\u8ba1\u4e00\u4e2a\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u6570\u76ee\u547d\u4ee4\uff1a ls | wc \u2013l \uff0c\u4e3a\u4e86\u6267\u884c\u8be5\u547d\u4ee4\uff0cshell \u521b\u5efa\u4e86\u4e24\u4e2a\u8fdb\u7a0b\u6765\u5206\u522b\u6267\u884c ls \u548c wc \u67e5\u770b\u5e2e\u52a9\uff1a man 2 pipe \u521b\u5efa\u533f\u540d\u7ba1\u9053\uff1a int pipe(int pipefd[2]); \u67e5\u770b\u7ba1\u9053\u7f13\u51b2\u5927\u5c0f\u547d\u4ee4\uff1a ulimit \u2013a \uff08\u51718\u4e2a\uff0c\u6bcf\u4e2a521byte\uff0c\u53734k\uff09 \u67e5\u770b\u7ba1\u9053\u7f13\u51b2\u5927\u5c0f\u51fd\u6570\uff1a long fpathconf(int fd, int name); \u521b\u5efa\u533f\u540d\u7ba1\u9053 int pipe(int pipefd[2]) \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u7ba1\u9053\uff0c\u7528\u6765\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 \u53c2\u6570\uff1a int pipefd[2] \u8fd9\u4e2a\u6570\u7ec4\u662f\u4e00\u4e2a\u4f20\u51fa\u53c2\u6570\u3002 pipefd[0] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u8bfb\u7aef pipefd[1] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u5199\u7aef \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c\u5931\u8d25 -1 \u6ce8\u610f \u7ba1\u9053\u9ed8\u8ba4\u662f\u963b\u585e\u7684\uff1a\u5982\u679c\u7ba1\u9053\u4e2d\u6ca1\u6709\u6570\u636e\uff0cread\u963b\u585e\uff0c\u5982\u679c\u7ba1\u9053\u6ee1\u4e86\uff0cwrite\u963b\u585e \u533f\u540d\u7ba1\u9053\u53ea\u80fd\u7528\u4e8e\u5177\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff08\u7236\u5b50\u8fdb\u7a0b\uff0c\u5144\u5f1f\u8fdb\u7a0b\uff09 \u5b9e\u73b0 \u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u7ed9\u7236\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u8bfb\u53d6\u5230\u6570\u636e\u8f93\u51fa \u7ba1\u9053\u5e94\u5728\u5b50\u8fdb\u7a0b\u521b\u5efa\u524d\u751f\u6210\uff0c\u5426\u5219\u7236\u5b50\u8fdb\u7a0b\u4e0d\u4e00\u5b9a\u5bf9\u5e94\u540c\u4e00\u4e2a\u7ba1\u9053 \u5355\u5411\u53d1\u9001\u65f6 \u7531\u4e8e\u8bfb\u5199\u987a\u5e8f\u4e0d\u5b9a\uff0c\u770b\u8d77\u6765\u50cf\u81ea\u5df1\u5199\u81ea\u5df1\u8bfb \u89e3\u51b3\u65b9\u6cd5\uff1a\u5173\u95ed\u4e0d\u9700\u8981\u7684\u7aef\u53e3\uff08\u5373\u4ee3\u7801\u4e2d\u7684 close(pipefd[1]); \uff09 \u5b9e\u9645\u5728\u4e0d\u52a0 sleep \u8fd0\u884c\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e0b\u5217\u95ee\u9898\uff0c\u539f\u56e0\u662f==\u5199\u7684\u901f\u5ea6\u8fc7\u5feb\uff0c\u5411\u7ba1\u9053\u8fde\u7eed\u5199\u4e86\u597d\u591a\u6b21\uff0c\u624d\u88ab\u8bfb\u53d6\u5230\u4e00\u6b21\uff0c\u7236\u8fdb\u7a0b\u63a5\u6536\u5230\u8fc7\u591a\u7684\u5b50\u8fdb\u7a0b\u4fe1\u606f\u662f\u56e0\u4e3a\u7236\u8fdb\u7a0b\u6bcf\u6b21\u8bfb\u5b8c\u7ba1\u9053\u4e2d\u7684\u6570\u636e\uff0c\u60f3\u8981\u518d\u6b21\u8bfb\u53d6\u65f6\u5c31\u4f1a\u56e0\u4e3a\u7ba1\u9053\u4e3a\u7a7a\u800c\u88ab\u963b\u585e\u3002\u6240\u4ee5\u5c31\u9020\u6210\u4e86\u4ece\u6548\u679c\u4e0a\u6765\u770b\u5199\u7684\u901f\u5ea6\u8981\u6bd4\u8bfb\u7684\u5feb== \u6ce8\u610f\u53cc\u5411\u53d1\u9001\u65f6\uff0c\u6ce8\u610f\u7236\u5b50\u8fdb\u7a0b\u7684\u8bfb\u5199\u987a\u5e8f\uff08\u4ee3\u7801\u4e2d\u6ce8\u91ca\u6bb5\uff09 ```c /* #include int pipe(int pipefd[2]); \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u7ba1\u9053\uff0c\u7528\u6765\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 \u53c2\u6570\uff1aint pipefd[2] \u8fd9\u4e2a\u6570\u7ec4\u662f\u4e00\u4e2a\u4f20\u51fa\u53c2\u6570\u3002 pipefd[0] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u8bfb\u7aef pipefd[1] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u5199\u7aef \u8fd4\u56de\u503c\uff1a \u6210\u529f 0 \u5931\u8d25 -1 \u7ba1\u9053\u9ed8\u8ba4\u662f\u963b\u585e\u7684\uff1a\u5982\u679c\u7ba1\u9053\u4e2d\u6ca1\u6709\u6570\u636e\uff0cread\u963b\u585e\uff0c\u5982\u679c\u7ba1\u9053\u6ee1\u4e86\uff0cwrite\u963b\u585e \u6ce8\u610f\uff1a\u533f\u540d\u7ba1\u9053\u53ea\u80fd\u7528\u4e8e\u5177\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff08\u7236\u5b50\u8fdb\u7a0b\uff0c\u5144\u5f1f\u8fdb\u7a0b\uff09 */ // \u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u7ed9\u7236\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u8bfb\u53d6\u5230\u6570\u636e\u8f93\u51fa #include #include #include #include #include int main() { // \u5728fork\u4e4b\u524d\u521b\u5efa\u7ba1\u9053 int pipefd[2]; int ret = pipe(pipefd); if(ret == -1) { perror(\"pipe\"); exit(0); } // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\", getpid()); // \u5173\u95ed\u5199\u7aef // close(pipefd[1]); // \u4ece\u7ba1\u9053\u7684\u8bfb\u53d6\u7aef\u8bfb\u53d6\u6570\u636e char buf[1024] = {0}; while(1) { int len = read(pipefd[0], buf, sizeof(buf)); printf(\"parent recv : %s, pid : %d\\n\", buf, getpid()); // \u5411\u7ba1\u9053\u4e2d\u5199\u5165\u6570\u636e //char * str = \"hello,i am parent\"; //write(pipefd[1], str, strlen(str)); //sleep(1); } } else if(pid == 0){ // \u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d\\n\", getpid()); // \u5173\u95ed\u8bfb\u7aef // close(pipefd[0]); char buf[1024] = {0}; while(1) { // \u5411\u7ba1\u9053\u4e2d\u5199\u5165\u6570\u636e char * str = \"hello,i am child\"; write(pipefd[1], str, strlen(str)); sleep(1); // int len = read(pipefd[0], buf, sizeof(buf)); // printf(\"child recv : %s, pid : %d\\n\", buf, getpid()); // bzero(buf, 1024); } } return 0; } ``` \u5b9e\u4f8b\uff1a\u81ea\u5efa\u7ba1\u9053\u5b9e\u73b0shell\u547d\u4ee4( ps aux ) \u601d\u8def \u5b50\u8fdb\u7a0b\uff1a \u5b9e\u73b0 ps aux , \u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e\uff0c\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u7236\u8fdb\u7a0b \u7236\u8fdb\u7a0b\uff1a\u83b7\u53d6\u5230\u6570\u636e\u5e76\u6253\u5370 pipe()->fork()->execlp()<\u5728\u6b64\u4e4b\u524d\uff0c\u8f93\u51fa\u4e3a\u6587\u4ef6\u63cf\u8ff0\u7b26\u91cd\u5b9a\u5411>->\u6253\u5370 code ```c /* \u5b9e\u73b0 ps aux | grep xxx \u7236\u5b50\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u5b50\u8fdb\u7a0b\uff1a ps aux, \u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e\uff0c\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u7236\u8fdb\u7a0b \u7236\u8fdb\u7a0b\uff1a\u83b7\u53d6\u5230\u6570\u636e\uff0c\u8fc7\u6ee4 pipe() execlp() \u5b50\u8fdb\u7a0b\u5c06\u6807\u51c6\u8f93\u51fa stdout_fileno \u91cd\u5b9a\u5411\u5230\u7ba1\u9053\u7684\u5199\u7aef\u3002 dup2 */ #include #include #include #include #include #include int main() { // \u521b\u5efa\u4e00\u4e2a\u7ba1\u9053 int fd[2]; int ret = pipe(fd); if(ret == -1) { perror(\"pipe\"); exit(0); } // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b // \u5173\u95ed\u5199\u7aef\uff0c\u5fc5\u987b\u8981\u6709\uff0c\u5426\u5219\u7a0b\u5e8f\u4e0d\u4f1a\u7ed3\u675f close(fd[1]); // \u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6 char buf[1024] = {0}; int len = -1; while((len = read(fd[0], buf, sizeof(buf) - 1)) > 0) { // \u8fc7\u6ee4\u6570\u636e\u8f93\u51fa printf(\"%s\", buf); memset(buf, 0, 1024); } wait(NULL); } else if(pid == 0) { // \u5b50\u8fdb\u7a0b // \u5173\u95ed\u8bfb\u7aef close(fd[0]); // \u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u91cd\u5b9a\u5411 stdout_fileno -> fd[1] dup2(fd[1], STDOUT_FILENO); // \u6267\u884c ps aux execlp(\"ps\", \"ps\", \"aux\", NULL); perror(\"execlp\"); exit(0); } else { perror(\"fork\"); exit(0); } return 0; } ``` ==\u672a\u89e3\u51b3\uff1a./ipc | wc - c \u6bd4 ps aux | wc -c \u7edf\u8ba1\u7684\u8fdb\u7a0b\u6570\u4e0d\u540c== \u8bbe\u7f6e\u7ba1\u9053\u975e\u963b\u585e int flags = fcntl(fd[0], F_GETFL); // \u83b7\u53d6\u539f\u6765\u7684flag flags |= O_NONBLOCK; // \u4fee\u6539flag\u7684\u503c fcntl(fd[0], F_SETFL, flags); // \u8bbe\u7f6e\u65b0\u7684flag \u8bfb\u5199\u7279\u70b9\u603b\u7ed3 \u8bfb\u7ba1\u9053 \u7ba1\u9053\u4e2d\u6709\u6570\u636e\uff0cread\u8fd4\u56de\u5b9e\u9645\u8bfb\u5230\u7684\u5b57\u8282\u6570 \u7ba1\u9053\u4e2d\u65e0\u6570\u636e \u5199\u7aef\u88ab\u5168\u90e8\u5173\u95ed\uff0cread\u8fd4\u56de0\uff08\u76f8\u5f53\u4e8e\u8bfb\u5230\u6587\u4ef6\u7684\u672b\u5c3e\uff09 \u5199\u7aef\u6ca1\u6709\u5b8c\u5168\u5173\u95ed\uff0cread\u963b\u585e\u7b49\u5f85 \u5199\u7ba1\u9053 \u7ba1\u9053\u8bfb\u7aef\u5168\u90e8\u88ab\u5173\u95ed\uff0c\u8fdb\u7a0b\u5f02\u5e38\u7ec8\u6b62\uff08\u8fdb\u7a0b\u6536\u5230 SIGPIPE \u4fe1\u53f7\uff09 \u7ba1\u9053\u8bfb\u7aef\u6ca1\u6709\u5168\u90e8\u5173\u95ed\uff1a \u7ba1\u9053\u5df2\u6ee1\uff0cwrite\u963b\u585e \u7ba1\u9053\u6ca1\u6709\u6ee1\uff0cwrite\u5c06\u6570\u636e\u5199\u5165\uff0c\u5e76\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570 \u6709\u540d\u7ba1\u9053 \u6982\u5ff5\u53ca\u4f7f\u7528 \u533f\u540d\u7ba1\u9053\uff0c\u7531\u4e8e\u6ca1\u6709\u540d\u5b57\uff0c\u53ea\u80fd\u7528\u4e8e\u4eb2\u7f18\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002\u4e3a\u4e86\u514b\u670d\u8fd9\u4e2a\u7f3a\u70b9\uff0c\u63d0\u51fa\u4e86 \u6709\u540d\u7ba1\u9053\uff08FIFO\uff09 \uff0c\u4e5f\u53eb \u547d\u540d\u7ba1\u9053 \u3001 FIFO\u6587\u4ef6 \u6709\u540d\u7ba1\u9053\uff08FIFO\uff09 \u4e0d\u540c\u4e8e\u533f\u540d\u7ba1\u9053\u4e4b\u5904\u5728\u4e8e\u5b83 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8def\u5f84\u540d\u4e0e\u4e4b\u5173\u8054 \uff0c\u4ee5 FIFO \u7684\u6587\u4ef6\u5f62\u5f0f\u5b58\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d \uff0c\u5e76\u4e14\u5176\u6253\u5f00\u65b9\u5f0f\u4e0e\u6253\u5f00\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u5373\u4f7f\u4e0e FIFO \u7684\u521b\u5efa\u8fdb\u7a0b\u4e0d\u5b58\u5728\u4eb2\u7f18\u5173\u7cfb\u7684\u8fdb\u7a0b\uff0c\u53ea\u8981\u53ef\u4ee5\u8bbf\u95ee\u8be5\u8def\u5f84\uff0c\u5c31\u80fd\u591f\u5f7c\u6b64\u901a\u8fc7 FIFO \u76f8\u4e92\u901a\u4fe1\uff0c\u56e0\u6b64\uff0c\u901a\u8fc7 FIFO \u4e0d\u76f8\u5173\u7684\u8fdb\u7a0b\u4e5f\u80fd\u4ea4\u6362\u6570\u636e \u4e00\u65e6\u6253\u5f00\u4e86 FIFO \uff0c\u5c31\u80fd\u5728\u5b83\u4e0a\u9762\u4f7f\u7528\u4e0e\u64cd\u4f5c\u533f\u540d\u7ba1\u9053\u548c\u5176\u4ed6\u6587\u4ef6\u7684\u7cfb\u7edf\u8c03\u7528\u4e00\u6837\u7684I/O\u7cfb\u7edf\u8c03\u7528\u4e86\uff08\u5982 read() \u3001 write() \u548c close() \uff09\u3002\u4e0e\u7ba1\u9053\u4e00\u6837\uff0c FIFO \u4e5f\u6709\u4e00\u4e2a\u5199\u5165\u7aef\u548c\u8bfb\u53d6\u7aef\uff0c\u5e76\u4e14\u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u987a\u5e8f\u4e0e\u5199\u5165\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\u3002FIFO \u7684\u540d\u79f0\u4e5f\u7531\u6b64\u800c\u6765\uff1a\u5148\u5165\u5148\u51fa \u6709\u540d\u7ba1\u9053\uff08FIFO) \u548c \u533f\u540d\u7ba1\u9053\uff08pipe\uff09 \u6709\u4e00\u4e9b\u7279\u70b9\u662f\u76f8\u540c\u7684\uff0c\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e FIFO \u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u7279\u6b8a\u6587\u4ef6\u5b58\u5728\uff0c\u4f46 FIFO \u4e2d\u7684 \u5185\u5bb9\u5374\u5b58\u653e\u5728\u5185\u5b58\u4e2d \u5f53\u4f7f\u7528 FIFO \u7684\u8fdb\u7a0b\u9000\u51fa\u540e\uff0c FIFO \u6587\u4ef6\u5c06\u7ee7\u7eed\u4fdd\u5b58\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5\u4fbf\u4ee5\u540e\u4f7f\u7528 FIFO \u6709\u540d\u5b57\uff0c\u4e0d\u76f8\u5173\u7684\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00\u6709\u540d\u7ba1\u9053\u8fdb\u884c\u901a\u4fe1 \u53ef\u4f7f\u7528 man fifo \u67e5\u770b\u5e2e\u52a9 \u521b\u5efa\u6709\u540d\u7ba1\u9053 shell\u547d\u4ee4\u521b\u5efa\uff1a mkfifo \u6587\u4ef6\u540d \uff0c\u53ef\u901a\u8fc7 man 1 mkfifo \u67e5\u770b\u5e2e\u52a9 \u51fd\u6570\u521b\u5efa\uff1a int mkfifo(const char *pathname, mode_t mode); \uff0c\u53ef\u901a\u8fc7 man 3 mkfifo \u67e5\u770b\u5e2e\u52a9 ```c #include #include #include #include #include int main() { // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 int ret = access(\"test\", F_OK); // \u4e0d\u5b58\u5728\u5219\u521b\u5efa if (ret == -1) { printf(\"\u7ba1\u9053\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u7ba1\u9053...\\n\"); ret = mkfifo(\"test\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(0); } } return 0; } ``` \u5b9e\u4f8b\uff1a\u4e24\u8fdb\u7a0b\u901a\u8fc7\u6709\u540d\u7ba1\u9053\u901a\u4fe1\uff08\u5355\u4e00\u53d1\u9001\uff09 \u5199\u7aef ```c #include #include #include #include #include #include #include // \u5411\u7ba1\u9053\u4e2d\u5199\u6570\u636e int main() { // 1.\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 int ret = access(\"test\", F_OK); if(ret == -1) { printf(\"\u7ba1\u9053\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u7ba1\u9053\\n\"); // 2.\u521b\u5efa\u7ba1\u9053\u6587\u4ef6 ret = mkfifo(\"test\", 0664); if(ret == -1) { perror(\"mkfifo\"); exit(0); } } // 3.\u4ee5\u53ea\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u7ba1\u9053 int fd = open(\"test\", O_WRONLY); if(fd == -1) { perror(\"open\"); exit(0); } // \u5199\u6570\u636e for(int i = 0; i < 100; i++) { char buf[1024]; sprintf(buf, \"hello, %d\\n\", i); printf(\"write data : %s\\n\", buf); write(fd, buf, strlen(buf)); sleep(1); } close(fd); return 0; } ``` \u8bfb\u7aef ```c #include #include #include #include #include #include // \u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e int main() { // 1.\u6253\u5f00\u7ba1\u9053\u6587\u4ef6 int fd = open(\"test\", O_RDONLY); if(fd == -1) { perror(\"open\"); exit(0); } // \u8bfb\u6570\u636e while(1) { char buf[1024] = {0}; // \u8fd9\u91cc\u4e0d\u80fd\u5199strlen(buf) \u56e0\u4e3a\u8fd9\u91cc\u7684\u542b\u4e49\u662f\u6bcf\u6b21\u6309\u56fa\u5b9a\u957f\u5ea6\u8bfb\u53d6\uff0c\u6700\u5f00\u59cbstrlen(buf)=0 int len = read(fd, buf, sizeof(buf)); if(len == 0) { printf(\"\u5199\u7aef\u65ad\u5f00\u8fde\u63a5\u4e86...\\n\"); break; } printf(\"recv buf : %s\\n\", buf); } close(fd); return 0; } ``` \u8fd0\u884c \u5f53\u5199\u7aef\u5f00\u59cb\u5199\u6570\u636e\uff0c\u4f46\u8bfb\u7aef\u6ca1\u6709\u542f\u52a8\u65f6\uff0c\u5199\u7aef\u963b\u585e \u5f53\u8bfb\u7aef\u5f00\u59cb\u8bfb\u6570\u636e\uff0c\u4f46\u5199\u7aef\u6ca1\u6709\u542f\u52a8\u65f6\uff0c\u8bfb\u7aef\u963b\u585e \u4e24\u7aef\u90fd\u542f\u52a8\u65f6\uff0c\u6b63\u5e38\u8f93\u51fa\uff08\u65e0\u5173\u54ea\u4e2a\u5148\u542f\u52a8\uff09 \u5148\u5173\u95ed\u8bfb\u7aef \u5148\u5173\u95ed\u5199\u7aef \u5b9e\u4f8b\uff1a\u7b80\u6613\u7248\u804a\u5929\u529f\u80fd\uff08\u8fde\u7eed\u53d1\u9001\uff09 \u529f\u80fd\uff1a\u4e24\u4e2a\u8fdb\u7a0b\u76f8\u4e92\u53d1\u9001\u6570\u636e\u53ca\u63a5\u6536\u6570\u636e\uff0c\u80fd\u591f\u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536 \u601d\u8def \u7531\u4e8e\u4e24\u4e2a\u8fdb\u7a0b\u5e76\u6ca1\u6709\u4eb2\u7f18\u5173\u7cfb\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u6709\u540d\u7ba1\u9053\u5b9e\u73b0 \u9700\u8981\u4e24\u4e2a\u7ba1\u9053 \u4e00\u4e2a\u7ba1\u9053\u7528\u4e8e\u8fdb\u7a0bA\u7684\u5199\u4e0e\u8fdb\u7a0bB\u7684\u8bfb \u4e00\u4e2a\u7ba1\u9053\u7528\u4e8e\u8fdb\u7a0bB\u7684\u5199\u4e0e\u8fdb\u7a0bA\u7684\u8bfb \u9700\u8981\u7236\u5b50\u8fdb\u7a0b\uff0c\u5b9e\u73b0\u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536 \u7236\u8fdb\u7a0b\u8d1f\u8d23\u5199\u5165\u6570\u636e\u5230\u7ba1\u9053 \u5b50\u8fdb\u7a0b\u8d1f\u8d23\u4ece\u7ba1\u9053\u8bfb\u53d6\u6570\u636e \u6d41\u7a0b\uff08\u4e0d\u5305\u542b\u7236\u5b50\u8fdb\u7a0b\uff0c\u5373\u4e0b\u56fe\u6240\u793a\u6d41\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u8fde\u7eed\u53d1\u9001\u529f\u80fd\uff09 \u8fdb\u7a0bA ```c / chatA 1. \u8bfb\u3001\u5199\u6570\u636e\u5206\u5f00\uff0c\u7528\u4e24\u4e2a\u7ba1\u9053 1. fifo1\u7528\u4e8e\u8fdb\u7a0bA\u5199\u53ca\u8fdb\u7a0bB\u8bfb 2. fifo2\u7528\u4e8e\u8fdb\u7a0bB\u5199\u53ca\u8fdb\u7a0bA\u8bfb 2. \u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536\u4fe1\u606f\uff0c\u4f7f\u7528\u4e24\u4e2a\u8fdb\u7a0b 1. \u7236\u8fdb\u7a0b\u7528\u4e8e\u5199\u6570\u636e 2. \u5b50\u8fdb\u7a0b\u7528\u4e8e\u8bfb\u6570\u636e / #include #include #include #include #include #include #include #include int main() { // \u5224\u65ad\u5199\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa int ret = access(\"fifo1\", F_OK); if (ret == -1) { printf(\"fifo1\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo1\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u5224\u65ad\u8bfb\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa ret = access(\"fifo2\", F_OK); if (ret == -1) { printf(\"fifo2\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo2\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u521b\u5efa\u8fdb\u7a0b pid_t pid = fork(); char buf[1024]; if (pid > 0) { // \u7236\u8fdb\u7a0b // \u6253\u5f00\u5199\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdw = open(\"fifo1\", O_WRONLY); while (1) { // \u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165 printf(\"[chatA]please input: \\n\"); fgets(buf, sizeof(buf), stdin); write(fdw, buf, strlen(buf)); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdw); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b // \u6253\u5f00\u8bfb\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdr = open(\"fifo2\", O_RDONLY); while (1) { char buf[1024]; int len = read(fdr, buf, sizeof(buf)); if(len == 0) { printf(\"[chatA]\u5199\u7aef\u65ad\u5f00\u8fde\u63a5\u4e86...\\n\"); break; } printf(\"[chatA]recv : %s\", buf); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdr); } else { perror(\"fork\"); exit(-2); } return 0; } ``` \u8fdb\u7a0bB ```c / chatB 1. \u8bfb\u3001\u5199\u6570\u636e\u5206\u5f00\uff0c\u7528\u4e24\u4e2a\u7ba1\u9053 1. fifo1\u7528\u4e8e\u8fdb\u7a0bA\u5199\u53ca\u8fdb\u7a0bB\u8bfb 2. fifo2\u7528\u4e8e\u8fdb\u7a0bB\u5199\u53ca\u8fdb\u7a0bA\u8bfb 2. \u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536\u4fe1\u606f\uff0c\u4f7f\u7528\u4e24\u4e2a\u8fdb\u7a0b 1. \u7236\u8fdb\u7a0b\u7528\u4e8e\u5199\u6570\u636e 2. \u5b50\u8fdb\u7a0b\u7528\u4e8e\u8bfb\u6570\u636e / #include #include #include #include #include #include #include #include int main() { // \u5224\u65ad\u5199\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa int ret = access(\"fifo1\", F_OK); if (ret == -1) { printf(\"fifo1\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo1\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u5224\u65ad\u8bfb\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa ret = access(\"fifo2\", F_OK); if (ret == -1) { printf(\"fifo2\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo2\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u521b\u5efa\u8fdb\u7a0b pid_t pid = fork(); char buf[1024] = { 0 }; if (pid > 0) { // \u7236\u8fdb\u7a0b // \u6253\u5f00\u5199\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdw = open(\"fifo2\", O_WRONLY); while (1) { // \u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165 printf(\"[chatB]please input: \\n\"); fgets(buf, sizeof(buf), stdin); write(fdw, buf, strlen(buf)); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdw); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b // \u6253\u5f00\u8bfb\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdr = open(\"fifo1\", O_RDONLY); while (1) { char buf[1024]; int len = read(fdr, buf, sizeof(buf)); if(len == 0) { printf(\"[chatB]\u5199\u7aef\u65ad\u5f00\u8fde\u63a5\u4e86...\\n\"); break; } printf(\"[chatB]recv : %s\", buf); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdr); } else { perror(\"fork\"); exit(-2); } return 0; } ``` \u8fd0\u884c\u7ed3\u679c ==\u5b58\u5728\u7684\u95ee\u9898==\uff1a \u4e71\u7801 \u4e00\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u540e\uff0c\u53e6\u4e00\u4e2a\u8fd8\u672a\u7ed3\u675f\uff0c\u9700\u8981\u624b\u52a8\u5173\u95ed \u8bfb\u5199\u7279\u70b9\u603b\u7ed3 \u8bfb\u7ba1\u9053 \u7ba1\u9053\u4e2d\u6709\u6570\u636e\uff0c read \u8fd4\u56de\u5b9e\u9645\u8bfb\u5230\u7684\u5b57\u8282\u6570 \u7ba1\u9053\u4e2d\u65e0\u6570\u636e\uff1a \u7ba1\u9053\u5199\u7aef\u88ab\u5168\u90e8\u5173\u95ed\uff0c read \u8fd4\u56de0\uff0c\uff08\u76f8\u5f53\u4e8e\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\uff09 \u5199\u7aef\u6ca1\u6709\u5168\u90e8\u88ab\u5173\u95ed\uff0c read \u963b\u585e\u7b49\u5f85 \u5199\u7ba1\u9053 \u7ba1\u9053\u8bfb\u7aef\u88ab\u5168\u90e8\u5173\u95ed\uff0c\u8fdb\u884c\u5f02\u5e38\u7ec8\u6b62\uff08\u6536\u5230\u4e00\u4e2a SIGPIP \u4fe1\u53f7\uff09 \u7ba1\u9053\u8bfb\u7aef\u6ca1\u6709\u5168\u90e8\u5173\u95ed\uff1a \u7ba1\u9053\u5df2\u7ecf\u6ee1\u4e86\uff0c write \u4f1a\u963b\u585e \u7ba1\u9053\u6ca1\u6709\u6ee1\uff0c write \u5c06\u6570\u636e\u5199\u5165\uff0c\u5e76\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570 \u5185\u5b58\u6620\u5c04 \u6982\u5ff5 \u5185\u5b58\u6620\u5c04\uff08Memory-mapped I/O\uff09 \u662f\u5c06 \u78c1\u76d8\u6587\u4ef6\u7684\u6570\u636e\u6620\u5c04\u5230\u5185\u5b58 \uff0c\u7528\u6237\u901a\u8fc7\u4fee\u6539\u5185\u5b58\u5c31\u80fd\u4fee\u6539\u78c1\u76d8\u6587\u4ef6 \u5185\u5b58\u6620\u5c04\u76f8\u5173\u7cfb\u7edf\u8c03\u7528\uff0c\u4f7f\u7528 man 2 mmap \u67e5\u770b\u5e2e\u52a9 void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); \u529f\u80fd\uff1a\u5c06\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u8bbe\u5907\u7684\u6570\u636e\u6620\u5c04\u5230\u5185\u5b58\u4e2d \u53c2\u6570 addr \uff1a\u8bbe\u7f6e\u4e3a NULL\u65f6, \u7531\u5185\u6838\u6307\u5b9a\uff08\u63a8\u8350\u505a\u6cd5\uff09 length : \u8981\u6620\u5c04\u7684\u6570\u636e\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u503c \u4e0d\u80fd\u4e3a0\u3002\u5efa\u8bae\u4f7f\u7528\u6587\u4ef6\u7684\u957f\u5ea6 \uff0c\u83b7\u53d6\u6587\u4ef6\u7684\u957f\u5ea6\uff1a stat \uff0c lseek prot : \u5bf9\u7533\u8bf7\u7684\u5185\u5b58\u6620\u5c04\u533a\u7684\u64cd\u4f5c\u6743\u9650 PROT_EXEC \uff1a\u53ef\u6267\u884c\u7684\u6743\u9650 PROT_READ \uff1a\u8bfb\u6743\u9650 PROT_WRITE \uff1a\u5199\u6743\u9650 PROT_NONE \uff1a\u6ca1\u6709\u6743\u9650 flags MAP_SHARED : \u6620\u5c04\u533a\u7684\u6570\u636e\u4f1a\u81ea\u52a8\u548c\u78c1\u76d8\u6587\u4ef6\u8fdb\u884c\u540c\u6b65\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u5fc5\u987b\u8981\u8bbe\u7f6e\u8fd9\u4e2a\u9009\u9879 MAP_PRIVATE \uff1a\u4e0d\u540c\u6b65\uff0c\u5185\u5b58\u6620\u5c04\u533a\u7684\u6570\u636e\u6539\u53d8\u4e86\uff0c\u5bf9\u539f\u6765\u7684\u6587\u4ef6\u4e0d\u4f1a\u4fee\u6539\uff0c\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u3002\uff08 copy on write \uff09 fd : \u9700\u8981\u6620\u5c04\u7684\u90a3\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u901a\u8fc7 open \u5f97\u5230\uff0c open \u7684\u662f\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6 offset \uff1a\u504f\u79fb\u91cf\uff0c\u4e00\u822c\u8fdb\u884c\u7279\u6b8a\u6307\u5b9a\uff08\u6307\u5b9a\u4e3a0\u5373\u53ef\uff09\uff0c\u5982\u679c\u4f7f\u7528\u5fc5\u987b\u6307\u5b9a\u7684\u662f 4k \u7684\u6574\u6570\u500d\uff0c0\u8868\u793a\u4e0d\u504f\u79fb \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u521b\u5efa\u7684\u5185\u5b58\u7684\u9996\u5730\u5740\u3002\u5931\u8d25\u8fd4\u56de MAP_FAILED(\u5373(void *) -1) int munmap(void *addr, size_t length); \u529f\u80fd\uff1a\u91ca\u653e\u5185\u5b58\u6620\u5c04 \u53c2\u6570 addr : \u8981\u91ca\u653e\u7684\u5185\u5b58\u7684\u9996\u5730\u5740 length : \u8981\u91ca\u653e\u7684\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u8981\u548c mmap \u51fd\u6570\u4e2d\u7684length\u53c2\u6570\u7684\u503c\u4e00\u6837 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u79cd\u7c7b \u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\uff08\u7236\u5b50\u8fdb\u7a0b\uff09 \u8fd8\u6ca1\u6709\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u552f\u4e00\u7684\u7236\u8fdb\u7a0b\uff0c\u5148\u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a \u6709\u4e86\u5185\u5b58\u6620\u5c04\u533a\u4ee5\u540e\uff0c\u521b\u5efa\u5b50\u8fdb\u7a0b \u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u521b\u5efa\u7684\u5185\u5b58\u6620\u5c04\u533a \u6ca1\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u51c6\u5907\u4e00\u4e2a\u5927\u5c0f\u4e0d\u662f0\u7684\u78c1\u76d8\u6587\u4ef6 \u8fdb\u7a0b1 \u901a\u8fc7\u78c1\u76d8\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a\uff0c\u5f97\u5230\u4e00\u4e2a\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\u7684\u6307\u9488 \u8fdb\u7a0b2 \u901a\u8fc7\u78c1\u76d8\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a\uff0c\u5f97\u5230\u4e00\u4e2a\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\u7684\u6307\u9488 \u4f7f\u7528\u5185\u5b58\u6620\u5c04\u533a\u901a\u4fe1 \u6ce8\u610f\u4e8b\u9879 \u8981\u64cd\u4f5c\u6620\u5c04\u5185\u5b58\uff0c \u5fc5\u987b\u8981\u6709\u8bfb\u7684\u6743\u9650 \uff0c\u5373\u6743\u9650\u4e3a PROT_READ \u6216 PROT_READ|PROT_WRITE \u5728\u4f7f\u7528 \u5185\u5b58\u6620\u5c04 \u901a\u4fe1\u65f6\uff0c\u4f7f\u7528\u6587\u4ef6\u7684\u5927\u5c0f\u4e0d\u80fd\u4e3a0\uff0c open \u6307\u5b9a\u7684\u6743\u9650\u4e0d\u80fd\u548c prot \u53c2\u6570\u6709\u51b2\u7a81 prot open PROT_READ O_RDONLY \u6216 O_RDWR PROT_READ | PROT_WRITE O_RDWR \u5185\u5b58\u6620\u5c04\u533a\u901a\u4fe1\uff0c\u662f\u975e\u963b\u585e \u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u6620\u5c04\u533a \u5982\u679c\u5bf9 mmap \u7684\u8fd4\u56de\u503c( ptr )\u505a ++\u64cd\u4f5c(ptr++) , munmap \u662f\u5426\u80fd\u591f\u6210\u529f? \u4e0d\u80fd\u6210\u529f\uff0c\u56e0\u4e3a\u56de\u6536\u8d44\u6e90\u65f6\uff0c\u9700\u8981\u4f20\u9012\u6307\u9488\uff0c\u5982\u679c\u53d8\u5316\uff0c\u5c06\u4f1a\u56de\u6536\u5931\u8d25 \u5982\u679c open \u65f6 O_RDONLY , mmap \u65f6 prot \u53c2\u6570\u6307\u5b9a PROT_READ | PROT_WRITE \u4f1a\u600e\u6837? \u9519\u8bef\uff0c\u8fd4\u56de MAP_FAILED \uff0c open() \u51fd\u6570\u4e2d\u7684\u6743\u9650\u5efa\u8bae\u548c prot \u53c2\u6570\u7684\u6743\u9650\u4fdd\u6301\u4e00\u81f4 \u5982\u679c\u6587\u4ef6\u504f\u79fb\u91cf\u4e3a1000\u4f1a\u600e\u6837? \u504f\u79fb\u91cf\u5fc5\u987b\u662f 4K \u7684\u6574\u6570\u500d\uff0c\u8fd4\u56de MAP_FAILED mmap \u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528\u5931\u8d25? \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1alength = 0 \u7b2c\u4e09\u4e2a\u53c2\u6570\uff1a prot \u53ea\u6307\u5b9a\u5199\u6743\u9650 prot \u548c open() \u4e24\u8005\u7684\u6743\u9650\u4e0d\u5339\u914d \u53ef\u4ee5open\u7684\u65f6\u5019 O_CREAT \u4e00\u4e2a\u65b0\u6587\u4ef6\u6765\u521b\u5efa\u6620\u5c04\u533a\u5417? \u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u521b\u5efa\u7684\u6587\u4ef6\u7684\u5927\u5c0f\u5982\u679c\u4e3a0\u7684\u8bdd\uff0c\u80af\u5b9a\u4e0d\u884c(\u56e0\u4e3a mmap \u8c03\u7528\u65f6\uff0c\u957f\u5ea6\u4e0d\u5141\u8bb8\u4e3a0) mmap \u540e\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5bf9 mmap \u6620\u5c04\u6709\u6ca1\u6709\u5f71\u54cd\uff1f \u6620\u5c04\u533a\u8fd8\u5b58\u5728\uff0c\u521b\u5efa\u6620\u5c04\u533a\u7684 fd \u88ab\u5173\u95ed\uff0c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd \u5bf9 ptr \u8d8a\u754c\u64cd\u4f5c\u4f1a\u600e\u6837\uff1f \u8d8a\u754c\u64cd\u4f5c\u64cd\u4f5c\u7684\u662f\u975e\u6cd5\u7684\u5185\u5b58 -> \u6bb5\u9519\u8bef \u5b9e\u4f8b\uff1a\u7236\u5b50\u8fdb\u7a0b\u901a\u4fe1 \u601d\u8def \u6253\u5f00\u6307\u5b9a\u6587\u4ef6\u5e76\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6 \u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a \u7236\u5b50\u8fdb\u7a0b\u529f\u80fd\uff0c\u7236\u8fdb\u7a0b\u8d1f\u8d23\u6536\u6570\u636e\uff0c\u5b50\u8fdb\u7a0b\u8d1f\u8d23\u53d1\u6570\u636e \u56de\u6536\u8d44\u6e90 code ```c #include #include #include #include #include #include #include #include int main() { // \u6253\u5f00\u6307\u5b9a\u6587\u4ef6 int fd = open(\"ipc.txt\", O_RDWR); // \u83b7\u53d6\u7ed9\u5b9a\u6587\u4ef6\u957f\u5ea6 int size = lseek(fd, 0, SEEK_END); // \u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a void ptr = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0); // \u5224\u65ad\u662f\u5426\u6210\u529f if (ptr == MAP_FAILED) { perror(\"mmap\"); exit(-1); } // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); if (pid > 0) { // \u7236\u8fdb\u7a0b\uff0c\u7528\u4e8e\u8bfb\u53d6\u6570\u636e // \u56de\u6536\u5b50\u8fdb\u7a0b wait(NULL); // \u63a5\u6536\u6570\u636e\u5e76\u6253\u5370 char buf[64]; // \u7c7b\u578b\u9700\u8981\u5f3a\u8f6c strcpy(buf, (char )ptr); printf(\"recv : %s\\n\", buf); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b\uff0c\u7528\u4e8e\u53d1\u9001\u6570\u636e // \u7c7b\u578b\u9700\u8981\u5f3a\u8f6c strcpy((char *)ptr, \"hello, i am child process\"); } else { perror(\"fork\"); exit(-1); } // \u5173\u95ed\u5185\u5b58\u6620\u5c04\u533a munmap(ptr, size); // \u5173\u95ed\u6587\u4ef6 close(fd); return 0; } ``` \u6ce8\u610f\uff1a\u7a0b\u5e8f\u6267\u884c\u540e\uff0c\u6587\u4ef6\u5927\u5c0f\u4e0d\u6539\u53d8\uff0c\u90a3\u4e48\u5b50\u8fdb\u7a0b\u5199\u5165\u7684\u6570\u636e\u4f1a\u88ab\u622a\u65ad\uff0c==\u539f\u56e0\u672a\u77e5== \u6267\u884c\u524d \u6267\u884c\u540e \u5b9e\u4f8b\uff1a\u6587\u4ef6\u62f7\u8d1d \u601d\u8def \u9700\u8981\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f\u6709\u5185\u5bb9\u7684\u6587\u4ef6\uff08\u5f85\u62f7\u8d1d\u6587\u4ef6\uff09\uff0c\u4e00\u4e2a\u662f\u7a7a\u6587\u4ef6 \u7531\u4e8e\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u4e24\u4e2a\u5185\u5b58\u6620\u5c04\u533a \u7136\u540e\u5c06\u6587\u4ef6A\u7684\u5185\u5b58\u6620\u5c04\u533a\u5185\u5bb9\u62f7\u8d1d\u7ed9\u6587\u4ef6B\u7684\u5185\u5b58\u6620\u5c04\u533a \u56de\u6536\u8d44\u6e90 code ```c #include #include #include #include #include #include #include #include int main() { // \u6253\u5f00\u6e90\u6587\u4ef6\uff0c\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6\u5e76\u521b\u5efa\u5bf9\u5e94\u5185\u5b58\u6620\u5c04\u533a int fdSource = open(\"source.txt\", O_RDONLY); int len = lseek(fdSource, 0, SEEK_END); void *ptrSource = mmap(NULL, len, PROT_READ, MAP_SHARED, fdSource, 0); if (ptrSource == MAP_FAILED) { perror(\"mmap\"); exit(-1); } // \u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c\u5e76\u521b\u5efa\u5bf9\u5e94\u5185\u5b58\u6620\u5c04\u533a int fdTarget = open(\"target.txt\", O_RDWR | O_CREAT, 0664); // \u7531\u4e8e\u76ee\u6807\u6587\u4ef6\u662f\u901a\u8fc7\u521b\u5efa\u5f97\u5230\uff0c\u6240\u4ee5\u9700\u8981\u6269\u5c55\u957f\u5ea6\u4e0e\u6e90\u6587\u4ef6\u4fdd\u6301\u4e00\u81f4 truncate(\"target.txt\", len); // \u5982\u679c\u4e0d\u52a0\uff0c\u6269\u5c55\u53ef\u80fd\u5931\u8d25\uff08\u4fdd\u9669\u8d77\u89c1\uff09 write(fdTarget, \" \", 1); void *ptrTarget = mmap(NULL, len, PROT_READ | PROT_WRITE, MAP_SHARED, fdTarget, 0); if (ptrTarget == MAP_FAILED) { perror(\"mmap\"); exit(-1); } // \u5185\u5b58\u62f7\u8d1d memcpy(ptrTarget, ptrSource, len); // \u56de\u6536\u8d44\u6e90 close(fdTarget); close(fdSource); munmap(ptrTarget, len); munmap(ptrSource, len); return 0; } ``` output \u6267\u884c\u524d \u6267\u884c\u540e \u5b9e\u4f8b\uff1a\u533f\u540d\u5185\u5b58\u6620\u5c04 \u601d\u8def \u533f\u540d\u5185\u5b58\u6620\u5c04\u4e0d\u5b58\u5728\u6587\u4ef6\u5b9e\u4f53\uff0c\u90a3\u4e48\u53ea\u80fd\u901a\u8fc7\u7236\u5b50\u8fdb\u7a0b\u5b9e\u73b0 \u7236\u5b50\u8fdb\u7a0b\u64cd\u4f5c\u540c\u4e00\u5757\u533a\u57df\uff0c\u91cd\u70b9\u5728\u4e8e\u5185\u5b58\u6620\u5c04\u533a\u5728\u521b\u5efa\u65f6\u65b0\u589eflags\u53c2\u6570 MAP_ANONYMOUS \u7236\u8fdb\u7a0b\u8bfb\uff0c\u5b50\u8fdb\u7a0b\u5199 code ```c #include #include #include #include #include #include #include int main() { void ptr = mmap(NULL, 128, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0); if (ptr == MAP_FAILED) { perror(\"mmap\"); exit(-1); } pid_t pid = fork(); if (pid > 0) { // \u7236\u8fdb\u7a0b wait(NULL); char buf[128]; strcpy(buf, (char )ptr); printf(\"recv : %s\\n\", buf); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b strcpy((char*)ptr, \"i am a message\"); } else { perror(\"fork\"); exit(-1); } // \u91ca\u653e\u8d44\u6e90 munmap(ptr, 128); return 0; } ``` output \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u4fe1\u53f7 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/07 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u4fe1\u53f7 \u57fa\u672c\u6982\u5ff5 \u4fe1\u53f7\u662f Linux \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6700\u53e4\u8001\u7684\u65b9\u5f0f\u4e4b\u4e00\uff0c\u662f\u4e8b\u4ef6\u53d1\u751f\u65f6\u5bf9\u8fdb\u7a0b\u7684\u901a\u77e5\u673a\u5236\uff0c\u6709\u65f6\u4e5f\u79f0\u4e4b\u4e3a\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u5b83\u662f\u5728\u8f6f\u4ef6\u5c42\u6b21\u4e0a\u5bf9\u4e2d\u65ad\u673a\u5236\u7684\u4e00\u79cd\u6a21\u62df\uff0c\u662f\u4e00\u79cd\u5f02\u6b65\u901a\u4fe1\u7684\u65b9\u5f0f\u3002\u4fe1\u53f7\u53ef\u4ee5\u5bfc\u81f4\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u88ab\u53e6\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5f02\u6b65\u8fdb\u7a0b\u4e2d\u65ad\uff0c\u8f6c\u800c\u5904\u7406\u67d0\u4e00\u4e2a\u7a81\u53d1\u4e8b\u4ef6 \u53d1\u5f80\u8fdb\u7a0b\u7684\u8bf8\u591a\u4fe1\u53f7\uff0c\u901a\u5e38\u90fd\u662f\u6e90\u4e8e\u5185\u6838\u3002\u5f15\u53d1\u5185\u6838\u4e3a\u8fdb\u7a0b\u4ea7\u751f\u4fe1\u53f7\u7684\u5404\u7c7b\u4e8b\u4ef6\u5982\u4e0b \u5bf9\u4e8e\u524d\u53f0\u8fdb\u7a0b\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u7279\u6b8a\u7684\u7ec8\u7aef\u5b57\u7b26\u6765\u7ed9\u5b83\u53d1\u9001\u4fe1\u53f7\u3002\u6bd4\u5982\u8f93\u5165 Ctrl+C \u901a\u5e38\u4f1a\u7ed9\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7 \u786c\u4ef6\u53d1\u751f\u5f02\u5e38\uff0c\u5373\u786c\u4ef6\u68c0\u6d4b\u5230\u4e00\u4e2a\u9519\u8bef\u6761\u4ef6\u5e76\u901a\u77e5\u5185\u6838\uff0c\u968f\u5373\u518d\u7531\u5185\u6838\u53d1\u9001\u76f8\u5e94\u4fe1\u53f7\u7ed9\u76f8\u5173\u8fdb\u7a0b\u3002\u6bd4\u5982\u6267\u884c\u4e00\u6761\u5f02\u5e38\u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\uff0c\u8bf8\u5982\u88ab 0 \u9664\uff0c\u6216\u8005\u5f15\u7528\u4e86\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u5b58\u533a\u57df \u7cfb\u7edf\u72b6\u6001\u53d8\u5316\uff0c\u6bd4\u5982 alarm \u5b9a\u65f6\u5668\u5230\u671f\u5c06\u5f15\u8d77 SIGALRM \u4fe1\u53f7\uff0c\u8fdb\u7a0b\u6267\u884c\u7684 CPU \u65f6\u95f4\u8d85\u9650\uff0c\u6216\u8005\u8be5\u8fdb\u7a0b\u7684\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u9000\u51fa \u8fd0\u884c kill \u547d\u4ee4\u6216\u8c03\u7528 kill \u51fd\u6570 \u4f7f\u7528\u4fe1\u53f7\u7684\u4e24\u4e2a\u4e3b\u8981\u76ee\u7684\u662f \u8ba9\u8fdb\u7a0b\u77e5\u9053\u5df2\u7ecf\u53d1\u751f\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684\u4e8b\u60c5 \u5f3a\u8feb\u8fdb\u7a0b\u6267\u884c\u5b83\u81ea\u5df1\u4ee3\u7801\u4e2d\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f \u4fe1\u53f7\u7684\u7279\u70b9 \u7b80\u5355 \u4e0d\u80fd\u643a\u5e26\u5927\u91cf\u4fe1\u606f \u6ee1\u8db3\u67d0\u4e2a\u7279\u5b9a\u6761\u4ef6\u624d\u53d1\u9001 \u4f18\u5148\u7ea7\u6bd4\u8f83\u9ad8 \u67e5\u770b\u7cfb\u7edf\u5b9a\u4e49\u7684\u4fe1\u53f7\u5217\u8868\uff1a kill \u2013l \uff0c\u524d 31 \u4e2a\u4fe1\u53f7\u4e3a\u5e38\u89c4\u4fe1\u53f7\uff0c\u5176\u4f59\u4e3a\u5b9e\u65f6\u4fe1\u53f7 \u4fe1\u53f7\u4e00\u89c8\u8868\u53ca\u7279\u70b9 \u53ef\u901a\u8fc7 man 7 signal \u67e5\u770b\u5e2e\u52a9 \u4fe1\u53f7\u7684 5 \u4e2d\u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c Term \uff1a\u7ec8\u6b62\u8fdb\u7a0b Ign \uff1a\u5f53\u524d\u8fdb\u7a0b\u5ffd\u7565\u6389\u8fd9\u4e2a\u4fe1\u53f7 Core \uff1a\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5e76\u751f\u6210\u4e00\u4e2aCore\u6587\u4ef6 Stop \uff1a\u6682\u505c\u5f53\u524d\u8fdb\u7a0b Cont \uff1a\u7ee7\u7eed\u6267\u884c\u5f53\u524d\u88ab\u6682\u505c\u7684\u8fdb\u7a0b \u4fe1\u53f7\u7684\u51e0\u79cd\u72b6\u6001\uff1a \u4ea7\u751f \u3001 \u672a\u51b3 \u3001 \u9012\u8fbe SIGKILL \u548c SIGSTOP \u4fe1\u53f7\u4e0d\u80fd\u88ab\u6355\u6349\u3001\u963b\u585e\u6216\u8005\u5ffd\u7565\uff0c\u53ea\u80fd\u6267\u884c\u9ed8\u8ba4\u52a8\u4f5c \u7ea2\u8272\u6807\u8bb0\u4ee3\u8868\u9700\u8981\u719f\u7ec3\u638c\u63e1 \u4fe1\u53f7\u76f8\u5173\u7684\u51fd\u6570 core\u6587\u4ef6\u751f\u6210\u53ca\u8c03\u8bd5 \u5f53\u8fdb\u7a0b\u5f02\u5e38\u7ec8\u6b62\u65f6\uff0c\u4f1a\u751f\u6210 core \u6587\u4ef6\uff08\u9700\u8981\u8fdb\u884c\u76f8\u5e94\u8bbe\u7f6e\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 gdb \u8c03\u8bd5\u67e5\u770b\u9519\u8bef\uff0c\u8c03\u8bd5\u4ee5\u4e0b\u7a0b\u5e8f code ```c #include #include int main() { char* buf; strcpy(buf, \"core test\"); return 0; } ``` \u751f\u6210\u8c03\u8bd5 core \u6587\u4ef6\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u6b65 \u4f7f\u7528 ulimit -a \u67e5\u770b\u8d44\u6e90\u4e0a\u9650 \u4fee\u6539 core size \uff1a ulimit -c core-size \u5728\u7f16\u8bd1\u8fd0\u884c\u7a0b\u5e8f\u65f6\u52a0\u4e0a -g \u9009\u9879\u4f7f\u5f97\u80fd\u591f\u88ab gdb \u8c03\u8bd5\uff0c\u8fd0\u884c\u540e\u751f\u6210 core \u6587\u4ef6 \u8c03\u8bd5 core \u7a0b\u5e8f\uff1a gdb test \u8fdb\u5165 gdb \u7ec8\u7aef\uff0c\u4f7f\u7528 core-file core \u53ef\u4ee5\u67e5\u770b core \u5b9a\u4f4d\u9519\u8bef kill & raise & abort int kill(pid_t pid, int sig); \u4f7f\u7528 man 2 kill \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u7ed9 \u4efb\u4f55\u7684\u8fdb\u7a0b\u6216\u8005\u8fdb\u7a0b\u7ec4 pid \uff0c\u53d1\u9001 \u4efb\u4f55\u7684\u4fe1\u53f7 sig \u53c2\u6570 pid > 0 : \u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u6307\u5b9a\u7684\u8fdb\u7a0b = 0 : \u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u5f53\u524d\u7684\u8fdb\u7a0b\u7ec4 = -1 : \u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u6bcf\u4e00\u4e2a\u6709\u6743\u9650\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7\u7684\u8fdb\u7a0b < -1 : \u8fd9\u4e2a pid=\u67d0\u4e2a\u8fdb\u7a0b\u7ec4\u7684ID\u53d6\u53cd sig : \u9700\u8981\u53d1\u9001\u7684\u4fe1\u53f7\u7684\u7f16\u53f7\u6216\u8005\u662f\u5b8f\u503c\uff0c0\u8868\u793a\u4e0d\u53d1\u9001\u4efb\u4f55\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a0\u6210\u529f\uff0c-1\u5931\u8d25 int raise(int sig); \u4f7f\u7528 man 3 raise \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u7ed9 \u5f53\u524d\u8fdb\u7a0b \u53d1\u9001\u4fe1\u53f7 \u53c2\u6570\uff1a sig : \u8981\u53d1\u9001\u7684\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a0\u6210\u529f\uff0c\u975e0\u5931\u8d25 void abort(void); \u4f7f\u7528 man 3 abort \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a \u53d1\u9001 SIGABRT \u4fe1\u53f7\u7ed9\u5f53\u524d\u7684\u8fdb\u7a0b\uff0c \u6740\u6b7b\u5f53\u524d\u8fdb\u7a0b #include <stdio.h> #include <sys/types.h> #include <signal.h> #include <unistd.h> int main() { pid_t pid = fork(); if(pid == 0) { // \u5b50\u8fdb\u7a0b int i = 0; for(i = 0; i < 5; i++) { printf(\"child process\\n\"); sleep(1); } } else if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"parent process\\n\"); sleep(2); printf(\"kill child process now\\n\"); kill(pid, SIGINT); } return 0; } alarm & setitimer \u533a\u522b\uff1a alarm \u53ea\u80fd\u5b9a\u4e00\u6b21\u65f6\uff0c setitimer \u53ef\u4ee5\u5468\u671f\u6027\u5b9a\u65f6 unsigned int alarm(unsigned int seconds); \u4f7f\u7528 man 2 alarm \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff08\u95f9\u949f\uff09\u3002\u51fd\u6570\u8c03\u7528\uff0c\u5f00\u59cb\u5012\u8ba1\u65f6\uff0c\u5f53\u5012\u8ba1\u65f6\u4e3a0\u7684\u65f6\u5019\uff0c\u51fd\u6570\u4f1a\u7ed9\u5f53\u524d\u7684\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff1a SIGALARM \u53c2\u6570\uff1a seconds \uff0c\u5012\u8ba1\u65f6\u7684\u65f6\u957f\uff0c\u5355\u4f4d\uff1a\u79d2\u3002\u5982\u679c\u53c2\u6570\u4e3a0\uff0c\u5b9a\u65f6\u5668\u65e0\u6548\uff08\u4e0d\u8fdb\u884c\u5012\u8ba1\u65f6\uff0c\u4e0d\u53d1\u4fe1\u53f7\uff09 \u53d6\u6d88\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u901a\u8fc7 alarm(0) \u8fd4\u56de\u503c \u4e4b\u524d\u6ca1\u6709\u5b9a\u65f6\u5668\uff0c\u8fd4\u56de0 \u4e4b\u524d\u6709\u5b9a\u65f6\u5668\uff0c\u8fd4\u56de\u4e4b\u524d\u7684\u5b9a\u65f6\u5668\u5269\u4f59\u7684\u65f6\u95f4 SIGALARM \uff1a\u9ed8\u8ba4\u7ec8\u6b62 \u5f53\u524d\u7684\u8fdb\u7a0b \uff0c\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e14\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5b9a\u65f6\u5668 \u5b9a\u65f6\u5668\uff0c\u4e0e\u8fdb\u7a0b\u7684\u72b6\u6001\u65e0\u5173\uff08\u81ea\u7136\u5b9a\u65f6\u6cd5\uff09\u3002\u65e0\u8bba\u8fdb\u7a0b\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\uff0calarm\u90fd\u4f1a\u8ba1\u65f6\uff0c\u5373 \u51fd\u6570\u4e0d\u963b\u585e #include <stdio.h> #include <unistd.h> int main() { int seconds = alarm(5); printf(\"seconds = %d\\n\", seconds); // 0 sleep(2); seconds = alarm(2); // \u4e0d\u963b\u585e printf(\"seconds = %d\\n\", seconds); // 3 while(1) { } return 0; } int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value); \u4f7f\u7528 man 2 setitimer \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff08\u95f9\u949f\uff09\u3002\u53ef\u4ee5\u66ff\u4ee3alarm\u51fd\u6570\u3002\u7cbe\u5ea6\u5fae\u5999us\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5468\u671f\u6027\u5b9a\u65f6 \u53c2\u6570 which : \u5b9a\u65f6\u5668\u4ee5\u4ec0\u4e48\u65f6\u95f4\u8ba1\u65f6 ITIMER_REAL : \u771f\u5b9e\u65f6\u95f4\uff0c\u65f6\u95f4\u5230\u8fbe\uff0c\u53d1\u9001 SIGALRM (\u5e38\u7528) ITIMER_VIRTUAL : \u7528\u6237\u65f6\u95f4\uff0c\u65f6\u95f4\u5230\u8fbe\uff0c\u53d1\u9001 SIGVTALRM ITIMER_PROF : \u4ee5\u8be5\u8fdb\u7a0b\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e0b\u6240\u6d88\u8017\u7684\u65f6\u95f4\u6765\u8ba1\u7b97\uff0c\u65f6\u95f4\u5230\u8fbe\uff0c\u53d1\u9001 SIGPROF new_value : \u8bbe\u7f6e\u5b9a\u65f6\u5668\u7684\u5c5e\u6027 old_value \uff1a\u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u5b9a\u65f6\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\uff0c\u6307\u5b9aNULL \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c\u5931\u8d25 -1 \u5e76\u8bbe\u7f6e\u9519\u8bef\u53f7 struct itimerval ```c struct itimerval { // \u5b9a\u65f6\u5668\u7684\u7ed3\u6784\u4f53 struct timeval it_interval; // \u6bcf\u4e2a\u9636\u6bb5\u7684\u65f6\u95f4\uff0c\u95f4\u9694\u65f6\u95f4 struct timeval it_value; // \u5ef6\u8fdf\u591a\u957f\u65f6\u95f4\u6267\u884c\u5b9a\u65f6\u5668 }; struct timeval { // \u65f6\u95f4\u7684\u7ed3\u6784\u4f53 time_t tv_sec; // \u79d2\u6570 suseconds_t tv_usec; // \u5fae\u79d2 }; // \u8fc7it_value\u79d2\u540e\uff0c\u6bcf\u9694it_interval\u79d2\u5b9a\u65f6\u4e00\u6b21 ``` \u5b9e\u73b0 \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 =>\u56e0\u4e3a\u6ca1\u6709 \u4fe1\u53f7\u6355\u6349 \uff0c\u6240\u4ee5\u8fd8\u6ca1\u6709\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c ```c #include #include #include // \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 int main() { struct itimerval new_value; // \u8bbe\u7f6e\u95f4\u9694\u7684\u65f6\u95f4 new_value.it_interval.tv_sec = 2; new_value.it_interval.tv_usec = 0; // \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u65f6\u95f4,3\u79d2\u4e4b\u540e\u5f00\u59cb\u7b2c\u4e00\u6b21\u5b9a\u65f6 new_value.it_value.tv_sec = 3; new_value.it_value.tv_usec = 0; int ret = setitimer(ITIMER_REAL, &new_value, NULL); // \u975e\u963b\u585e\u7684 printf(\"\u5b9a\u65f6\u5668\u5f00\u59cb\u4e86...\\n\"); if(ret == -1) { perror(\"setitimer\"); exit(0); } getchar(); return 0; } ``` \u4fe1\u53f7\u6355\u6349\u51fd\u6570 signal sighandler_t signal(int signum, sighandler_t handler); \u4f7f\u7528 man 2 signal \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u8bbe\u7f6e\u67d0\u4e2a\u4fe1\u53f7\u7684\u6355\u6349\u884c\u4e3a \u53c2\u6570 signum : \u8981\u6355\u6349\u7684\u4fe1\u53f7 handler : \u6355\u6349\u5230\u4fe1\u53f7\u8981\u5982\u4f55\u5904\u7406 SIG_IGN \uff1a \u5ffd\u7565\u4fe1\u53f7 SIG_DFL \uff1a \u4f7f\u7528\u4fe1\u53f7\u9ed8\u8ba4\u7684\u884c\u4e3a \u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570 \u8fd4\u56de\u503c \u6210\u529f\uff0c\u8fd4\u56de\u4e0a\u4e00\u6b21\u6ce8\u518c\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u5730\u5740\u3002\u7b2c\u4e00\u6b21\u8c03\u7528\u8fd4\u56deNULL \u5931\u8d25\uff0c\u8fd4\u56deSIG_ERR\uff0c\u8bbe\u7f6e\u9519\u8bef\u53f7 \u6ce8\u610f\uff1a\u8fd4\u56de\u503c\u5b9a\u4e49\u5728\u5b8f __USE_GNU \u4e2d\uff0c\u9700\u8981\u6307\u5b9a\u6216\u8005\u76f4\u63a5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528 typedef __sighandler_t sighandler_t; SIGKILL \u548c SIGSTOP \u4e0d\u80fd\u88ab\u6355\u6349\uff0c\u4e0d\u80fd\u88ab\u5ffd\u7565 \u5b8c\u5584 \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21\u7684\u5b9a\u65f6\u5668\u529f\u80fd ```c #include #include #include #include void myalarm(int num) { printf(\"\u6355\u6349\u5230\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\uff1a%d\\n\", num); printf(\"xxxxxxx\\n\"); } // \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 int main() { // \u6ce8\u518c\u4fe1\u53f7\u6355\u6349 // signal(SIGALRM, SIG_IGN); // signal(SIGALRM, SIG_DFL); // void (*sighandler_t)(int); \u51fd\u6570\u6307\u9488\uff0cint\u7c7b\u578b\u7684\u53c2\u6570\u8868\u793a\u6355\u6349\u5230\u7684\u4fe1\u53f7\u7684\u503c // \u6355\u6349\u7684\u4fe1\u53f7\u53f3\u5b9a\u65f6\u5668\u53d1\u51fa signal(SIGALRM, myalarm); struct itimerval new_value; // \u8bbe\u7f6e\u95f4\u9694\u7684\u65f6\u95f4 new_value.it_interval.tv_sec = 2; new_value.it_interval.tv_usec = 0; // \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u65f6\u95f4,3\u79d2\u4e4b\u540e\u5f00\u59cb\u7b2c\u4e00\u6b21\u5b9a\u65f6 new_value.it_value.tv_sec = 3; new_value.it_value.tv_usec = 0; int ret = setitimer(ITIMER_REAL, &new_value, NULL); // \u975e\u963b\u585e\u7684 printf(\"\u5b9a\u65f6\u5668\u5f00\u59cb\u4e86...\\n\"); if(ret == -1) { perror(\"setitimer\"); exit(0); } getchar(); return 0; } ``` sigaction int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact); \u4f7f\u7528 man 2 sigaction \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u68c0\u67e5\u6216\u8005\u6539\u53d8\u4fe1\u53f7\u7684\u5904\u7406\uff0c\u5373\u4fe1\u53f7\u6355\u6349 \u53c2\u6570 signum : \u9700\u8981\u6355\u6349\u7684\u4fe1\u53f7\u7684\u7f16\u53f7\u6216\u8005\u5b8f\u503c\uff08\u4fe1\u53f7\u7684\u540d\u79f0\uff09 act \uff1a\u6355\u6349\u5230\u4fe1\u53f7\u4e4b\u540e\u7684\u5904\u7406\u52a8\u4f5c oldact : \u4e0a\u4e00\u6b21\u5bf9\u4fe1\u53f7\u6355\u6349\u76f8\u5173\u7684\u8bbe\u7f6e\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\uff0c\u8bbe\u7f6e\u4e3aNULL \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 struct sigaction c struct sigaction { // \u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u7684\u51fd\u6570\u5c31\u662f\u4fe1\u53f7\u6355\u6349\u5230\u4e4b\u540e\u7684\u5904\u7406\u51fd\u6570 void (*sa_handler)(int); // \u4e0d\u5e38\u7528 void (*sa_sigaction)(int, siginfo_t *, void *); // \u4e34\u65f6\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u5728\u4fe1\u53f7\u6355\u6349\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e34\u65f6\u963b\u585e\u67d0\u4e9b\u4fe1\u53f7\u3002 sigset_t sa_mask; // \u4f7f\u7528\u54ea\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u5bf9\u6355\u6349\u5230\u7684\u4fe1\u53f7\u8fdb\u884c\u5904\u7406 // \u8fd9\u4e2a\u503c\u53ef\u4ee5\u662f0\uff0c\u8868\u793a\u4f7f\u7528sa_handler,\u4e5f\u53ef\u4ee5\u662fSA_SIGINFO\u8868\u793a\u4f7f\u7528sa_sigaction int sa_flags; // \u88ab\u5e9f\u5f03\u6389\u4e86 void (*sa_restorer)(void); }; #include <sys/time.h> #include <stdio.h> #include <stdlib.h> #include <signal.h> void myalarm(int num) { printf(\"\u6355\u6349\u5230\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\uff1a%d\\n\", num); printf(\"xxxxxxx\\n\"); } // \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 int main() { struct sigaction act; act.sa_flags = 0; act.sa_handler = myalarm; sigemptyset(&act.sa_mask); // \u6e05\u7a7a\u4e34\u65f6\u963b\u585e\u4fe1\u53f7\u96c6 // \u6ce8\u518c\u4fe1\u53f7\u6355\u6349 sigaction(SIGALRM, &act, NULL); struct itimerval new_value; // \u8bbe\u7f6e\u95f4\u9694\u7684\u65f6\u95f4 new_value.it_interval.tv_sec = 2; new_value.it_interval.tv_usec = 0; // \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u65f6\u95f4,3\u79d2\u4e4b\u540e\u5f00\u59cb\u7b2c\u4e00\u6b21\u5b9a\u65f6 new_value.it_value.tv_sec = 3; new_value.it_value.tv_usec = 0; int ret = setitimer(ITIMER_REAL, &new_value, NULL); // \u975e\u963b\u585e\u7684 printf(\"\u5b9a\u65f6\u5668\u5f00\u59cb\u4e86...\\n\"); if(ret == -1) { perror(\"setitimer\"); exit(0); } // getchar(); while(1); return 0; } signal\u548csigaction\u533a\u522b \u53c2\u6570\u533a\u522b \u7248\u672c\u533a\u522b\uff0c signal \u5728\u4e0d\u540c\u7248\u672cLinux\u4e2d\uff0c\u884c\u4e3a\u4e0d\u4e00\u81f4\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528 sigaction \uff08 ubutun \u4e0b\u4e24\u8005\u4e00\u81f4\uff09 \u5185\u6838\u5b9e\u73b0\u4fe1\u53f7\u6355\u6349\u7684\u8fc7\u7a0b ==\u672a\u89e3\u51b3== signal \u4e2d\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a getchar() \u963b\u585e\u4fe1\u53f7\uff0c\u800c sigaction \u4e2d\u8c03\u7528\u51e0\u6b21\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u8981\u4f7f\u7528\u591a\u5c11\u4e2a getchar() \u4fe1\u53f7\u96c6 \u57fa\u672c\u6982\u5ff5 \u4f7f\u7528 man 3 sigset \u67e5\u770b\u5e2e\u52a9 \u8bb8\u591a\u4fe1\u53f7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u9700\u8981\u80fd\u8868\u793a\u4e00\u7ec4\u4e0d\u540c\u7684\u4fe1\u53f7\uff0c\u591a\u4e2a\u4fe1\u53f7\u53ef\u4f7f\u7528\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u4fe1\u53f7\u96c6\u7684\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\uff0c\u5176\u7cfb\u7edf\u6570\u636e\u7c7b\u578b\u4e3a sigset_t \u5728 PCB \u4e2d\u6709\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4fe1\u53f7\u96c6\u3002\u4e00\u4e2a\u79f0\u4e4b\u4e3a \u963b\u585e\u4fe1\u53f7\u96c6 \uff0c\u53e6\u4e00\u4e2a\u79f0\u4e4b\u4e3a \u672a\u51b3\u4fe1\u53f7\u96c6 \u3002\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u96c6\u90fd\u662f \u5185\u6838\u4f7f\u7528\u4f4d\u56fe\u673a\u5236\u6765\u5b9e\u73b0 \u7684\u3002\u4f46\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u5141\u8bb8\u6211\u4eec\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u96c6\u8fdb\u884c\u4f4d\u64cd\u4f5c\u3002\u800c\u9700\u81ea\u5b9a\u4e49\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\uff0c\u501f\u52a9\u4fe1\u53f7\u96c6\u64cd\u4f5c\u51fd\u6570\u6765\u5bf9 PCB \u4e2d\u7684\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u96c6\u8fdb\u884c\u4fee\u6539 \u4fe1\u53f7\u7684 \u672a\u51b3 \u662f\u4e00\u79cd\u72b6\u6001\uff0c\u6307\u7684\u662f \u4ece\u4fe1\u53f7\u7684\u4ea7\u751f\u5230\u4fe1\u53f7\u88ab\u5904\u7406\u524d\u7684\u8fd9\u4e00\u6bb5\u65f6\u95f4 \u4fe1\u53f7\u7684 \u963b\u585e \u662f\u4e00\u4e2a\u5f00\u5173\u52a8\u4f5c\uff0c\u6307\u7684\u662f \u963b\u6b62\u4fe1\u53f7\u88ab\u5904\u7406\uff0c\u4f46\u4e0d\u662f\u963b\u6b62\u4fe1\u53f7\u4ea7\u751f \u3002\u4fe1\u53f7\u7684\u963b\u585e\u5c31\u662f\u8ba9\u7cfb\u7edf\u6682\u65f6\u4fdd\u7559\u4fe1\u53f7\u7559\u5f85\u4ee5\u540e\u53d1\u9001\u3002\u7531\u4e8e\u53e6\u5916\u6709\u529e\u6cd5\u8ba9\u7cfb\u7edf\u5ffd\u7565\u4fe1\u53f7\uff0c\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\u4fe1\u53f7\u7684\u963b\u585e\u53ea\u662f\u6682\u65f6\u7684\uff0c\u53ea\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u6253\u65ad\u654f\u611f\u7684\u64cd\u4f5c \u963b\u585e\u4fe1\u53f7\u96c6\u4e0e\u975e\u963b\u585e\u4fe1\u53f7\u96c6\u8bf4\u660e \u7528\u6237\u901a\u8fc7\u952e\u76d8 Ctrl + C , \u4ea7\u751f2\u53f7\u4fe1\u53f7 SIGINT (\u4fe1\u53f7\u88ab\u521b\u5efa) \u4fe1\u53f7\u4ea7\u751f\u4f46\u662f\u6ca1\u6709\u88ab\u5904\u7406 \uff08\u672a\u51b3\uff09 \u5728\u5185\u6838\u4e2d\u5c06\u6240\u6709\u7684\u6ca1\u6709\u88ab\u5904\u7406\u7684\u4fe1\u53f7\u5b58\u50a8\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d \uff08\u672a\u51b3\u4fe1\u53f7\u96c6\uff09 SIGINT \u4fe1\u53f7\u72b6\u6001\u88ab\u5b58\u50a8\u5728\u7b2c\u4e8c\u4e2a\u6807\u5fd7\u4f4d\u4e0a \u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7684\u503c\u4e3a0\uff0c \u8bf4\u660e\u4fe1\u53f7\u4e0d\u662f\u672a\u51b3\u72b6\u6001 \u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7684\u503c\u4e3a1\uff0c \u8bf4\u660e\u4fe1\u53f7\u5904\u4e8e\u672a\u51b3\u72b6\u6001 \u8fd9\u4e2a\u672a\u51b3\u72b6\u6001\u7684\u4fe1\u53f7\uff0c\u9700\u8981\u88ab\u5904\u7406\uff0c\u5904\u7406\u4e4b\u524d\u9700\u8981\u548c\u53e6\u4e00\u4e2a\u4fe1\u53f7\u96c6\uff08\u963b\u585e\u4fe1\u53f7\u96c6\uff09\uff0c\u8fdb\u884c\u6bd4\u8f83 \u963b\u585e\u4fe1\u53f7\u96c6\u9ed8\u8ba4\u4e0d\u963b\u585e\u4efb\u4f55\u7684\u4fe1\u53f7 \u5982\u679c\u60f3\u8981\u963b\u585e\u67d0\u4e9b\u4fe1\u53f7\u9700\u8981\u7528\u6237\u8c03\u7528\u7cfb\u7edf\u7684API \u5728\u5904\u7406\u7684\u65f6\u5019\u548c\u963b\u585e\u4fe1\u53f7\u96c6\u4e2d\u7684\u6807\u5fd7\u4f4d\u8fdb\u884c\u67e5\u8be2\uff0c\u770b\u662f\u4e0d\u662f\u5bf9\u8be5\u4fe1\u53f7\u8bbe\u7f6e\u963b\u585e\u4e86 \u5982\u679c\u6ca1\u6709\u963b\u585e\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5c31\u88ab\u5904\u7406 \u5982\u679c\u963b\u585e\u4e86\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5c31\u7ee7\u7eed\u5904\u4e8e\u672a\u51b3\u72b6\u6001\uff0c\u76f4\u5230\u963b\u585e\u89e3\u9664\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5c31\u88ab\u5904\u7406 \u64cd\u4f5c\u81ea\u5b9a\u4e49\u4fe1\u53f7\u96c6\u51fd\u6570(sigemptyset\u7b49) \u4f7f\u7528 man 3 sigemptyset \u67e5\u770b\u5e2e\u52a9 int sigemptyset(sigset_t *set); \u529f\u80fd\uff1a\u6e05\u7a7a\u4fe1\u53f7\u96c6\u4e2d\u7684\u6570\u636e\uff0c\u5c06\u4fe1\u53f7\u96c6\u4e2d\u7684\u6240\u6709\u7684\u6807\u5fd7\u4f4d\u7f6e\u4e3a0 \u53c2\u6570\uff1a set \uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigfillset(sigset_t *set); \u529f\u80fd\uff1a\u5c06\u4fe1\u53f7\u96c6\u4e2d\u7684\u6240\u6709\u7684\u6807\u5fd7\u4f4d\u7f6e\u4e3a1 \u53c2\u6570\uff1a set \uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigaddset(sigset_t *set, int signum); \u529f\u80fd\uff1a\u8bbe\u7f6e\u4fe1\u53f7\u96c6\u4e2d\u7684\u67d0\u4e00\u4e2a\u4fe1\u53f7\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u4e3a1\uff0c\u8868\u793a\u963b\u585e\u8fd9\u4e2a\u4fe1\u53f7 \u53c2\u6570 set \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 signum \uff1a\u9700\u8981\u8bbe\u7f6e\u963b\u585e\u7684\u90a3\u4e2a\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigdelset(sigset_t *set, int signum); \u529f\u80fd\uff1a\u8bbe\u7f6e\u4fe1\u53f7\u96c6\u4e2d\u7684\u67d0\u4e00\u4e2a\u4fe1\u53f7\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u4e3a0\uff0c\u8868\u793a\u4e0d\u963b\u585e\u8fd9\u4e2a\u4fe1\u53f7 \u53c2\u6570 set \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 signum \uff1a\u9700\u8981\u8bbe\u7f6e\u4e0d\u963b\u585e\u7684\u90a3\u4e2a\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigismember(const sigset_t *set, int signum); \u529f\u80fd\uff1a\u5224\u65ad\u67d0\u4e2a\u4fe1\u53f7\u662f\u5426\u963b\u585e \u53c2\u6570 set \uff1a\u4f20\u5165\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 signum \uff1a\u9700\u8981\u5224\u65ad\u7684\u90a3\u4e2a\u4fe1\u53f7 \u8fd4\u56de\u503c 1 \uff1a signum \u88ab\u963b\u585e 0 \uff1a signum \u4e0d\u963b\u585e -1 \uff1a \u5931\u8d25 #include <signal.h> #include <stdio.h> int main() { // \u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u96c6 sigset_t set; // \u6e05\u7a7a\u4fe1\u53f7\u96c6\u7684\u5185\u5bb9 sigemptyset(&set); // \u5224\u65ad SIGINT \u662f\u5426\u5728\u4fe1\u53f7\u96c6 set \u91cc int ret = sigismember(&set, SIGINT); if(ret == 0) { printf(\"SIGINT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGINT \u963b\u585e\\n\"); } // \u6dfb\u52a0\u51e0\u4e2a\u4fe1\u53f7\u5230\u4fe1\u53f7\u96c6\u4e2d sigaddset(&set, SIGINT); sigaddset(&set, SIGQUIT); // \u5224\u65adSIGINT\u662f\u5426\u5728\u4fe1\u53f7\u96c6\u4e2d ret = sigismember(&set, SIGINT); if(ret == 0) { printf(\"SIGINT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGINT \u963b\u585e\\n\"); } // \u5224\u65adSIGQUIT\u662f\u5426\u5728\u4fe1\u53f7\u96c6\u4e2d ret = sigismember(&set, SIGQUIT); if(ret == 0) { printf(\"SIGQUIT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGQUIT \u963b\u585e\\n\"); } // \u4ece\u4fe1\u53f7\u96c6\u4e2d\u5220\u9664\u4e00\u4e2a\u4fe1\u53f7 sigdelset(&set, SIGQUIT); // \u5224\u65adSIGQUIT\u662f\u5426\u5728\u4fe1\u53f7\u96c6\u4e2d ret = sigismember(&set, SIGQUIT); if(ret == 0) { printf(\"SIGQUIT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGQUIT \u963b\u585e\\n\"); } return 0; } \u64cd\u4f5c\u5185\u6838\u4fe1\u53f7\u96c6\u51fd\u6570(sigprocmask & sigpending) int sigprocmask(int how, const sigset_t *set, sigset_t *oldset); \u4f7f\u7528 man 2 sigprocmask \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5c06\u81ea\u5b9a\u4e49\u4fe1\u53f7\u96c6\u4e2d\u7684\u6570\u636e\u8bbe\u7f6e\u5230\u5185\u6838\u4e2d\uff08\u8bbe\u7f6e\u963b\u585e\uff0c\u89e3\u9664\u963b\u585e\uff0c\u66ff\u6362\uff09 \u53c2\u6570 how : \u5982\u4f55\u5bf9\u5185\u6838\u963b\u585e\u4fe1\u53f7\u96c6\u8fdb\u884c\u5904\u7406 SIG_BLOCK : \u5c06\u7528\u6237\u8bbe\u7f6e\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u6dfb\u52a0\u5230\u5185\u6838\u4e2d\uff0c\u5185\u6838\u4e2d\u539f\u6765\u7684\u6570\u636e\u4e0d\u53d8\u3002\u5047\u8bbe\u5185\u6838\u4e2d\u9ed8\u8ba4\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u662fmask\uff0c \u76f8\u5f53\u4e8e mask | set SIG_UNBLOCK : \u6839\u636e\u7528\u6237\u8bbe\u7f6e\u7684\u6570\u636e\uff0c\u5bf9\u5185\u6838\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u89e3\u9664\u963b\u585e\u3002\u76f8\u5f53\u4e8e mask &= ~set SIG_SETMASK \uff1a\u8986\u76d6\u5185\u6838\u4e2d\u539f\u6765\u7684\u503c set \uff1a\u5df2\u7ecf\u521d\u59cb\u5316\u597d\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\u96c6 oldset : \u4fdd\u5b58\u8bbe\u7f6e\u4e4b\u524d\u7684\u5185\u6838\u4e2d\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u7684\u72b6\u6001\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\uff0c\u8bbe\u7f6e\u4e3a NULL \u5373\u53ef \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigpending(sigset_t *set); \u4f7f\u7528 man 2 sigpending \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u83b7\u53d6\u5185\u6838\u4e2d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6 \u53c2\u6570\uff1aset\uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u4fdd\u5b58\u7684\u662f\u5185\u6838\u4e2d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6\u4e2d\u7684\u4fe1\u606f \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 #include <stdio.h> #include <signal.h> #include <stdlib.h> #include <unistd.h> int main() { // \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u4fe1\u53f7\u96c6 sigset_t set; // \u6e05\u7a7a\u4fe1\u53f7\u96c6 sigemptyset(&set); // \u8bbe\u7f6e2 3\u53f7\u4fe1\u53f7\u963b\u585e sigaddset(&set, SIGINT); sigaddset(&set, SIGQUIT); // \u4fee\u6539\u5185\u6838\u4e2d\u7684\u963b\u585e\u4fe1\u53f7\u96c6 sigprocmask(SIG_BLOCK, &set, NULL); int num = 0; // \u5faa\u73af\u83b7\u53d6\u5f53\u524d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6\u7684\u6570\u636e while (1) { // \u8ba1\u6570\uff0c\u7528\u4ee5\u9000\u51fa\u5faa\u73af num++; sigset_t pendingset; // \u6e05\u7a7a sigemptyset(&pendingset); // \u83b7\u53d6\u5f53\u524d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6\u7684\u6570\u636e sigpending(&pendingset); // \u904d\u5386\u524d32\u4f4d for(int i = 1; i <= 31; i++) { if(sigismember(&pendingset, i) == 1) { printf(\"1\"); }else if(sigismember(&pendingset, i) == 0) { printf(\"0\"); }else { perror(\"sigismember\"); exit(0); } } printf(\"\\n\"); sleep(1); if(num == 10) { // \u89e3\u9664\u963b\u585e sigprocmask(SIG_UNBLOCK, &set, NULL); } } return 0; } SIGCHLD\u4fe1\u53f7 \u57fa\u672c\u4ecb\u7ecd \u4f5c\u7528\uff1a\u89e3\u51b3 \u50f5\u5c38\u8fdb\u7a0b\u95ee\u9898 \uff0c\u80fd\u591f\u5728\u4e0d\u963b\u585e\u7236\u8fdb\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90 \u5b9e\u4f8b\uff1a\u50f5\u5c38\u95ee\u9898\u89e3\u51b3 #include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <signal.h> #include <sys/wait.h> void myalarm(int num) { printf(\"\u6355\u6349\u5230\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\uff1a%d\\n\", num); // \u56de\u6536\u5b50\u8fdb\u7a0bPCB\u7684\u8d44\u6e90 // \u56e0\u4e3a\u53ef\u80fd\u591a\u4e2a\u5b50\u8fdb\u7a0b\u540c\u65f6\u6b7b\u4e86\uff0c\u6240\u4ee5\u4f7f\u7528while\u5faa\u73af // \u4e0d\u4f7f\u7528wait\u662f\u56e0\u4e3a\u4f1a\u9020\u6210\u963b\u585e\uff0c\u7236\u8fdb\u7a0b\u4e0d\u80fd\u7ee7\u7eed // \u4f7f\u7528waitpid\u53ef\u4ee5\u8bbe\u7f6e\u975e\u963b\u585e while (1) { int ret = waitpid(-1, NULL, WNOHANG); if(ret > 0) { // \u56de\u6536\u4e00\u4e2a\u5b50\u8fdb\u7a0b printf(\"child die , pid = %d\\n\", ret); } else if(ret == 0) { // \u8bf4\u660e\u8fd8\u6709\u5b50\u8fdb\u7a0b\u6d3b\u7740 break; } else if(ret == -1) { // \u6ca1\u6709\u5b50\u8fdb\u7a0b break; } } } int main() { // \u63d0\u524d\u8bbe\u7f6e\u597d\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u963b\u585eSIGCHLD\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u5b50\u8fdb\u7a0b\u5f88\u5feb\u7ed3\u675f\uff0c\u7236\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u6ce8\u518c\u5b8c\u4fe1\u53f7\u6355\u6349 sigset_t set; sigemptyset(&set); sigaddset(&set, SIGCHLD); sigprocmask(SIG_BLOCK, &set, NULL); pid_t pid; // \u521b\u5efa\u4e00\u4e9b\u5b50\u8fdb\u7a0b for (int i = 0; i < 20; i++) { pid = fork(); // \u5982\u679c\u662f\u5b50\u8fdb\u7a0b\uff0c\u4e0d\u5728\u4f5c\u4e3a\u7236\u8fdb\u7a0b\u7ee7\u7eed\u521b\u5efa\u5b50\u8fdb\u7a0b if (pid == 0) { break; } } // \u5b50\u8fdb\u7a0b\u5148\u7ed3\u675f\uff0c\u7236\u8fdb\u7a0b\u5faa\u73af=>\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b if (pid > 0) { // \u7236\u8fdb\u7a0b // \u4f7f\u7528sigaction\u6355\u6349\u5b50\u8fdb\u7a0b\u6b7b\u4ea1\u65f6\u53d1\u9001\u7684SIGCHLD\u4fe1\u53f7 struct sigaction act; act.sa_flags = 0; act.sa_handler = myalarm; sigemptyset(&act.sa_mask); sigaction(SIGCHLD, &act, NULL); // \u6ce8\u518c\u5b8c\u4fe1\u53f7\u6355\u6349\u4ee5\u540e\uff0c\u89e3\u9664\u963b\u585e sigprocmask(SIG_UNBLOCK, &set, NULL); while (1) { printf(\"parent process : %d\\n\", getpid()); sleep(2); } } else { // \u5b50\u8fdb\u7a0b printf(\"child process : %d\\n\", getpid()); } return 0; } \u6ce8\u610f \u53ef\u80fd\u4f1a\u51fa\u73b0\u6bb5\u9519\u8bef\uff08\u4e0d\u4e00\u5b9a\u80fd\u590d\u73b0\uff09 \u539f\u56e0\uff1a\u5728\u6355\u83b7\u4fe1\u53f7\u6ce8\u518c\u524d\uff0c\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u6267\u884c\u5b8c \u5982\u679c\u4ece\u5f00\u59cb\u6ce8\u518c\u4fe1\u53f7\u5230\u6ce8\u518c\u6210\u529f\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u6709n\u4e2aSIGCHID\u4fe1\u53f7\u4ea7\u751f\u7684\u8bdd\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u4ea7\u751f\u7684SIGCHID\u4f1a\u62a2\u5148\u5c06\u672a\u51b3\u4f4d\u7f6e\u4e3a1\uff0c\u4f59\u4e0b\u7684n-1\u4e2aSIGCHID\u88ab\u4e22\u5f03\uff0c\u7136\u540e\u5f53\u963b\u585e\u89e3\u9664\u4e4b\u540e\uff0c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53d1\u73b0\u8fd9\u65f6\u5019\u5bf9\u5e94\u4fe1\u53f7\u7684\u672a\u51b3\u4f4d\u4e3a1\uff0c\u7ee7\u800c\u6267\u884c\u51fd\u6570\u5904\u7406\u8be5\u4fe1\u53f7\uff0c\u5904\u7406\u51fd\u6570\u4e2d\u7684while\u5faa\u73af\u987a\u5e26\u5c06\u5176\u4ed6n-1\u5b50\u8fdb\u7a0b\u4e5f\u4e00\u7f51\u6253\u5c3d\u4e86\uff0c\u5728\u8fd9\u671f\u95f4\u672a\u51b3\u4f4d\u7684\u72b6\u6001\u53ea\u7ecf\u5386\u4e86\u4e24\u6b21\u53d8\u5316\uff0c\u53730->1->0 \u6355\u6349\u4e00\u6b21\u53ef\u80fd\u4f1a\u56de\u6536\u591a\u4e2a\u5b50\u8fdb\u7a0b \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u5171\u4eab\u5185\u5b58 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/08 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u5171\u4eab\u5185\u5b58 \u57fa\u672c\u6982\u5ff5 \u5171\u4eab\u5185\u5b58\u5141\u8bb8\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u7269\u7406\u5185\u5b58\u7684\u540c\u4e00\u5757\u533a\u57df\uff08\u901a\u5e38\u88ab\u79f0\u4e3a\u6bb5\uff09 \u3002\u7531\u4e8e\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6bb5\u4f1a\u79f0\u4e3a\u4e00\u4e2a\u8fdb\u7a0b\u7528\u6237\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u8fd9\u79cd IPC \u673a\u5236\u65e0\u9700\u5185\u6838\u4ecb\u5165\u3002\u6240\u6709\u9700\u8981\u505a\u7684\u5c31\u662f\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u6570\u636e\u590d\u5236\u8fdb\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u5e76\u4e14\u8fd9\u90e8\u5206\u6570\u636e\u4f1a\u5bf9\u5176\u4ed6\u6240\u6709\u5171\u4eab\u540c\u4e00\u4e2a\u6bb5\u7684\u8fdb\u7a0b\u53ef\u7528 \u4e0e\u7ba1\u9053\u7b49\u8981\u6c42\u53d1\u9001\u8fdb\u7a0b\u5c06\u6570\u636e\u4ece\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u590d\u5236\u8fdb\u5185\u6838\u5185\u5b58\u548c\u63a5\u6536\u8fdb\u7a0b\u5c06\u6570\u636e\u4ece\u5185\u6838\u5185\u5b58\u590d\u5236\u8fdb\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u7684\u505a\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u79cd IPC \u6280\u672f\u7684\u901f\u5ea6\u66f4\u5feb \u5171\u4eab\u5185\u5b58\u4f7f\u7528\u6b65\u9aa4 \u8c03\u7528 shmget() \u521b\u5efa\u4e00\u4e2a\u65b0\u5171\u4eab\u5185\u5b58\u6bb5\u6216\u53d6\u5f97\u4e00\u4e2a\u65e2\u6709\u5171\u4eab\u5185\u5b58\u6bb5\u7684\u6807\u8bc6\u7b26\uff08\u5373\u7531\u5176\u4ed6\u8fdb\u7a0b\u521b\u5efa\u7684\u5171\u4eab\u5185\u5b58\u6bb5\uff09\u3002\u8fd9\u4e2a\u8c03\u7528\u5c06\u8fd4\u56de\u540e\u7eed\u8c03\u7528\u4e2d\u9700\u8981\u7528\u5230\u7684\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26 \u4f7f\u7528 shmat() \u6765\u9644\u4e0a\u5171\u4eab\u5185\u5b58\u6bb5\uff0c\u5373\u4f7f\u8be5\u6bb5\u6210\u4e3a\u8c03\u7528\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7684\u4e00\u90e8\u5206 \u6b64\u523b\u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u50cf\u5bf9\u5f85\u5176\u4ed6\u53ef\u7528\u5185\u5b58\u90a3\u6837\u5bf9\u5f85\u8fd9\u4e2a\u5171\u4eab\u5185\u5b58\u6bb5\u3002\u4e3a\u5f15\u7528\u8fd9\u5757\u5171\u4eab\u5185\u5b58\uff0c\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u7531 shmat() \u8c03\u7528\u8fd4\u56de\u7684 addr \u503c\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u8be5\u5171\u4eab\u5185\u5b58\u6bb5\u7684\u8d77\u70b9\u7684\u6307\u9488 \u8c03\u7528 shmdt() \u6765\u5206\u79bb\u5171\u4eab\u5185\u5b58\u6bb5\u3002\u5728\u8fd9\u4e2a\u8c03\u7528\u4e4b\u540e\uff0c\u8fdb\u7a0b\u5c31\u65e0\u6cd5\u518d\u5f15\u7528\u8fd9\u5757\u5171\u4eab\u5185\u5b58\u4e86\u3002\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u5728\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u4f1a\u81ea\u52a8\u5b8c\u6210\u8fd9\u4e00\u6b65 \u8c03\u7528 shmctl() \u6765\u5220\u9664\u5171\u4eab\u5185\u5b58\u6bb5\u3002\u53ea\u6709\u5f53\u5f53\u524d\u6240\u6709\u9644\u52a0\u5185\u5b58\u6bb5\u7684\u8fdb\u7a0b\u90fd\u4e0e\u4e4b\u5206\u79bb\u4e4b\u540e\u5185\u5b58\u6bb5\u624d\u4f1a\u9500\u6bc1\u3002\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c\u8fd9\u4e00\u6b65 \u5171\u4eab\u5185\u5b58\u64cd\u4f5c\u51fd\u6570 int shmget(key_t key, size_t size, int shmflg); \u4f7f\u7528 man 2 shmget \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5171\u4eab\u5185\u5b58\u6bb5\uff08\u65b0\u521b\u5efa\u7684\u5185\u5b58\u6bb5\u4e2d\u7684\u6570\u636e\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a0\uff09\uff0c\u6216\u8005\u83b7\u53d6\u4e00\u4e2a\u65e2\u6709\u7684\u5171\u4eab\u5185\u5b58\u6bb5\u7684\u6807\u8bc6 \u53c2\u6570 key \uff1a key_t \u7c7b\u578b\u662f\u4e00\u4e2a\u6574\u5f62\uff0c\u901a\u8fc7\u8fd9\u4e2a\u627e\u5230\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u3002\u4e00\u822c\u4f7f\u7528 16\u8fdb\u5236 \u8868\u793a\uff0c\u975e0\u503c size \uff1a\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f shmflg \uff1a\u5c5e\u6027 \u8bbf\u95ee\u6743\u9650 \u9644\u52a0\u5c5e\u6027\uff1a\u521b\u5efa/\u5224\u65ad\u5171\u4eab\u5185\u5b58\u662f\u4e0d\u662f\u5b58\u5728 \u521b\u5efa\uff1a IPC_CREAT \u5224\u65ad\u5171\u4eab\u5185\u5b58\u662f\u5426\u5b58\u5728\uff1a IPC_EXCL , \u9700\u8981\u548c IPC_CREAT \u4e00\u8d77\u4f7f\u7528\uff0c\u5373 IPC_CREAT | IPC_EXCL | 0664 \u8fd4\u56de\u503c \u5931\u8d25\uff1a-1 \u5e76\u8bbe\u7f6e\u9519\u8bef\u53f7 \u6210\u529f\uff1a>0 \u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684\u5f15\u7528\u7684ID\uff0c\u540e\u9762\u64cd\u4f5c\u5171\u4eab\u5185\u5b58\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u503c void *shmat(int shmid, const void *shmaddr, int shmflg); \u4f7f\u7528 man 2 shmat \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u548c\u5f53\u524d\u7684\u8fdb\u7a0b\u8fdb\u884c\u5173\u8054 \u53c2\u6570 shmid : \u5171\u4eab\u5185\u5b58\u7684\u6807\u8bc6\uff08ID\uff09\uff0c\u7531 shmget \u8fd4\u56de\u503c\u83b7\u53d6 shmaddr : \u7533\u8bf7\u7684\u5171\u4eab\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740\uff0c\u8bbe\u7f6e\u4e3aNULL\uff0c\u8868\u793a\u7531\u5185\u6838\u6307\u5b9a shmflg : \u5bf9\u5171\u4eab\u5185\u5b58\u7684\u64cd\u4f5c \u8bfb \uff1a SHM_RDONLY \uff0c\u5fc5\u987b\u8981\u6709\u8bfb\u6743\u9650 \u8bfb\u5199\uff1a \u6307\u5b9a\u4e3a0\u5373\u4e3a\u6709\u8bfb\u5199\u6743\u9650 \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff1a\u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684\u9996\uff08\u8d77\u59cb\uff09\u5730\u5740\u3002 \u5931\u8d25 (void *) -1 int shmdt(const void *shmaddr); \u4f7f\u7528 man 2 shmdt \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u89e3\u9664\u5f53\u524d\u8fdb\u7a0b\u548c\u5171\u4eab\u5185\u5b58\u7684\u5173\u8054 \u53c2\u6570\uff1a shmaddr \uff1a\u5171\u4eab\u5185\u5b58\u7684\u9996\u5730\u5740 \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c \u5931\u8d25 -1 int shmctl(int shmid, int cmd, struct shmid_ds *buf); \u4f7f\u7528 man 2 shmctl \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\u3002\u5220\u9664\u5171\u4eab\u5185\u5b58\uff0c\u5171\u4eab\u5185\u5b58\u8981\u5220\u9664\u624d\u4f1a\u6d88\u5931\uff0c\u521b\u5efa\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u88ab\u9500\u6bc1\u4e86\u5bf9\u5171\u4eab\u5185\u5b58\u662f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd \u53c2\u6570 shmid \uff1a\u5171\u4eab\u5185\u5b58\u7684ID cmd : \u8981\u505a\u7684\u64cd\u4f5c IPC_STAT \uff1a\u83b7\u53d6\u5171\u4eab\u5185\u5b58\u7684\u5f53\u524d\u7684\u72b6\u6001 IPC_SET \uff1a\u8bbe\u7f6e\u5171\u4eab\u5185\u5b58\u7684\u72b6\u6001 IPC_RMID \uff1a\u6807\u8bb0\u5171\u4eab\u5185\u5b58\u88ab\u9500\u6bc1 buf\uff1a\u9700\u8981\u8bbe\u7f6e\u6216\u8005\u83b7\u53d6\u7684\u5171\u4eab\u5185\u5b58\u7684\u5c5e\u6027\u4fe1\u606f IPC_STAT \uff1a buf \u5b58\u50a8\u6570\u636e IPC_SET \uff1a buf \u4e2d\u9700\u8981\u521d\u59cb\u5316\u6570\u636e\uff0c\u8bbe\u7f6e\u5230\u5185\u6838\u4e2d IPC_RMID \uff1a\u6ca1\u6709\u7528\uff0c\u8bbe\u7f6e\u4e3aNULL key_t ftok(const char *pathname, int proj_id); \u4f7f\u7528 man 3 ftok \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u6839\u636e\u6307\u5b9a\u7684\u8def\u5f84\u540d\uff0c\u548cint\u503c\uff0c\u751f\u6210\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u7684key \u53c2\u6570 pathname \uff1a\u6307\u5b9a\u4e00\u4e2a \u5b58\u5728\u7684\u8def\u5f84 proj_id \uff1aint\u7c7b\u578b\u7684\u503c\uff0c\u4f46\u662f\u7cfb\u7edf\u8c03\u7528\u53ea\u4f1a\u4f7f\u7528\u5176\u4e2d\u76841\u4e2a\u5b57\u8282\uff0c\u8303\u56f4 \uff1a 0-255 \u4e00\u822c\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26 'a' \u8fd4\u56de\u503c\uff1a shmget \u4e2d\u7528\u5230\u7684 key \u5171\u4eab\u5185\u5b58\u64cd\u4f5c\u547d\u4ee4 ipcs ipcs -a \uff1a\u6253\u5370\u5f53\u524d\u7cfb\u7edf\u4e2d \u6240\u6709\u7684 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\u7684\u4fe1\u606f ipcs -m \uff1a\u6253\u5370\u51fa \u4f7f\u7528\u5171\u4eab\u5185\u5b58 \u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4fe1\u606f ipcs -q \uff1a\u6253\u5370\u51fa \u4f7f\u7528\u6d88\u606f\u961f\u5217 \u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4fe1\u606f ipcs -s \uff1a\u6253\u5370\u51fa \u4f7f\u7528\u4fe1\u53f7 \u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4fe1\u606f ipcrm ipcrm -M shmkey \uff1a\u79fb\u9664\u7528 shmkey \u521b\u5efa\u7684 \u5171\u4eab\u5185\u5b58\u6bb5 ipcrm -m shmid \uff1a\u79fb\u9664\u7528 shmid \u6807\u8bc6\u7684 \u5171\u4eab\u5185\u5b58\u6bb5 ipcrm -Q msgkey \uff1a\u79fb\u9664\u7528 msqkey \u521b\u5efa\u7684 \u6d88\u606f\u961f\u5217 ipcrm -q msqid \uff1a\u79fb\u9664\u7528 msqid \u6807\u8bc6\u7684 \u6d88\u606f\u961f\u5217 ipcrm -S semkey \uff1a\u79fb\u9664\u7528 semkey \u521b\u5efa\u7684 \u4fe1\u53f7 ipcrm -s semid \uff1a\u79fb\u9664\u7528 semid \u6807\u8bc6\u7684 \u4fe1\u53f7 \u5b9e\u4f8b\uff1a\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08\u6ce8\u610f\uff09 \u5199\u7aef #include <stdio.h> #include <sys/ipc.h> #include <sys/shm.h> #include <string.h> int main() { // 1. \u521b\u65b0\u65b0\u5171\u4eab\u5185\u5b58 // key\u4e0d\u80fd\u968f\u610f\u6307\u5b9a\uff0c\u6bd4\u5982\u7528key=100\u65f6\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // 2. \u5c06\u8fdb\u7a0b\u4e0e\u5171\u4eab\u5185\u5b58\u5173\u8054 void* ptr = shmat(shmId, NULL, 0); // 3. \u5f80\u5171\u4eab\u5185\u5b58\u4e2d\u5199\u6570\u636e // \u64cd\u4f5c\u5185\u5b58\u53ea\u80fd\u4f7f\u7528memcpy\uff0c\u4f7f\u7528strcpy\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef // strcpy((char*)addr, \"hello, world\"); char* str = \"helloworld\"; printf(\"send : %s\\n\", str); // \u5305\u542b\u7ed3\u675f\u7b26'\\0' memcpy(ptr, str, strlen(str) + 1); // \u4e3a\u4e86\u7a0b\u5e8f\u4e0d\u88ab\u76f4\u63a5\u505c\u6389\uff0c\u5982\u679c\u505c\u6389\uff0c\u90a3\u4e48\u5171\u4eab\u5185\u5b58\u4e0d\u590d\u5b58\u5728 printf(\"\u6309\u4efb\u610f\u952e\u7ee7\u7eed\\n\"); getchar(); // 4. \u5206\u79bb\u5185\u5b58\u6bb5 shmdt(ptr); // 5. \u5220\u9664\u5171\u4eab\u5185\u5b58\u6bb5\uff08\u6807\u8bb0\u5220\u9664\uff09 shmctl(shmId, IPC_RMID, NULL); return 0; } \u8bfb\u7aef #include <stdio.h> #include <sys/ipc.h> #include <sys/shm.h> #include <string.h> int main() { // 1. \u5224\u65ad\u5e76\u83b7\u53d6\u5171\u4eab\u5185\u5b58 // \u6ce8\u610fIPC_EXCL\u53ea\u80fd\u5728\u521b\u5efa\u5171\u4eab\u5185\u5b58\u65f6\u4f7f\u7528 int shmId = shmget(100, 1024, IPC_CREAT); // int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // 2. \u5c06\u8fdb\u7a0b\u4e0e\u5171\u4eab\u5185\u5b58\u5173\u8054 void* addr = shmat(shmId, NULL, 0); // 3. \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u8bfb\u6570\u636e // \u6b64\u65f6\u5b57\u7b26\u4e32\u5185\u5b58\u5373\u4e3a\u5171\u4eab\u5185\u5b58\u5185\u5bb9 printf(\"recv : %s\\n\", (char*)addr); // \u4e3a\u4e86\u7a0b\u5e8f\u4e0d\u88ab\u76f4\u63a5\u505c\u6389\uff0c\u5982\u679c\u505c\u6389\uff0c\u90a3\u4e48\u5171\u4eab\u5185\u5b58\u4e0d\u590d\u5b58\u5728 printf(\"\u6309\u4efb\u610f\u952e\u7ee7\u7eed\\n\"); getchar(); // 4. \u5206\u79bb\u5185\u5b58\u6bb5 shmdt(addr); // 5. \u5220\u9664\u5171\u4eab\u5185\u5b58\u6bb5\uff08\u6807\u8bb0\u5220\u9664\uff09 shmctl(shmId, IPC_RMID, NULL); return 0; } \u6ce8\u610f \u865a\u62df\u673a\u548c\u5b9e\u4f53\u673a \u865a\u62df\u673a\u5728\u542f\u52a8\u60c5\u51b5\u4e0b\uff0c\u6709\u9ed8\u8ba4\u5171\u4eab\u5185\u5b58\uff0c\u800c\u5b9e\u4f53\u673a\uff08\u670d\u52a1\u5668\uff09\u6ca1\u6709 \u865a\u62df\u673a \u5b9e\u4f53\u673a \u6267\u884c\u987a\u5e8f\u4e0e\u4ee3\u7801\uff08\u6ce8\u610f\uff09 \u5148\u6267\u884c\u8bfb\u7aef\uff0c\u518d\u6267\u884c\u5199\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c\u6b64\u65f6 \u8bfb\u7aef\u8bfb\u5230\u7a7a\u6570\u636e\uff0c\u5199\u7aef\u4f1a\u5148\u8f93\u51fa\u5185\u5bb9\u7136\u540e\u4ea7\u751f\u6bb5\u9519\u8bef c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); \u5148\u6267\u884c\u5199\u7aef\uff0c\u518d\u6267\u884c\u8bfb\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c\u6b64\u65f6 \u5199\u7aef\u6b63\u5e38\u5199\u6570\u636e\uff0c\u8bfb\u7aef\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); \u5148\u6267\u884c\u8bfb\u7aef\uff0c\u518d\u6267\u884c\u5199\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c\u6b64\u65f6 \u8bfb\u7aef\u4ea7\u751f\u6bb5\u9519\u8bef\uff0c\u5199\u7aef\u4f1a\u5148\u8f93\u51fa\u5185\u5bb9\u7136\u540e\u4ea7\u751f\u6bb5\u9519\u8bef\u4e14\u5f53\u524dkey=100\uff08\u5341\u516d\u8fdb\u5236\u4e3a64\uff09\u88ab\u5360\u7528\uff0c\u6309\u5148\u5199\u540e\u8bfb\u987a\u5e8f\u65f6\uff0c\u9700\u8981\u624b\u52a8\u56de\u6536\u5185\u5b58\uff0c\u5426\u5219\u4e0d\u80fd\u7ee7\u7eed\u8be5\u5757\u5185\u5b58 \uff0c\u5982\u4e0b\u56fe\u6240\u793a c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT); \u5148\u6267\u884c\u5199\u7aef\uff0c\u518d\u6267\u884c\u8bfb\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c \u6b63\u5e38\u6267\u884c c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT); \u51fa\u73b0\u7684\u539f\u56e0 \u5f53\u5148\u6267\u884c\u8bfb\u7aef\u65f6\uff0c\u6b64\u65f6\u5171\u4eab\u5185\u5b58\u4e2d\u6ca1\u6709\u5185\u5bb9\u6216\u8005\u6ca1\u6709\u521b\u5efa \u603b\u7ed3 \u5e38\u89c1\u95ee\u9898 \u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u77e5\u9053\u4e00\u5757\u5171\u4eab\u5185\u5b58\u88ab\u591a\u5c11\u4e2a\u8fdb\u7a0b\u5173\u8054\uff1f \u5171\u4eab\u5185\u5b58\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 struct shmid_ds \uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u6709\u4e00\u4e2a\u6210\u5458 shm_nattch shm_nattach \u8bb0\u5f55\u4e86\u5173\u8054\u7684\u8fdb\u7a0b\u4e2a\u6570 \u53ef\u4e0d\u53ef\u4ee5\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u591a\u6b21\u5220\u9664 shmctl \u53ef\u4ee5\uff0c\u56e0\u4e3a\u6267\u884c shmctl \u8868\u793a \u6807\u8bb0\u5220\u9664\u5171\u4eab\u5185\u5b58\uff08key\u53d8\u4e3a0\uff09\uff0c\u4e0d\u662f\u76f4\u63a5\u5220\u9664 \u3002\u5f53\u548c\u5171\u4eab\u5185\u5b58\u5173\u8054\u7684\u8fdb\u7a0b\u6570\u4e3a0\u7684\u65f6\u5019\uff0c\u5c31\u771f\u6b63\u88ab\u5220\u9664 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u548c\u5171\u4eab\u5185\u5b58\u53d6\u6d88\u5173\u8054\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u4e0d\u80fd\u7ee7\u7eed\u64cd\u4f5c\u8fd9\u4e2a\u5171\u4eab\u5185\u5b58 \u5171\u4eab\u5185\u5b58\u4e0e\u5185\u5b58\u6620\u5c04\u533a\u522b \u5171\u4eab\u5185\u5b58 \u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\uff0c \u5185\u5b58\u6620\u5c04 \u9700\u8981\u78c1\u76d8\u6587\u4ef6\uff08\u533f\u540d\u6620\u5c04\u9664\u5916\uff09 \u5171\u4eab\u5185\u5b58\u6548\u7387\u66f4\u9ad8 \u5171\u4eab\u5185\u5b58 \u6240\u6709\u7684\u8fdb\u7a0b\u64cd\u4f5c\u7684\u662f\u540c\u4e00\u5757\u5171\u4eab\u5185\u5b58\uff0c \u5185\u5b58\u6620\u5c04 \uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u81ea\u5df1\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u5185\u5b58 \u6570\u636e\u5b89\u5168 \u8fdb\u7a0b\u7a81\u7136\u9000\u51fa\uff1a \u5171\u4eab\u5185\u5b58 \u8fd8\u5b58\u5728\uff0c \u5185\u5b58\u6620\u5c04\u533a \u6d88\u5931 \u8fd0\u884c\u8fdb\u7a0b\u7684\u7535\u8111\u6b7b\u673a(\u5b95\u673a)\uff1a \u5171\u4eab\u5185\u5b58 \u4e2d\u7684\u6570\u636e\u6d88\u5931\uff0c\u5185\u5b58\u6620\u5c04\u533a\u7684\u6570\u636e\u4e5f\u6d88\u5931 \uff0c\u4f46\u7531\u4e8e\u78c1\u76d8\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fd8\u5728\uff0c\u6240\u4ee5 \u53ef\u4ee5\u8bf4\u5185\u5b58\u6620\u5c04\u533a\u7684\u6570\u636e\u8fd8\u5b58\u5728 \u751f\u547d\u5468\u671f \u5171\u4eab\u5185\u5b58 \u8fdb\u7a0b\u9000\u51fa\u65f6\u5171\u4eab\u5185\u5b58\u8fd8\u5728\uff0c\u53ea\u4f1a\u6807\u8bb0\u5220\u9664 \u53ea\u6709\u5f53\u6240\u6709\u7684\u5173\u8054\u7684\u8fdb\u7a0b\u6570\u4e3a0\u6216\u8005\u5173\u673a\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u5220\u9664 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u9000\u51fa\uff0c\u4f1a\u81ea\u52a8\u548c\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u53d6\u6d88\u5173\u8054 \u5185\u5b58\u6620\u5c04\u533a\uff1a\u8fdb\u7a0b\u9000\u51fa\uff0c\u5185\u5b58\u6620\u5c04\u533a\u9500\u6bc1 \u5b88\u62a4\u8fdb\u7a0b \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/09 \u5b88\u62a4 \u8fdb\u7a0b \u524d\u7f6e\u77e5\u8bc6 \u7ec8\u7aef \u5728 UNIX \u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u901a\u8fc7\u7ec8\u7aef\u767b\u5f55\u7cfb\u7edf\u540e\u5f97\u5230\u4e00\u4e2a shell \u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u7ec8\u7aef\u6210\u4e3a shell \u8fdb\u7a0b\u7684 \u63a7\u5236\u7ec8\u7aef\uff08Controlling Terminal\uff09 \uff0c\u8fdb\u7a0b\u4e2d\uff0c\u63a7\u5236\u7ec8\u7aef\u662f\u4fdd\u5b58\u5728 PCB \u4e2d\u7684\u4fe1\u606f\uff0c\u800c fork() \u4f1a\u590d\u5236 PCB \u4e2d\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u7531 shell \u8fdb\u7a0b\u542f\u52a8\u7684\u5176\u5b83\u8fdb\u7a0b\u7684\u63a7\u5236\u7ec8\u7aef\u4e5f\u662f\u8fd9\u4e2a\u7ec8\u7aef \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\u6ca1\u6709\u91cd\u5b9a\u5411\uff09\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u5165\u3001\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u90fd\u6307\u5411\u63a7\u5236\u7ec8\u7aef \u8fdb\u7a0b\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u4e5f\u5c31\u662f\u8bfb\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165 \u8fdb\u7a0b\u5f80\u6807\u51c6\u8f93\u51fa\u6216\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u5199\u4e5f\u5c31\u662f\u8f93\u51fa\u5230\u663e\u793a\u5668\u4e0a \u5728\u63a7\u5236\u7ec8\u7aef\u8f93\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u63a7\u5236\u952e\u53ef\u4ee5\u7ed9\u524d\u53f0\u8fdb\u7a0b\u53d1\u4fe1\u53f7\uff0c\u4f8b\u5982 Ctrl + C \u4f1a\u4ea7\u751f SIGINT \u4fe1\u53f7\uff0c Ctrl + \\ \u4f1a\u4ea7\u751f SIGQUIT \u4fe1\u53f7 \u8fdb\u7a0b\u7ec4 \u8fdb\u7a0b\u7ec4 \u548c \u4f1a\u8bdd \u5728\u8fdb\u7a0b\u4e4b\u95f4\u5f62\u6210\u4e86\u4e00\u79cd\u4e24\u7ea7\u5c42\u6b21\u5173\u7cfb \u8fdb\u7a0b\u7ec4\u662f\u4e00\u7ec4\u76f8\u5173\u8fdb\u7a0b\u7684\u96c6\u5408\uff0c\u4f1a\u8bdd\u662f\u4e00\u7ec4\u76f8\u5173\u8fdb\u7a0b\u7ec4\u7684\u96c6\u5408 \u8fdb\u7a0b\u7ec4\u548c\u4f1a\u8bdd\u662f\u4e3a\u652f\u6301 shell \u4f5c\u4e1a\u63a7\u5236\u800c\u5b9a\u4e49\u7684\u62bd\u8c61\u6982\u5ff5\uff0c\u7528\u6237\u901a\u8fc7 shell \u80fd\u591f\u4ea4\u4e92\u5f0f\u5730\u5728\u524d\u53f0\u6216\u540e\u53f0\u8fd0\u884c\u547d\u4ee4 \u8fdb\u7a0b\u7ec4\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5171\u4eab\u540c\u4e00\u8fdb\u7a0b\u7ec4\u6807\u8bc6\u7b26\uff08 PGID \uff09\u7684\u8fdb\u7a0b\u7ec4\u6210 \u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u62e5\u6709\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u9996\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u662f\u521b\u5efa\u8be5\u7ec4\u7684\u8fdb\u7a0b\uff0c\u5176\u8fdb\u7a0b ID \u4e3a\u8be5\u8fdb\u7a0b\u7ec4\u7684 ID\uff0c\u65b0\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u5176\u7236\u8fdb\u7a0b\u6240\u5c5e\u7684\u8fdb\u7a0b\u7ec4 ID \u8fdb\u7a0b\u7ec4\u62e5\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5176 \u5f00\u59cb\u65f6\u95f4\u4e3a\u9996\u8fdb\u7a0b\u521b\u5efa\u7ec4\u7684\u65f6\u523b \uff0c \u7ed3\u675f\u65f6\u95f4\u4e3a\u6700\u540e\u4e00\u4e2a\u6210\u5458\u8fdb\u7a0b\u9000\u51fa\u7ec4\u7684\u65f6\u523b \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7ec8\u6b62\u800c\u9000\u51fa\u8fdb\u7a0b\u7ec4\uff0c\u4e5f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u52a0\u5165\u4e86\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u800c\u9000\u51fa\u8fdb\u7a0b\u7ec4 \u8fdb\u7a0b\u7ec4\u9996\u8fdb\u7a0b\u65e0\u9700\u662f\u6700\u540e\u4e00\u4e2a\u79bb\u5f00\u8fdb\u7a0b\u7ec4\u7684\u6210\u5458 \u4f1a\u8bdd \u4f1a\u8bdd \u662f\u4e00\u7ec4\u8fdb\u7a0b\u7ec4\u7684\u96c6\u5408 \u4f1a\u8bdd\u9996\u8fdb\u7a0b\u662f\u521b\u5efa\u8be5\u65b0\u4f1a\u8bdd\u7684\u8fdb\u7a0b\uff0c\u5176\u8fdb\u7a0b ID \u4f1a\u6210\u4e3a\u4f1a\u8bdd ID\u3002\u65b0\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u5176\u7236\u8fdb\u7a0b\u7684\u4f1a\u8bdd ID \u4e00\u4e2a\u4f1a\u8bdd\u4e2d\u7684\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u5355\u4e2a\u63a7\u5236\u7ec8\u7aef\u3002\u63a7\u5236\u7ec8\u7aef\u4f1a\u5728\u4f1a\u8bdd\u9996\u8fdb\u7a0b\u9996\u6b21\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u8bbe\u5907\u65f6\u88ab\u5efa\u7acb \u4e00\u4e2a\u7ec8\u7aef\u6700\u591a\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u4f1a\u8bdd\u7684\u63a7\u5236\u7ec8\u7aef \u5728\u4efb\u4e00\u65f6\u523b\uff0c\u4f1a\u8bdd\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u4f1a\u6210\u4e3a\u7ec8\u7aef\u7684\u524d\u53f0\u8fdb\u7a0b\u7ec4\uff0c\u5176\u4ed6\u8fdb\u7a0b\u7ec4\u4f1a\u6210\u4e3a\u540e\u53f0\u8fdb\u7a0b\u7ec4 \u3002\u53ea\u6709\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u8fdb\u7a0b\u624d\u80fd\u4ece\u63a7\u5236\u7ec8\u7aef\u4e2d\u8bfb\u53d6\u8f93\u5165\u3002\u5f53\u7528\u6237\u5728\u63a7\u5236\u7ec8\u7aef\u4e2d\u8f93\u5165\u7ec8\u7aef\u5b57\u7b26\u751f\u6210\u4fe1\u53f7\u540e\uff0c\u8be5\u4fe1\u53f7\u4f1a\u88ab\u53d1\u9001\u5230\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6240\u6709\u6210\u5458 \u5f53\u63a7\u5236\u7ec8\u7aef\u7684\u8fde\u63a5\u5efa\u7acb\u8d77\u6765\u4e4b\u540e\uff0c\u4f1a\u8bdd\u9996\u8fdb\u7a0b\u4f1a\u6210\u4e3a\u8be5\u7ec8\u7aef\u7684\u63a7\u5236\u8fdb\u7a0b \u8fdb\u7a0b\u7ec4\u3001\u4f1a\u8bdd\u3001\u63a7\u5236\u7ec8\u7aef\u4e4b\u95f4\u7684\u5173\u7cfb \u8fdb\u7a0b\u7ec4\u3001\u4f1a\u8bdd\u64cd\u4f5c\u51fd\u6570 pid_t getpgrp(void); pid_t getpgid(pid_t pid); int setpgid(pid_t pid, pid_t pgid); pid_t getsid(pid_t pid); pid_t setsid(void); \u5b88\u62a4\u8fdb\u7a0b\u6982\u5ff5 \u5b88\u62a4\u8fdb\u7a0b\uff08Daemon Process\uff09 \uff0c\u4e5f\u5c31\u662f\u901a\u5e38\u8bf4\u7684 Daemon \u8fdb\u7a0b\uff08\u7cbe\u7075\u8fdb\u7a0b\uff09\uff0c\u662fLinux \u4e2d\u7684\u540e\u53f0\u670d\u52a1\u8fdb\u7a0b\u3002\u5b83\u662f\u4e00\u4e2a\u751f\u5b58\u671f\u8f83\u957f\u7684\u8fdb\u7a0b\uff0c\u901a\u5e38\u72ec\u7acb\u4e8e\u63a7\u5236\u7ec8\u7aef\u5e76\u4e14\u5468\u671f\u6027\u5730\u6267\u884c\u67d0\u79cd\u4efb\u52a1\u6216\u7b49\u5f85\u5904\u7406\u67d0\u4e9b\u53d1\u751f\u7684\u4e8b\u4ef6\u3002\u4e00\u822c\u91c7\u7528\u4ee5 d \u7ed3\u5c3e\u7684\u540d\u5b57 \u5b88\u62a4\u8fdb\u7a0b\u7279\u5f81 \u751f\u547d\u5468\u671f\u5f88\u957f\uff0c\u5b88\u62a4\u8fdb\u7a0b\u4f1a\u5728\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019\u88ab\u521b\u5efa\u5e76\u4e00\u76f4\u8fd0\u884c\u76f4\u81f3\u7cfb\u7edf\u88ab\u5173\u95ed \u5b83\u5728\u540e\u53f0\u8fd0\u884c\u5e76\u4e14\u4e0d\u62e5\u6709\u63a7\u5236\u7ec8\u7aef\u3002\u6ca1\u6709\u63a7\u5236\u7ec8\u7aef\u786e\u4fdd\u4e86\u5185\u6838\u6c38\u8fdc\u4e0d\u4f1a\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u81ea\u52a8\u751f\u6210\u4efb\u4f55\u63a7\u5236\u4fe1\u53f7\u4ee5\u53ca\u7ec8\u7aef\u76f8\u5173\u7684\u4fe1\u53f7\uff08\u5982 SIGINT \u3001 SIGQUIT \uff09 Linux \u7684\u5927\u591a\u6570\u670d\u52a1\u5668\u5c31\u662f\u7528\u5b88\u62a4\u8fdb\u7a0b\u5b9e\u73b0\u7684\u3002\u6bd4\u5982\uff0cInternet \u670d\u52a1\u5668 inetd \uff0cWeb \u670d\u52a1\u5668 httpd \u7b49 \u5b88\u62a4\u8fdb\u7a0b\u7684\u521b\u5efa\u6b65\u9aa4 \u6267\u884c\u4e00\u4e2a fork() \uff0c\u4e4b\u540e\u7236\u8fdb\u7a0b\u9000\u51fa\uff0c\u5b50\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c \u5b50\u8fdb\u7a0b\u8c03\u7528 setsid() \u5f00\u542f\u4e00\u4e2a\u65b0\u4f1a\u8bdd \u6e05\u9664\u8fdb\u7a0b\u7684 umask \u4ee5\u786e\u4fdd\u5f53\u5b88\u62a4\u8fdb\u7a0b\u521b\u5efa\u6587\u4ef6\u548c\u76ee\u5f55\u65f6\u62e5\u6709\u6240\u9700\u7684\u6743\u9650 \u4fee\u6539\u8fdb\u7a0b\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u901a\u5e38\u4f1a\u6539\u4e3a\u6839\u76ee\u5f55\uff08 / \uff09 \u5173\u95ed\u5b88\u62a4\u8fdb\u7a0b\u4ece\u5176\u7236\u8fdb\u7a0b\u7ee7\u627f\u800c\u6765\u7684\u6240\u6709\u6253\u5f00\u7740\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5728\u5173\u95ed\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b260\u30011\u30012\u4e4b\u540e\uff0c\u5b88\u62a4\u8fdb\u7a0b\u901a\u5e38\u4f1a\u6253\u5f00 /dev/null \u5e76\u4f7f\u7528 dup2() \u4f7f\u6240\u6709\u8fd9\u4e9b\u63cf\u8ff0\u7b26\u6307\u5411\u8fd9\u4e2a\u8bbe\u5907 \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91 \u5b9e\u4f8b\uff1a\u5b88\u62a4\u8fdb\u7a0b\u5b9e\u73b0\u6bcf\u9694\u4e24\u79d2\u83b7\u53d6\u65f6\u95f4\u5e76\u5199\u5165\u78c1\u76d8 /* \u5199\u4e00\u4e2a\u5b88\u62a4\u8fdb\u7a0b\uff0c\u6bcf\u96942s\u83b7\u53d6\u4e00\u4e0b\u7cfb\u7edf\u65f6\u95f4\uff0c\u5c06\u8fd9\u4e2a\u65f6\u95f4\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002 */ #include <stdio.h> #include <sys/types.h> #include <unistd.h> #include <stdlib.h> #include <sys/stat.h> #include <fcntl.h> #include <sys/time.h> #include <signal.h> #include <time.h> #include <string.h> void myWork(int num) { // \u6355\u6349\u5230\u4fe1\u53f7\u4e4b\u540e\uff0c\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\uff0c\u5199\u5165\u78c1\u76d8\u6587\u4ef6 time_t tm = time(NULL); struct tm * loc = localtime(&tm); char* str = asctime(loc); int fd = open(\"time.txt\", O_RDWR | O_CREAT | O_APPEND, 0664); write(fd ,str, strlen(str)); close(fd); } int main() { // 1. fork\u4ea7\u751f\u5b50\u8fdb\u7a0b\uff0c\u5e76\u9000\u51fa\u7236\u8fdb\u7a0b pid_t pid = fork(); if (pid > 0) { exit(0); } // 2. \u5b50\u8fdb\u7a0b\u8c03\u7528 setsid() \u5f00\u542f\u4e00\u4e2a\u65b0\u4f1a\u8bdd setsid(); // 3. \u8bbe\u7f6e\u63a9\u7801 umask(022); // 4. \u4fee\u6539\u8fdb\u7a0b\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u901a\u5e38\u8bbe\u4e3a/\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u6743\u9650\u4e0d\u591f\uff0c\u6240\u4ee5\u6539\u4e3a\u5f53\u524d\u76ee\u5f55 chdir(\"/home/u/Desktop\"); // 5. \u5173\u95ed\u3001\u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26 int fd = open(\"/dev/null\", O_RDWR); dup2(fd, STDIN_FILENO); dup2(fd, STDOUT_FILENO); dup2(fd, STDERR_FILENO); // 6. \u4e1a\u52a1\u903b\u8f91 // \u6355\u6349\u5b9a\u65f6\u4fe1\u53f7 struct sigaction act; act.sa_flags = 0; act.sa_handler = myWork; sigemptyset(&act.sa_mask); sigaction(SIGALRM, &act, NULL); // \u8bbe\u7f6e\u5b9a\u65f6\u5668 struct itimerval val; val.it_interval.tv_sec = 2; val.it_interval.tv_usec = 0; val.it_value.tv_sec = 2; val.it_value.tv_usec = 0; setitimer(ITIMER_REAL, &val, NULL); // \u4e0d\u8ba9\u8fdb\u7a0b\u7ed3\u675f while(1) { sleep(10); } return 0; } \u5b9e\u7528\u6280\u5de7 \u540e\u53f0\u8fd0\u884c\u8fdb\u7a0b code ```c #include #include int main() { while (1) { printf(\"this is a test...\\n\"); sleep(1); } return 0; } ``` \u8fdb\u7a0b\u5207\u6362\u5230\u540e\u53f0\u8fd0\u884c\uff1a ./test & \uff0c\u5207\u6362\u5230\u540e\u53f0\u540e\uff0c\u5f53\u524d\u7ec8\u7aef\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u547d\u4ee4\uff0c\u6b64\u65f6\u65e0\u6cd5\u901a\u8fc7 CTRL C \u7ec8\u6b62 \u540e\u53f0\u8fdb\u7a0b\u5207\u6362\u5230\u524d\u53f0\uff1a fg \uff0c\u5207\u6362\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 CTRL C \u7ec8\u6b62","title":"\u8fdb\u7a0b\u6982\u8ff0"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_1","text":"","title":"\u8fdb\u7a0b\u6982\u8ff0"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_2","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/01 \u8fdb\u7a0b\u6982\u8ff0","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_3","text":"\u7a0b\u5e8f \u662f\u5305\u542b\u4e00\u7cfb\u5217 \u4fe1\u606f \u7684\u6587\u4ef6\uff0c\u8fd9\u4e9b\u4fe1\u606f\u63cf\u8ff0\u4e86\u5982\u4f55\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u4e00\u4e2a \u8fdb\u7a0b \u4e8c\u8fdb\u5236\u683c\u5f0f\u6807\u8bc6 \uff1a\u6bcf\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u90fd\u5305\u542b\u7528\u4e8e\u63cf\u8ff0\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684\u5143\u4fe1\u606f\u3002\u5185\u6838\u5229\u7528\u6b64\u4fe1\u606f\u6765\u89e3\u91ca\u6587\u4ef6\u4e2d\u7684\u5176\u4ed6\u4fe1\u606f\uff0cLinux\u4e2d\u4e3aELF\u53ef\u6267\u884c\u8fde\u63a5\u683c\u5f0f \u673a\u5668\u8bed\u8a00\u6307\u4ee4 \uff1a\u5bf9\u7a0b\u5e8f\u7b97\u6cd5\u8fdb\u884c\u7f16\u7801 \u7a0b\u5e8f\u5165\u53e3\u5730\u5740 \uff1a\u6807\u8bc6\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\u7684\u8d77\u59cb\u6307\u4ee4\u4f4d\u7f6e \u6570\u636e \uff1a\u7a0b\u5e8f\u6587\u4ef6\u5305\u542b\u7684\u53d8\u91cf\u521d\u59cb\u503c\u548c\u7a0b\u5e8f\u4f7f\u7528\u7684\u5b57\u9762\u91cf\u503c\uff08\u6bd4\u5982\u5b57\u7b26\u4e32\uff09 \u7b26\u53f7\u8868\u53ca\u91cd\u5b9a\u4f4d\u8868 \uff1a\u63cf\u8ff0\u7a0b\u5e8f\u4e2d\u51fd\u6570\u548c\u53d8\u91cf\u7684\u4f4d\u7f6e\u53ca\u540d\u79f0\u3002\u8fd9\u4e9b\u8868\u683c\u6709\u591a\u91cd\u7528\u9014\uff0c\u5176\u4e2d\u5305\u62ec\u8c03\u8bd5\u548c\u8fd0\u884c\u65f6\u7684\u7b26\u53f7\u89e3\u6790\uff08\u52a8\u6001\u94fe\u63a5\uff09 \u5171\u4eab\u5e93\u548c\u52a8\u6001\u94fe\u63a5\u4fe1\u606f \uff1a\u7a0b\u5e8f\u6587\u4ef6\u6240\u5305\u542b\u7684\u4e00\u4e9b\u5b57\u6bb5\uff0c\u5217\u51fa\u4e86\u7a0b\u5e8f\u8fd0\u884c\u65f6\u9700\u8981\u4f7f\u7528\u7684\u5171\u4eab\u5e93\uff0c\u4ee5\u53ca\u52a0\u8f7d\u5171\u4eab\u5e93\u7684\u52a8\u6001\u8fde\u63a5\u5668\u7684\u8def\u5f84\u540d \u5176\u4ed6\u4fe1\u606f\uff1a\u7a0b\u5e8f\u6587\u4ef6\u8fd8\u5305\u542b\u8bb8\u591a\u5176\u4ed6\u4fe1\u606f\uff0c\u7528\u4ee5\u63cf\u8ff0\u5982\u4f55\u521b\u5efa\u8fdb\u7a0b \u8fdb\u7a0b \u662f\u6b63\u5728\u8fd0\u884c\u7684 \u7a0b\u5e8f \u7684\u5b9e\u4f8b \u3002\u662f\u4e00\u4e2a\u5177\u6709\u4e00\u5b9a\u72ec\u7acb\u529f\u80fd\u7684\u7a0b\u5e8f\u5173\u4e8e\u67d0\u4e2a\u6570\u636e\u96c6\u5408\u7684\u4e00\u6b21\u8fd0\u884c\u6d3b\u52a8\u3002\u5b83\u662f\u64cd\u4f5c\u7cfb\u7edf\u52a8\u6001\u6267\u884c\u7684\u57fa\u672c\u5355\u5143\uff0c\u5728\u4f20\u7edf\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fdb\u7a0b\u65e2\u662f\u57fa\u672c\u7684\u5206\u914d\u5355\u5143\uff0c\u4e5f\u662f\u57fa\u672c\u7684\u6267\u884c\u5355\u5143 \u53ef\u4ee5\u7528 \u4e00\u4e2a\u7a0b\u5e8f\u6765\u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b \uff0c\u8fdb\u7a0b\u662f\u7531\u5185\u6838\u5b9a\u4e49\u7684\u62bd\u8c61\u5b9e\u4f53\uff0c\u5e76\u4e3a\u8be5\u5b9e\u4f53\u5206\u914d\u7528\u4ee5\u6267\u884c\u7a0b\u5e8f\u7684\u5404\u9879\u7cfb\u7edf\u8d44\u6e90\u3002\u4ece\u5185\u6838\u7684\u89d2\u5ea6\u770b\uff0c\u8fdb\u7a0b\u7531\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u548c\u4e00\u7cfb\u5217\u5185\u6838\u6570\u636e\u7ed3\u6784\u7ec4\u6210\uff0c\u5176\u4e2d\u7528\u6237\u5185\u5b58\u7a7a\u95f4\u5305\u542b\u4e86\u7a0b\u5e8f\u4ee3\u7801\u53ca\u4ee3\u7801\u6240\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u800c\u5185\u6838\u6570\u636e\u7ed3\u6784\u5219\u7528\u4e8e\u7ef4\u62a4\u8fdb\u7a0b\u72b6\u6001\u4fe1\u606f\u3002\u8bb0\u5f55\u5728\u5185\u6838\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u4fe1\u606f\u5305\u62ec\u8bb8\u591a\u4e0e\u8fdb\u7a0b\u76f8\u5173\u7684\u6807\u8bc6\u53f7\uff08IDs\uff09\u3001\u865a\u62df\u5185\u5b58\u8868\u3001\u6253\u5f00\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u8868\u3001\u4fe1\u53f7\u4f20\u9012\u53ca\u5904\u7406\u7684\u6709\u5173\u4fe1\u606f\u3001\u8fdb\u7a0b\u8d44\u6e90\u4f7f\u7528\u53ca\u9650\u5236\u3001\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u548c\u5927\u91cf\u7684\u5176\u4ed6\u4fe1\u606f","title":"\u7a0b\u5e8f\u548c\u8fdb\u7a0b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_4","text":"\u5355\u9053\u7a0b\u5e8f \uff0c\u5373\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u53ea\u5141\u8bb8\u4e00\u4e2a\u7684\u7a0b\u5e8f\u8fd0\u884c \u591a\u9053\u7a0b\u5e8f \u8bbe\u8ba1\u6280\u672f\u662f\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u540c\u65f6\u5b58\u653e\u51e0\u9053\u76f8\u4e92\u72ec\u7acb\u7684\u7a0b\u5e8f\uff0c\u4f7f\u5b83\u4eec \u5728\u7ba1\u7406\u7a0b\u5e8f\u63a7\u5236\u4e0b\uff0c\u76f8\u4e92\u7a7f\u63d2\u8fd0\u884c \uff0c\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7a0b\u5e8f\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u540c\u5904\u4e8e\u5f00\u59cb\u5230\u7ed3\u675f\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5171\u4eab\u8ba1\u7b97\u673a\u7cfb\u7edf\u8d44\u6e90\u3002 \u5f15\u5165\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u6280\u672f\u7684\u6839\u672c\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9ad8 CPU \u7684\u5229\u7528\u7387 \u5bf9\u4e8e\u4e00\u4e2a \u5355 CPU \u7cfb\u7edf \u6765\u8bf4\uff0c\u7a0b\u5e8f\u540c\u65f6\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u53ea\u662f\u4e00\u79cd\u5b8f\u89c2\u4e0a\u7684\u6982\u5ff5\uff0c\u4ed6\u4eec\u867d\u7136\u90fd\u5df2\u7ecf\u5f00\u59cb\u8fd0\u884c\uff0c\u4f46 \u5c31\u5fae\u89c2\u800c\u8a00\uff0c\u4efb\u610f\u65f6\u523b\uff0cCPU \u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u53ea\u6709\u4e00\u4e2a \u5728\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u578b\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u8f6e\u6d41\u4f7f\u7528 CPU\u3002\u800c\u5f53\u4e0b\u5e38\u89c1 CPU \u4e3a\u7eb3\u79d2\u7ea7 \uff0c1\u79d2\u53ef\u4ee5\u6267\u884c\u5927\u7ea6 10 \u4ebf\u6761\u6307\u4ee4\u3002\u7531\u4e8e \u4eba\u773c\u7684\u53cd\u5e94\u901f\u5ea6\u662f\u6beb\u79d2\u7ea7 \uff0c\u6240\u4ee5\u770b\u4f3c\u540c\u65f6\u5728\u8fd0\u884c","title":"\u5355\u9053\u3001\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_5","text":"\u65f6\u95f4\u7247\uff08timeslice\uff09 \u53c8\u79f0\u4e3a \u91cf\u5b50\uff08quantum\uff09 \u6216 \u5904\u7406\u5668\u7247\uff08processor slice\uff09 \u662f\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7ed9\u6bcf\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u5fae\u89c2\u4e0a\u7684\u4e00\u6bb5 CPU \u65f6\u95f4\u3002\u4e8b\u5b9e\u4e0a\uff0c\u867d\u7136\u4e00\u53f0\u8ba1\u7b97\u673a\u901a\u5e38\u53ef\u80fd\u6709\u591a\u4e2a CPU\uff0c\u4f46\u662f\u540c\u4e00\u4e2a CPU \u6c38\u8fdc\u4e0d\u53ef\u80fd\u771f\u6b63\u5730\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u4efb\u52a1\u3002\u5728\u53ea\u8003\u8651\u4e00\u4e2a CPU \u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u201c\u770b\u8d77\u6765\u50cf\u201d\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u5b9e\u5219\u662f\u8f6e\u756a\u7a7f\u63d2\u5730\u8fd0\u884c\uff0c\u7531\u4e8e\u65f6\u95f4\u7247\u901a\u5e38\u5f88\u77ed\uff08\u5728 Linux \u4e0a\u4e3a 5ms\uff0d800ms \uff09\uff0c\u7528\u6237\u4e0d\u4f1a\u611f\u89c9\u5230 \u65f6\u95f4\u7247\u7531\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u8c03\u5ea6\u7a0b\u5e8f\u5206\u914d\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b \u3002\u9996\u5148\uff0c\u5185\u6838\u4f1a\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u76f8\u7b49\u7684\u521d\u59cb\u65f6\u95f4\u7247\uff0c\u7136\u540e\u6bcf\u4e2a\u8fdb\u7a0b\u8f6e\u756a\u5730\u6267\u884c\u76f8\u5e94\u7684\u65f6\u95f4\uff0c\u5f53\u6240\u6709\u8fdb\u7a0b\u90fd\u5904\u4e8e\u65f6\u95f4\u7247\u8017\u5c3d\u7684\u72b6\u6001\u65f6\uff0c\u5185\u6838\u4f1a\u91cd\u65b0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u8ba1\u7b97\u5e76\u5206\u914d\u65f6\u95f4\u7247\uff0c\u5982\u6b64\u5f80\u590d","title":"\u65f6\u95f4\u7247"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_6","text":"\u5e76\u884c(parallel) \uff1a\u6307\u5728\u540c\u4e00\u65f6\u523b\uff0c\u6709\u591a\u6761\u6307\u4ee4\u5728\u591a\u4e2a\u5904\u7406\u5668\u4e0a\u540c\u65f6\u6267\u884c \u5e76\u53d1(concurrency) \uff1a\u6307\u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u6761\u6307\u4ee4\u6267\u884c\uff0c\u4f46\u591a\u4e2a\u8fdb\u7a0b\u6307\u4ee4\u88ab\u5feb\u901f\u7684\u8f6e\u6362\u6267\u884c\uff0c\u4f7f\u5f97\u5728\u5b8f\u89c2\u4e0a\u5177\u6709\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u6267\u884c\u7684\u6548\u679c\uff0c\u4f46\u5728\u5fae\u89c2\u4e0a\u5e76\u4e0d\u662f\u540c\u65f6\u6267\u884c\u7684\uff0c\u53ea\u662f\u628a\u65f6\u95f4\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u591a\u4e2a\u8fdb\u7a0b\u5feb\u901f\u4ea4\u66ff\u7684\u6267\u884c","title":"\u5e76\u884c\u548c\u5e76\u53d1"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#pcb","text":"\u4e3a\u4e86\u7ba1\u7406\u8fdb\u7a0b\uff0c\u5185\u6838\u5fc5\u987b\u5bf9\u6bcf\u4e2a\u8fdb\u7a0b\u6240\u505a\u7684\u4e8b\u60c5\u8fdb\u884c\u6e05\u695a\u7684\u63cf\u8ff0\u3002\u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a PCB(Processing Control Block)\u8fdb\u7a0b\u63a7\u5236\u5757 \uff0c\u7ef4\u62a4\u8fdb\u7a0b\u76f8\u5173\u7684\u4fe1\u606f\uff0cLinux \u5185\u6838\u7684\u8fdb\u7a0b\u63a7\u5236\u5757\u662f task_struct \u7ed3\u6784\u4f53 \u5728 /usr/src/linux-headers-xxx/include/linux/sched.h \u6587\u4ef6\u4e2d\u53ef\u4ee5\u67e5\u770b struct task_struct \u7ed3\u6784\u4f53\u5b9a\u4e49\uff0c\u5176\u4e2d linux-headers-xxx \u9700\u8981\u66ff\u6362\u4e3a\u8be5\u76ee\u5f55\u4e0b\u76f8\u5e94\u7684\u7248\u672c \u9700\u8981\u638c\u63e1\u7684 struct task_struct \u7ed3\u6784\u4f53\u6210\u5458 \u8fdb\u7a0bid \uff1a\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u552f\u4e00\u7684 id\uff0c\u7528 pid_t \u7c7b\u578b\u8868\u793a\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 \u8fdb\u7a0b\u7684\u72b6\u6001 \uff1a\u6709 \u5c31\u7eea \u3001 \u8fd0\u884c \u3001 \u6302\u8d77 \u3001 \u505c\u6b62 \u7b49\u72b6\u6001 \u8fdb\u7a0b\u5207\u6362\u65f6\u9700\u8981 \u4fdd\u5b58\u548c\u6062\u590d\u7684\u4e00\u4e9bCPU\u5bc4\u5b58\u5668 \u63cf\u8ff0 \u865a\u62df\u5730\u5740\u7a7a\u95f4 \u7684\u4fe1\u606f \u63cf\u8ff0 \u63a7\u5236\u7ec8\u7aef \u7684\u4fe1\u606f \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff08Current Working Directory\uff09 umask \u63a9\u7801 \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\uff0c\u5305\u542b\u5f88\u591a\u6307\u5411 file \u7ed3\u6784\u4f53\u7684\u6307\u9488 \u548c\u4fe1\u53f7\u76f8\u5173\u7684\u4fe1\u606f \u7528\u6237 id \u548c\u7ec4 id \u4f1a\u8bdd\uff08Session\uff09\u548c\u8fdb\u7a0b\u7ec4 \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7684\u8d44\u6e90\u4e0a\u9650\uff08Resource Limit\uff09\uff0c\u5728Linux\u4e2d\u53ef\u7528 ulimit -a \u67e5\u770b\u8d44\u6e90\u4e0a\u9650","title":"\u8fdb\u7a0b\u63a7\u5236\u5757\uff08PCB\uff09"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_7","text":"","title":"\u8fdb\u7a0b\u72b6\u6001"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_8","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/02 \u8fdb\u7a0b\u72b6\u6001\u53ca\u8f6c\u6362","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_9","text":"\u8fdb\u7a0b\u72b6\u6001\u53cd\u6620\u8fdb\u7a0b\u6267\u884c\u8fc7\u7a0b\u7684\u53d8\u5316\uff0c\u8fd9\u4e9b\u72b6\u6001\u968f\u7740\u8fdb\u7a0b\u7684\u6267\u884c\u548c\u5916\u754c\u6761\u4ef6\u7684\u53d8\u5316\u800c\u8f6c\u6362 \u5206\u4e3a \u4e09\u6001\u6a21\u578b \u548c \u4e94\u6001\u6a21\u578b","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_10","text":"\u8fd0\u884c\u6001 \uff1a\u8fdb\u7a0b\u5360\u6709\u5904\u7406\u5668\u6b63\u5728\u8fd0\u884c \u5c31\u7eea\u6001 \uff1a\u8fdb\u7a0b\u5177\u5907\u8fd0\u884c\u6761\u4ef6\uff0c\u7b49\u5f85\u7cfb\u7edf\u5206\u914d\u5904\u7406\u5668\u4ee5\u4fbf\u8fd0\u884c\u3002\u5f53\u8fdb\u7a0b\u5df2\u5206\u914d\u5230\u9664CPU\u4ee5\u5916\u7684\u6240\u6709\u5fc5\u8981\u8d44\u6e90\u540e\uff0c\u53ea\u8981\u518d\u83b7\u5f97CPU\uff0c\u4fbf\u53ef\u7acb\u5373\u6267\u884c\u3002\u5728\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u7684\u8fdb\u7a0b\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u901a\u5e38\u5c06\u5b83\u4eec\u6392\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u79f0\u4e3a\u5c31\u7eea\u961f\u5217 \u963b\u585e\u6001 \uff1a\u53c8\u79f0\u4e3a\u7b49\u5f85(wait)\u6001\u6216\u7761\u7720(sleep)\u6001\uff0c\u6307\u8fdb\u7a0b\u4e0d\u5177\u5907\u8fd0\u884c\u6761\u4ef6\uff0c\u6b63\u5728\u7b49\u5f85\u67d0\u4e2a\u4e8b\u4ef6\u7684\u5b8c\u6210","title":"\u4e09\u6001\u6a21\u578b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_11","text":"\u9664 \u65b0\u5efa\u6001 \u548c \u7ec8\u6b62\u6001 \uff0c\u5176\u4f59\u4e09\u4e2a\u72b6\u6001\u4e0e \u4e09\u6001\u6a21\u578b \u4e00\u81f4 \u65b0\u5efa\u6001 \uff1a\u8fdb\u7a0b\u521a\u88ab\u521b\u5efa\u65f6\u7684\u72b6\u6001\uff0c\u5c1a\u672a\u8fdb\u5165\u5c31\u7eea\u961f\u5217 \u7ec8\u6b62\u6001 \uff1a\u8fdb\u7a0b\u5b8c\u6210\u4efb\u52a1\u5230\u8fbe\u6b63\u5e38\u7ed3\u675f\u70b9\uff0c\u6216\u51fa\u73b0\u65e0\u6cd5\u514b\u670d\u7684\u9519\u8bef\u800c\u5f02\u5e38\u7ec8\u6b62\uff0c\u6216\u88ab\u64cd\u4f5c\u7cfb\u7edf\u53ca\u6709\u7ec8\u6b62\u6743\u7684\u8fdb\u7a0b\u6240\u7ec8\u6b62\u65f6\u6240\u5904\u7684\u72b6\u6001\u3002\u8fdb\u5165\u7ec8\u6b62\u6001\u7684\u8fdb\u7a0b\u4ee5\u540e\u4e0d\u518d\u6267\u884c\uff0c\u4f46\u4f9d\u7136\u4fdd\u7559\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7b49\u5f85\u5584\u540e\u3002\u4e00\u65e6\u5176\u4ed6\u8fdb\u7a0b\u5b8c\u6210\u4e86\u5bf9\u7ec8\u6b62\u6001\u8fdb\u7a0b\u7684\u4fe1\u606f\u62bd\u53d6\u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5220\u9664\u8be5\u8fdb\u7a0b","title":"\u4e94\u6001\u6a21\u578b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_12","text":"","title":"\u8fdb\u7a0b\u76f8\u5173\u547d\u4ee4"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#-","text":"ps \u547d\u4ee4\u7528\u6765\u67e5\u770b\u8fdb\u7a0b\uff08\u9759\u6001\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528 man ps \u67e5\u770b\u4f7f\u7528\u8bf4\u660e \u5e38\u7528\u53c2\u6570\u542b\u4e49 a\uff1a\u663e\u793a\u7ec8\u7aef\u4e0a\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u5305\u62ec\u5176\u4ed6\u7528\u6237\u7684\u8fdb\u7a0b u\uff1a\u663e\u793a\u8fdb\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f x\uff1a\u663e\u793a\u6ca1\u6709\u63a7\u5236\u7ec8\u7aef\u7684\u8fdb\u7a0b j\uff1a\u5217\u51fa\u4e0e\u4f5c\u4e1a\u63a7\u5236\u76f8\u5173\u7684\u4fe1\u606f ps -aux \u6216 ps aux USER \uff1a\u8fdb\u7a0b\u6240\u5c5e\u7528\u6237 PID \uff1a\u8fdb\u7a0bID %CPU \uff1aCPU\u4f7f\u7528\u5360\u6bd4 %MEM \uff1a\u5185\u5b58\u4f7f\u7528\u5360\u6bd4 TTY \uff1a\u8fdb\u7a0b\u6240\u5c5e\u7ec8\u7aef\uff0c\u5728\u7ec8\u7aef\u76f4\u63a5\u6267\u884c tty \u53ef\u67e5\u770b\u5f53\u524d Terminal \u6240\u5c5e\u7ec8\u7aef\uff08\u56e0\u4e3a\u6b64\u65f6\u6211\u8fd8\u6253\u5f00\u4e86\u53e6\u5916\u4e24\u4e2a\u7ec8\u7aef\uff09 STAT \uff1a\u8fdb\u7a0b\u72b6\u6001 D \uff1a\u4e0d\u53ef\u4e2d\u65ad Uninterruptible\uff08usually IO\uff09 R\uff1a\u6b63\u5728\u8fd0\u884c\uff0c\u6216\u5728\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b S(\u5927\u5199) \uff1a\u5904\u4e8e\u4f11\u7720\u72b6\u6001 T\uff1a\u505c\u6b62\u6216\u88ab\u8ffd\u8e2a Z\uff1a\u50f5\u5c38\u8fdb\u7a0b W\uff1a\u8fdb\u5165\u5185\u5b58\u4ea4\u6362\uff08\u4ece\u5185\u68382.6\u5f00\u59cb\u65e0\u6548\uff09 X\uff1a\u6b7b\u6389\u7684\u8fdb\u7a0b <\uff1a\u9ad8\u4f18\u5148\u7ea7 N\uff1a\u4f4e\u4f18\u5148\u7ea7 s\uff1a\u5305\u542b\u5b50\u8fdb\u7a0b +\uff1a\u4f4d\u4e8e\u524d\u53f0\u7684\u8fdb\u7a0b\u7ec4 START \uff1a\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u65f6\u95f4 TIME \uff1a\u8fdb\u7a0b\u6267\u884c\u6301\u7eed\u65f6\u95f4 COMMAND \uff1a\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4 ps -ajx \u6216 ps ajx PPID \uff1a\u8be5\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bID PGID \uff1a\u8be5\u8fdb\u7a0b\u6240\u5c5e\u7ec4ID SID \uff1a\u8be5\u8fdb\u7a0b\u6240\u5c5e\u4f1a\u8bdd(session)ID\uff0c\u591a\u4e2a\u7ec4\u6784\u6210\u4f1a\u8bdd","title":"\u67e5\u770b\u8fdb\u7a0b-\u9759\u6001"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#-_1","text":"top \u53ef\u4ee5\u5728\u4f7f\u7528 top \u547d\u4ee4\u65f6\u52a0\u4e0a -d \u6765\u6307\u5b9a\u663e\u793a\u4fe1\u606f\u66f4\u65b0\u7684\u65f6\u95f4\u95f4\u9694 \u5728 top \u547d\u4ee4\u6267\u884c\u540e\uff0c\u53ef\u4ee5\u6309\u4ee5\u4e0b\u6309\u952e\u5bf9\u663e\u793a\u7684\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f M\uff1a\u6839\u636e\u5185\u5b58\u4f7f\u7528\u91cf\u6392\u5e8f P\uff1a\u6839\u636e CPU \u5360\u6709\u7387\u6392\u5e8f T\uff1a\u6839\u636e\u8fdb\u7a0b\u8fd0\u884c\u65f6\u95f4\u957f\u77ed\u6392\u5e8f U\uff1a\u6839\u636e\u7528\u6237\u540d\u6765\u7b5b\u9009\u8fdb\u7a0b K\uff1a\u8f93\u5165\u6307\u5b9a\u7684 PID \u6740\u6b7b\u8fdb\u7a0b","title":"\u67e5\u770b\u8fdb\u7a0b-\u52a8\u6001"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_13","text":"kill [-signal] pid kill -l \uff1a\u5217\u51fa\u6240\u6709\u4fe1\u53f7 kill -9 \u8fdb\u7a0bID \u7b49\u4ef7\u4e8e kill \u2013SIGKILL \u8fdb\u7a0bID killall name \uff1a\u6839\u636e\u8fdb\u7a0b\u540d\u6740\u6b7b\u8fdb\u7a0b","title":"\u6740\u6b7b\u8fdb\u7a0b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_14","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7531\u8fdb\u7a0b\u53f7\u6765\u6807\u8bc6\uff0c\u5176\u7c7b\u578b\u4e3a pid_t\uff08\u6574\u578b\uff09 \uff0c\u8fdb\u7a0b\u53f7\u7684\u8303\u56f4\uff1a 0\uff5e32767 \u3002\u8fdb\u7a0b\u53f7\u603b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u53ef\u4ee5\u91cd\u7528\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u540e\uff0c\u5176\u8fdb\u7a0b\u53f7\u5c31\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528 \u4efb\u4f55\u8fdb\u7a0b\uff08\u9664 init \u8fdb\u7a0b\uff09\u90fd\u662f\u7531\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u521b\u5efa \uff0c\u8be5\u8fdb\u7a0b\u79f0\u4e3a\u88ab\u521b\u5efa\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff0c\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7\u79f0\u4e3a\u7236\u8fdb\u7a0b\u53f7\uff08PPID\uff09 \u8fdb\u7a0b\u7ec4\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u7684\u96c6\u5408 \u3002\u4ed6\u4eec\u4e4b\u95f4\u76f8\u4e92\u5173\u8054\uff0c\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u63a5\u6536\u540c\u4e00\u7ec8\u7aef\u7684\u5404\u79cd\u4fe1\u53f7\uff0c\u5173\u8054\u7684\u8fdb\u7a0b\u6709\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53f7\uff08PGID\uff09\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u524d\u7684\u8fdb\u7a0b\u53f7\u4f1a\u5f53\u505a\u5f53\u524d\u7684\u8fdb\u7a0b\u7ec4\u53f7 \u8fdb\u7a0b\u53f7\u548c\u8fdb\u7a0b\u7ec4\u76f8\u5173\u51fd\u6570 pid_t getpid(void); \uff1a\u83b7\u53d6\u8fdb\u7a0bID pid_t getppid(void); \uff1a\u83b7\u53d6\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0bID pid_t getpgid(pid_t pid); \uff1a\u83b7\u53d6\u8fdb\u7a0b\u7684\u7ec4ID","title":"\u8fdb\u7a0b\u53f7\u548c\u76f8\u5173\u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_15","text":"","title":"\u8fdb\u7a0b\u521b\u5efa"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_16","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/03 \u8fdb\u7a0b\u521b\u5efa","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#fork","text":"\u53ef\u901a\u8fc7 man 2 fork \u67e5\u770b\u5e2e\u52a9 pid_t fork(void); ```c /* #include #include pid_t fork(void); \u51fd\u6570\u7684\u4f5c\u7528\uff1a\u7528\u4e8e\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002 \u8fd4\u56de\u503c\uff1a fork()\u7684\u8fd4\u56de\u503c\u4f1a\u8fd4\u56de\u4e24\u6b21\u3002\u4e00\u6b21\u662f\u5728\u7236\u8fdb\u7a0b\u4e2d\uff0c\u4e00\u6b21\u662f\u5728\u5b50\u8fdb\u7a0b\u4e2d\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd4\u56de\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684ID, \u5728\u5b50\u8fdb\u7a0b\u4e2d\u8fd4\u56de0 \u5982\u4f55\u533a\u5206\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\uff1a\u901a\u8fc7fork\u7684\u8fd4\u56de\u503c\u3002 \u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd4\u56de-1\uff0c\u8868\u793a\u521b\u5efa\u5b50\u8fdb\u7a0b\u5931\u8d25\uff0c\u5e76\u4e14\u8bbe\u7f6eerrno */ #include #include #include int main() { int num = 10; // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); // \u5224\u65ad\u662f\u7236\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b if(pid > 0) { printf(\"pid : %d\\n\", pid); // \u5982\u679c\u5927\u4e8e0\uff0c\u8fd4\u56de\u7684\u662f\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53f7\uff0c\u5f53\u524d\u662f\u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d, ppid : %d\\n\", getpid(), getppid()); printf(\"parent num : %d\\n\", num); num += 10; printf(\"parent num += 10 : %d\\n\", num); } else if(pid == 0) { // \u5f53\u524d\u662f\u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d, ppid : %d\\n\", getpid(),getppid()); printf(\"child num : %d\\n\", num); num += 100; printf(\"child num += 100 : %d\\n\", num); } // for\u5faa\u73af for(int i = 0; i < 3; i++) { printf(\"i : %d , pid : %d\\n\", i , getpid()); sleep(1); } return 0; } ```","title":"\u8fdb\u7a0b\u521b\u5efa\uff1afork"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#fork_1","text":"Linux \u7684 fork() \u4f7f\u7528\u662f\u901a\u8fc7 \u5199\u65f6\u62f7\u8d1d (copy- on-write) \u5b9e\u73b0 \u3002\u5199\u65f6\u62f7\u8d1d\u662f\u4e00\u79cd\u53ef\u4ee5\u63a8\u8fdf\u751a\u81f3\u907f\u514d\u62f7\u8d1d\u6570\u636e\u7684\u6280\u672f \u5185\u6838\u6b64\u65f6\u5e76\u4e0d\u590d\u5236\u6574\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u662f\u8ba9 \u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4 \uff0c\u53ea\u6709\u5728 \u9700\u8981\u5199\u5165\u7684\u65f6\u5019 \u624d\u4f1a\u590d\u5236\u5730\u5740\u7a7a\u95f4\uff0c\u4ece\u800c\u4f7f\u5404\u4e2a\u8fdb\u7a0b\u62e5\u6709\u5404\u81ea\u7684\u5730\u5740\u7a7a\u95f4\u3002\u5373 \u8d44\u6e90\u7684\u590d\u5236\u662f\u5728\u9700\u8981\u5199\u5165\u7684\u65f6\u5019\u624d\u4f1a\u8fdb\u884c\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u53ea\u6709\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u5171\u4eab \uff08\u793a\u4f8b\u7a0b\u5e8f\u4e2d num \u7684\u4f5c\u7528\uff09 fork\u4e4b\u540e\u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u6587\u4ef6 \u3002fork\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0b \u6709\u76f8\u540c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6307\u5411\u76f8\u540c\u7684\u6587\u4ef6\u8868 \uff0c\u5f15\u7528\u8ba1\u6570\u589e\u52a0\uff0c\u5171\u4eab\u6587\u4ef6\u504f\u79fb\u6307\u9488 \u4f7f\u7528 \u865a\u62df\u5730\u5740\u7a7a\u95f4 \uff0c\u7531\u4e8e\u7528\u7684\u662f \u5199\u65f6\u62f7\u8d1d (copy- on-write) \uff0c\u4e0b\u56fe \u4e0d\u5b8c\u5168\u51c6\u786e\uff0c\u4f46\u53ef\u5e2e\u52a9\u7406\u89e3","title":"fork\u5de5\u4f5c\u539f\u7406"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_17","text":"","title":"\u7236\u5b50\u8fdb\u7a0b\u5173\u7cfb"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_18","text":"fork()\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u540c \u3002\u7236\u8fdb\u7a0b\u4e2d: >0 \u8fd4\u56de\u7684\u662f\u5b50\u8fdb\u7a0b\u7684ID\uff0c\u5b50\u8fdb\u7a0b\u4e2d: =0 pcb\u4e2d\u7684\u4e00\u4e9b\u6570\u636e\u4e0d\u540c \u3002pcb\u4e2d\u5b58\u7684\u662f \u5f53\u524d\u8fdb\u7a0b\u7684ID(pid) \uff0c \u5f53\u524d\u8fdb\u7a0b\u7684\u7236ID(ppid) \u548c \u4fe1\u53f7\u96c6","title":"\u533a\u522b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_19","text":"\u5728\u67d0\u4e9b\u72b6\u6001\u4e0b\uff0c\u5373 \u5b50\u8fdb\u7a0b\u521a\u88ab\u521b\u5efa\u51fa\u6765\uff0c\u8fd8\u6ca1\u6709\u6267\u884c\u4efb\u4f55\u7684\u5199\u6570\u636e\u7684\u64cd\u4f5c \u3002\u6b64\u65f6 \u7528\u6237\u533a\u7684\u6570\u636e \u548c \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868 \u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u4e00\u6837","title":"\u5171\u540c\u70b9"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_20","text":"\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u662f\u4e00\u6837\u7684\uff0c\u5171\u4eab\u7684\u3002\u5982\u679c\u4fee\u6539\u4e86\u6570\u636e\uff0c\u4e0d\u5171\u4eab\u4e86 \u8bfb\u65f6\u5171\u4eab\uff08\u5b50\u8fdb\u7a0b\u88ab\u521b\u5efa\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u5199\u7684\u64cd\u4f5c\uff09\uff0c\u5199\u65f6\u62f7\u8d1d","title":"\u7236\u5b50\u8fdb\u7a0b\u5bf9\u53d8\u91cf\u5171\u4eab\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#gdb","text":"\u5728\u4ee5\u4e0b\u8c03\u8bd5\u7a0b\u5e8f \u7b2c10\u884c \u53ca \u7b2c20\u884c \u6253\u65ad\u70b9\uff0c\u540e\u7eed\u8bf4\u660e\u90fd\u57fa\u4e8e\u8fd9\u4e24\u4e2a\u65ad\u70b9 \u6253\u65ad\u70b9\u53ca\u67e5\u770b \u4f7f\u7528 GDB \u8c03\u8bd5\u7684\u65f6\u5019\uff0cGDB \u9ed8\u8ba4\u53ea\u80fd\u8ddf\u8e2a\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u5728 fork \u51fd\u6570\u8c03\u7528\u4e4b\u524d\uff0c\u901a\u8fc7\u6307\u4ee4\u8bbe\u7f6e GDB \u8c03\u8bd5\u5de5\u5177\u8ddf\u8e2a\u7236\u8fdb\u7a0b\u6216\u8005\u662f\u8ddf\u8e2a\u5b50\u8fdb\u7a0b\uff0c \u9ed8\u8ba4\u8ddf\u8e2a\u7236\u8fdb\u7a0b \u67e5\u770b\u5f53\u524d\u8ddf\u8e2a\u7684\u8fdb\u7a0b\uff1a show follow-fork-mode \u8bbe\u7f6e\u8c03\u8bd5\u7236\u8fdb\u7a0b\u6216\u8005\u5b50\u8fdb\u7a0b\uff1a set follow-fork-mode [parent\uff08\u9ed8\u8ba4\uff09| child] \u8c03\u8bd5\u7236\u8fdb\u7a0b\uff0c\u5b50\u8fdb\u7a0b\u5faa\u73af\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u5b8c\u6bd5\u540e\u9700\u8981\u8f93\u5165 n \u7ee7\u7eed\u6267\u884c\u7236\u8fdb\u7a0b \u8c03\u8bd5\u5b50\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u5faa\u73af\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u5b8c\u6bd5\u540e\u9700\u8981\u8f93\u5165 n \u7ee7\u7eed\u6267\u884c\u5b50\u8fdb\u7a0b \u67e5\u770b\u8c03\u8bd5\u6a21\u5f0f\uff1a show detach-on-fork \u8bbe\u7f6e\u8c03\u8bd5\u6a21\u5f0f\uff1a set detach-on-fork [on | off] \u9ed8\u8ba4\u4e3a on\uff0c\u8868\u793a\u8c03\u8bd5\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5176\u5b83\u7684\u8fdb\u7a0b\u7ee7\u7eed\u8fd0\u884c\uff0c\u5982\u679c\u4e3a off\uff0c\u8c03\u8bd5\u5f53\u524d\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5176\u5b83\u8fdb\u7a0b\u88ab GDB \u6302\u8d77 \u6ce8\uff1a\u5728\u8bbe\u7f6e\u4e3a off \u65f6\uff0c\u6267\u884c\u7a0b\u5e8f\u4f1a\u62a5\u4ee5\u4e0b\u9519\u8bef\uff0c\u539f\u56e0\u662f gdb 8.x\u7248\u672c\u5b58\u5728bug \u4ee5\u4e0b\u6b63\u5e38\u6267\u884c\u7684 gdb \u7248\u672c\u4e3a v7.11.1 \uff08\u622a\u56fe\u6765\u6e90\u4e8e\u89c6\u9891\uff09\uff0c\u4e0e\u8bbe\u7f6e\u4e3a on \u7684\u533a\u522b\u5728\u4e8e\uff0c for \u5faa\u73af\u662f\u5426\u6253\u5370 \u67e5\u770b\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff1a info inferiors \uff0c\u6b64\u65f6\u8c03\u8bd5\u8fdb\u7a0b\u4e3a parent \uff0c\u9700\u8981\u6267\u884c\u540e\u624d\u4f1a\u663e\u793a\u8fdb\u7a0b \u5f53 detach-on-fork \u4e3a on \u65f6\uff0c\u53ea\u4f1a\u663e\u793a\u4e00\u4e2a\u8fdb\u7a0b\uff08==\u56e0\u4e3a\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u5df2\u7ecf\u6267\u884c\u5b8c\u6bd5\uff0c\u9500\u6bc1==\uff0c\u731c\u6d4b\uff09 \u5f53 detach-on-fork \u4e3a off \u65f6\uff0c\u4f1a\u663e\u793a\u4e24\u4e2a\u8fdb\u7a0b \u5207\u6362\u5f53\u524d\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff1a inferior Num \u4f7f\u8fdb\u7a0b\u8131\u79bb GDB \u8c03\u8bd5\uff1a detach inferiors Num","title":"GDB \u591a\u8fdb\u7a0b\u8c03\u8bd5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#exec","text":"","title":"exec\u51fd\u6570\u65cf"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_21","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/04 exec\u51fd\u6570\u65cf","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_22","text":"\u53ef\u901a\u8fc7 man 3 exec \u67e5\u770b\u5e2e\u52a9 exec \u51fd\u6570\u65cf \u7684\u4f5c\u7528\u662f\u6839\u636e\u6307\u5b9a\u7684\u6587\u4ef6\u540d\u627e\u5230\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u7528\u5b83\u6765\u53d6\u4ee3\u8c03\u7528\u8fdb\u7a0b\u7684\u5185\u5bb9\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f \u5728\u8c03\u7528\u8fdb\u7a0b\u5185\u90e8\u6267\u884c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 exec \u51fd\u6570\u65cf\u7684\u51fd\u6570\u6267\u884c\u6210\u529f\u540e\u4e0d\u4f1a\u8fd4\u56de\uff0c\u56e0\u4e3a\u8c03\u7528\u8fdb\u7a0b\u7684\u5b9e\u4f53\uff0c\u5305\u62ec\u4ee3\u7801\u6bb5\uff0c\u6570\u636e\u6bb5\u548c\u5806\u6808\u7b49\u90fd\u5df2\u7ecf\u88ab\u65b0\u7684\u5185\u5bb9\u53d6\u4ee3\uff0c\u53ea\u7559\u4e0b\u8fdb\u7a0b ID \u7b49\u4e00\u4e9b\u8868\u9762\u4e0a\u7684\u4fe1\u606f\u4ecd\u4fdd\u6301\u539f\u6837\uff0c\u9887\u6709\u4e9b\u795e\u4f3c\u201c\u4e09\u5341\u516d\u8ba1\u201d\u4e2d\u7684\u201c\u91d1\u8749\u8131\u58f3\u201d\u3002\u770b\u4e0a\u53bb\u8fd8\u662f\u65e7\u7684\u8eaf\u58f3\uff0c\u5374\u5df2\u7ecf\u6ce8\u5165\u4e86\u65b0\u7684\u7075\u9b42\u3002\u53ea\u6709\u8c03\u7528\u5931\u8d25\u4e86\uff0c\u5b83\u4eec\u624d\u4f1a\u8fd4\u56de -1\uff0c\u4ece\u539f\u7a0b\u5e8f\u7684\u8c03\u7528\u70b9\u63a5\u7740\u5f80\u4e0b\u6267\u884c \u7528\u6237\u533a\u66ff\u6362\u4e3a a.out \u7684\u5185\u5bb9\uff0c\u5185\u6838\u533a\u4e0d\u53d8","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_23","text":"\u57fa\u672c\u7ec4\u4ef6\u4e3a exec \uff0c\u540e\u9762\u8ddf\u4e0d\u540c\u53c2\u6570\uff0c\u4ee3\u8868\u4e0d\u540c\u542b\u4e49 l(list) \uff1a\u53c2\u6570\u5730\u5740\u5217\u8868\uff0c\u4ee5 \u7a7a\u6307\u9488\u7ed3\u5c3e v(vector) \uff1a\u5b58\u6709\u5404\u53c2\u6570\u5730\u5740\u7684\u6307\u9488\u6570\u7ec4\u7684\u5730\u5740 p(path) \uff1a\u6309 PATH \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u7684\u76ee\u5f55\u641c\u7d22\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u7528 env \u67e5\u770b\u73b0\u6709\u7684\u73af\u5883\u53d8\u91cf e(environment) \uff1a\u5b58\u6709\u73af\u5883\u53d8\u91cf\u5b57\u7b26\u4e32\u5730\u5740\u7684\u6307\u9488\u6570\u7ec4\u7684\u5730\u5740\uff0c\u589e\u52a0\u65b0\u7684\u73af\u5883\u53d8\u91cf \u8bf4\u660e\uff1a\u4e0b\u5217\u793a\u4f8b\u7a0b\u5e8f\u9664\u6838\u5fc3\u4ee3\u7801\u5916\uff0c\u4fdd\u6301\u4e00\u81f4\uff0c\u521d\u59cb\u5305\u542b\u6587\u4ef6\u6709 int execl(const char *path, const char *arg, .../* (char *) NULL */); path \uff1a\u9700\u8981\u6307\u5b9a\u7684\u6267\u884c\u7684\u6587\u4ef6\u7684\u8def\u5f84\u6216\u8005\u540d\u79f0 arg \uff1a\u662f\u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6\u6240\u9700\u8981\u7684\u53c2\u6570\u5217\u8868\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e00\u822c\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e00\u822c\u5199\u7684\u662f\u6267\u884c\u7684\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5f00\u59cb\u5f80\u540e\uff0c\u5c31\u662f\u7a0b\u5e8f\u6267\u884c\u6240\u9700\u8981\u7684\u7684\u53c2\u6570\u5217\u8868\uff0c\u53c2\u6570\u6700\u540e\u9700\u8981\u4ee5NULL\u7ed3\u675f\uff08\u54e8\u5175\uff09 code ```c","title":"\u79cd\u7c7b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include","text":"","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_1","text":"int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); // \u5982\u679c\u4e0d\u52a0\u8fd9\u53e5\uff0c\u4f1a\u5b58\u5728\u5b64\u513f\u8fdb\u7a0b\uff0c\u8f93\u51fa\u5f02\u5e38 sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b // \u8c03\u7528\u81ea\u5df1\u5199\u7684\u53ef\u6267\u884c\u7a0b\u5e8f execl(\"/home/u/Desktop/Linux/hello\",\"hello\",NULL); // \u8c03\u7528\u7cfb\u7edf\u8fdb\u7a0b // execl(\"/bin/ps\", \"ps\", \"aux\", NULL); perror(\"execl\"); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output \u8bf4\u660e\uff1a\u53ef\u4ee5\u770b\u5230\uff0c\u5b50\u8fdb\u7a0b\u7684\u5185\u5bb9\uff08\u7528\u6237\u533a\uff09\u88ab\u66ff\u6362\uff0c\u6253\u5370\u7684\u662f hello \u4e2d\u7684\u5185\u5bb9 int execlp(const char *file, const char *arg, ... /* (char *) NULL */); \u4f1a\u5230\u73af\u5883\u53d8\u91cf\u4e2d\u67e5\u627e\u6307\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u6267\u884c\uff0c\u627e\u4e0d\u5230\u5c31\u6267\u884c\u4e0d\u6210\u529f file \uff1a\u53ea\u9700\u8981\u63d0\u4f9b\u540d\u79f0\uff08\u4e0d\u9700\u8981\u63d0\u4f9b\u8def\u5f84\uff09 code ```c","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_2","text":"","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_3","text":"int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b execlp(\"ps\", \"ps\", \"aux\", NULL); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */); envp \uff1a\u6dfb\u52a0\u8def\u5f84\u81f3\u73af\u5883\u53d8\u91cf\uff0c\u6ce8\u610f\u4ee5 NULL \u7ed3\u5c3e\uff0c\u5426\u5219\u62a5 execle: Bad address code ```c","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_4","text":"","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_5","text":"int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b // \u9700\u8981\u5df2NULL\u7ed3\u5c3e\uff0c\u5426\u5219\u62a5 execle: Bad address \u9519\u8bef char* envp[] = {\"/home/u/Desktop/Linux/\", NULL}; execle(\"/home/u/Desktop/Linux/hello\", \"hello\", NULL, envp); perror(\"execle\"); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output int execv(const char *path, char *const argv[]); argv \uff1a\u5c06\u8fd0\u884c\u53c2\u6570\u90fd\u5199\u5728\u6570\u7ec4\u4e2d code ```c","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_6","text":"","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_7","text":"int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884cexec\u51fd\u6570\u65cf\u4e2d\u7684\u51fd\u6570 pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\",getpid()); sleep(1); }else if(pid == 0) { // \u5b50\u8fdb\u7a0b char* argv[] = {\"hello\", NULL}; execv(\"/home/u/Desktop/Linux/hello\", argv); perror(\"execv\"); printf(\"i am child process, pid : %d\\n\", getpid()); } for(int i = 0; i < 3; i++) { printf(\"i = %d, pid = %d\\n\", i, getpid()); } return 0; } ``` output int execvp(const char *file, char *const argv[]); int execvpe(const char *file, char *const argv[], char *const envp[]); int execve(const char *filename, char *const argv[], char *const envp[]);","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_24","text":"","title":"\u8fdb\u7a0b\u63a7\u5236"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_25","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/05 \u8fdb\u7a0b\u63a7\u5236","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_26","text":"\u6807\u51c6C\u5e93\uff1a exit() Linux\u7cfb\u7edf\uff1a _exit() \u533a\u522b \u7a0b\u5e8f\u8bf4\u660e exit() _exit() \u539f\u56e0\uff1a\u8c03\u7528 _exit \u65f6\u6ca1\u6709\u5237\u65b0\u7f13\u51b2\u533a\uff0c\u6240\u4ee5 world \u8fd8\u7559\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u6ca1\u6709\u88ab\u8f93\u51fa\uff0c \\n \u4f1a\u5237\u65b0\u7f13\u51b2\u533a","title":"\u8fdb\u7a0b\u9000\u51fa"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_27","text":"\u7236\u8fdb\u7a0b\u8fd0\u884c\u7ed3\u675f\uff0c\u4f46\u5b50\u8fdb\u7a0b\u8fd8\u5728\u8fd0\u884c\uff08\u672a\u8fd0\u884c\u7ed3\u675f\uff09\uff0c\u8fd9\u6837\u7684\u5b50\u8fdb\u7a0b\u5c31\u79f0\u4e3a \u5b64\u513f\u8fdb\u7a0b\uff08Orphan Process\uff09 \u6bcf\u5f53\u51fa\u73b0\u4e00\u4e2a\u5b64\u513f\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u5185\u6838\u5c31\u628a\u5b64\u513f\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u8bbe\u7f6e\u4e3a init \uff0c\u800c init \u8fdb\u7a0b\u4f1a\u5faa\u73af\u5730 wait() \u5b83\u7684\u5df2\u7ecf\u9000\u51fa\u7684\u5b50\u8fdb\u7a0b\u3002 \u5b64\u513f\u8fdb\u7a0b\u5e76\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5371\u5bb3 #include <sys/types.h> #include <unistd.h> #include <stdio.h> int main() { // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); // \u5224\u65ad\u662f\u7236\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b if(pid > 0) { printf(\"i am parent process, pid : %d, ppid : %d\\n\", getpid(), getppid()); } else if(pid == 0) { sleep(1); // \u5f53\u524d\u662f\u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d, ppid : %d\\n\", getpid(),getppid()); } // for\u5faa\u73af for(int i = 0; i < 3; i++) { printf(\"i : %d , pid : %d\\n\", i , getpid()); } return 0; }","title":"\u5b64\u513f\u8fdb\u7a0b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_28","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c\u90fd\u4f1a\u91ca\u653e\u81ea\u5df1\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u7528\u6237\u533a\u6570\u636e\uff0c\u5185\u6838\u533a\u7684 PCB \u6ca1\u6709\u529e\u6cd5\u81ea\u5df1\u91ca\u653e\u6389\uff0c\u9700\u8981\u7236\u8fdb\u7a0b\u53bb\u91ca\u653e \u8fdb\u7a0b\u7ec8\u6b62\u65f6\uff0c\u7236\u8fdb\u7a0b\u5c1a\u672a\u56de\u6536\uff0c\u5b50\u8fdb\u7a0b\u6b8b\u7559\u8d44\u6e90\uff08PCB\uff09\u5b58\u653e\u4e8e\u5185\u6838\u4e2d\uff0c\u53d8\u6210 \u50f5\u5c38\uff08Zombie\uff09\u8fdb\u7a0b \u50f5\u5c38\u8fdb\u7a0b\u4e0d\u80fd\u88ab kill -9 \u6740\u6b7b \uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u4e0d\u8c03\u7528 wait() \u6216 waitpid() \u7684\u8bdd\uff0c\u90a3\u4e48\u4fdd\u7559\u7684\u90a3\u6bb5\u4fe1\u606f\u5c31\u4e0d\u4f1a\u91ca\u653e\uff0c\u5176\u8fdb\u7a0b\u53f7\u5c31\u4f1a\u4e00\u76f4\u88ab\u5360\u7528\uff0c\u4f46\u662f\u7cfb\u7edf\u6240\u80fd\u4f7f\u7528\u7684\u8fdb\u7a0b\u53f7\u662f\u6709\u9650\u7684\uff0c\u5982\u679c\u5927\u91cf\u7684\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b\uff0c\u5c06\u56e0\u4e3a\u6ca1\u6709\u53ef\u7528\u7684\u8fdb\u7a0b\u53f7\u800c\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u80fd\u4ea7\u751f\u65b0\u7684\u8fdb\u7a0b\uff0c\u6b64\u5373\u4e3a\u50f5\u5c38\u8fdb\u7a0b\u7684\u5371\u5bb3\uff0c\u5e94\u5f53\u907f\u514d \u793a\u4f8b code ```c","title":"\u50f5\u5c38\u8fdb\u7a0b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_8","text":"","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_9","text":"","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#include_10","text":"int main() { // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); // \u5224\u65ad\u662f\u7236\u8fdb\u7a0b\u8fd8\u662f\u5b50\u8fdb\u7a0b if(pid > 0) { while(1) { printf(\"i am parent process, pid : %d, ppid : %d\\n\", getpid(), getppid()); sleep(1); } } else if(pid == 0) { // \u5f53\u524d\u662f\u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d, ppid : %d\\n\", getpid(),getppid()); } // for\u5faa\u73af for(int i = 0; i < 3; i++) { printf(\"i : %d , pid : %d\\n\", i , getpid()); } return 0; } ``` \u50f5\u5c38\u8fdb\u7a0bID\uff1a45161\uff0c\u53ef\u4ee5\u901a\u8fc7\u6740\u6b7b\u7236\u8fdb\u7a0b45160\uff0c\u4ece\u800c\u4f7f\u50f5\u5c38\u8fdb\u7a0b\u53d8\u4e3a\u5b64\u513f\u8fdb\u7a0b\uff0c\u8ba9init\u9886\u517b\u8fdb\u884c\u91ca\u653e \u91ca\u653e\u540e","title":"include "},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_29","text":"","title":"\u8fdb\u7a0b\u56de\u6536"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_30","text":"\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c\u5185\u6838\u91ca\u653e\u8be5\u8fdb\u7a0b\u6240\u6709\u7684\u8d44\u6e90\u3001\u5305\u62ec\u6253\u5f00\u7684\u6587\u4ef6\u3001\u5360\u7528\u7684\u5185\u5b58\u7b49\u3002\u4f46\u662f\u4ecd\u7136\u4e3a\u5176\u4fdd\u7559\u4e00\u5b9a\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4e3b\u8981\u4e3b\u8981\u6307\u8fdb\u7a0b\u63a7\u5236\u5757PCB\u7684\u4fe1\u606f\uff08\u5305\u62ec\u8fdb\u7a0b\u53f7\u3001\u9000\u51fa\u72b6\u6001\u3001\u8fd0\u884c\u65f6\u95f4\u7b49\uff09 \u7236\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 wait \u6216 waitpid \u5f97\u5230\u5b83\u7684\u9000\u51fa\u72b6\u6001\u540c\u65f6\u5f7b\u5e95\u6e05\u9664\u6389\u8fd9\u4e2a\u8fdb\u7a0b\uff0c\u67e5\u770b\u5e2e\u52a9\uff1a man 2 wait wait() \u548c waitpid() \u51fd\u6570\u7684\u529f\u80fd\u4e00\u6837\uff0c\u533a\u522b\u5728\u4e8e wait() \u51fd\u6570\u4f1a\u963b\u585e waitpid() \u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u963b\u585e\uff0c waitpid() \u8fd8\u53ef\u4ee5\u6307\u5b9a\u7b49\u5f85\u54ea\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f \u6ce8\u610f\uff1a \u4e00\u6b21 wait \u6216 waitpid \u8c03\u7528\u53ea\u80fd\u6e05\u7406\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u6e05\u7406\u591a\u4e2a\u5b50\u8fdb\u7a0b\u5e94\u4f7f\u7528\u5faa\u73af","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_31","text":"WIFEXITED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u6b63\u5e38\u9000\u51fa WEXITSTATUS(status) \uff1a\u5982\u679c\u4e0a\u5b8f\u4e3a\u771f\uff0c\u83b7\u53d6\u8fdb\u7a0b\u9000\u51fa\u7684\u72b6\u6001\uff08exit\u7684\u53c2\u6570\uff09 WIFSIGNALED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u5f02\u5e38\u7ec8\u6b62 WTERMSIG(status) \uff1a\u5982\u679c\u4e0a\u5b8f\u4e3a\u771f\uff0c\u83b7\u53d6\u4f7f\u8fdb\u7a0b\u7ec8\u6b62\u7684\u4fe1\u53f7\u7f16\u53f7 WIFSTOPPED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u5904\u4e8e\u6682\u505c\u72b6\u6001 WSTOPSIG(status) \uff1a\u5982\u679c\u4e0a\u5b8f\u4e3a\u771f\uff0c\u83b7\u53d6\u4f7f\u8fdb\u7a0b\u6682\u505c\u7684\u4fe1\u53f7\u7684\u7f16\u53f7 WIFCONTINUED(status) \uff1a\u975e0\uff0c\u8fdb\u7a0b\u6682\u505c\u540e\u5df2\u7ecf\u7ee7\u7eed\u8fd0\u884c","title":"\u9000\u51fa\u4fe1\u606f\u76f8\u5173\u5b8f\u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#wait","text":"\u53ef\u901a\u8fc7 man 2 wait \u67e5\u770b\u5e2e\u52a9 pid_t wait(int *wstatus); \u529f\u80fd\uff1a\u7b49\u5f85\u4efb\u610f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff0c\u5982\u679c\u4efb\u610f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ed3\u675f\u4e86\uff0c\u6b64\u51fd\u6570\u4f1a\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90 \u53c2\u6570 int *wstatus \uff1a\u8fdb\u7a0b\u9000\u51fa\u65f6\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u4f20\u5165\u7684\u662f\u4e00\u4e2aint\u7c7b\u578b\u7684\u5730\u5740\uff0c\u4f20\u51fa\u53c2\u6570\u3002 \u8fd4\u56de\u503c \u6210\u529f\uff1a\u8fd4\u56de\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b\u7684id \u5931\u8d25\uff1a-1 (\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u90fd\u7ed3\u675f\uff0c\u8c03\u7528\u51fd\u6570\u5931\u8d25) \u5176\u4ed6\u8bf4\u660e \u8c03\u7528wait\u51fd\u6570\u7684\u8fdb\u7a0b\u4f1a\u88ab\u6302\u8d77\uff08\u963b\u585e\uff09\uff0c\u76f4\u5230\u5b83\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u9000\u51fa\u6216\u8005\u6536\u5230\u4e00\u4e2a\u4e0d\u80fd\u88ab\u5ffd\u7565\u7684\u4fe1\u53f7\u65f6\u624d\u88ab\u5524\u9192\uff08\u76f8\u5f53\u4e8e\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff09 \u5982\u679c\u6ca1\u6709\u5b50\u8fdb\u7a0b\u4e86\uff0c\u51fd\u6570\u7acb\u523b\u8fd4\u56de\uff0c\u8fd4\u56de-1\uff1b\u5982\u679c\u5b50\u8fdb\u7a0b\u90fd\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u4e5f\u4f1a\u7acb\u5373\u8fd4\u56de\uff0c\u8fd4\u56de-1 #include <sys/types.h> #include <sys/wait.h> #include <stdio.h> #include <unistd.h> #include <stdlib.h> int main() { // \u6709\u4e00\u4e2a\u7236\u8fdb\u7a0b\uff0c\u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b\uff08\u5144\u5f1f\uff09 pid_t pid; // \u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b for(int i = 0; i < 5; i++) { pid = fork(); // \u907f\u514d\u5d4c\u5957\u91cd\u590d\u751f\u6210\u5b50\u8fdb\u7a0b if(pid == 0) { break; } } if(pid > 0) { // \u7236\u8fdb\u7a0b while(1) { printf(\"parent, pid = %d\\n\", getpid()); // int ret = wait(NULL); int st; int ret = wait(&st); if(ret == -1) { break; } if(WIFEXITED(st)) { // \u662f\u4e0d\u662f\u6b63\u5e38\u9000\u51fa printf(\"\u9000\u51fa\u7684\u72b6\u6001\u7801\uff1a%d\\n\", WEXITSTATUS(st)); } if(WIFSIGNALED(st)) { // \u662f\u4e0d\u662f\u5f02\u5e38\u7ec8\u6b62 printf(\"\u88ab\u54ea\u4e2a\u4fe1\u53f7\u5e72\u6389\u4e86\uff1a%d\\n\", WTERMSIG(st)); } printf(\"child die, pid = %d\\n\", ret); sleep(1); } } else if (pid == 0){ // \u5b50\u8fdb\u7a0b while(1) { printf(\"child, pid = %d\\n\",getpid()); sleep(1); } exit(0); } return 0; // exit(0) } \u7a0b\u5e8f\u5f00\u59cb\u6267\u884c \u901a\u8fc7\u547d\u4ee4\u6740\u6b7b\u5b50\u8fdb\u7a0b\uff1a kill -9 47548","title":"wait()"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#waitpid","text":"\u53ef\u901a\u8fc7 man 2 wait \u67e5\u770b\u5e2e\u52a9 pid_t waitpid(pid_t pid, int *wstatus, int options); \u529f\u80fd\uff1a\u56de\u6536\u6307\u5b9a\u8fdb\u7a0b\u53f7\u7684\u5b50\u8fdb\u7a0b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u963b\u585e \u53c2\u6570 pid pid > 0 : \u56de\u6536\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u7684pid pid = 0 : \u56de\u6536\u5f53\u524d\u8fdb\u7a0b\u7ec4\u7684\u6240\u6709\u5b50\u8fdb\u7a0b pid = -1 : \u56de\u6536\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\uff0c\u76f8\u5f53\u4e8e wait() \uff08\u6700\u5e38\u7528\uff09 pid < -1 : \u67d0\u4e2a\u8fdb\u7a0b\u7ec4\u7684\u7ec4id\u7684\u7edd\u5bf9\u503c\uff0c\u56de\u6536\u6307\u5b9a\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u5b50\u8fdb\u7a0b options\uff1a\u8bbe\u7f6e\u963b\u585e\u6216\u8005\u975e\u963b\u585e 0 : \u963b\u585e WNOHANG : \u975e\u963b\u585e \u8fd4\u56de\u503c > 0 : \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684id 0 : options=WNOHANG, \u8868\u793a\u8fd8\u6709\u5b50\u8fdb\u7a0b\u6d3b\u7740 -1 \uff1a\u9519\u8bef\uff0c\u6216\u8005\u6ca1\u6709\u5b50\u8fdb\u7a0b\u4e86 #include <sys/types.h> #include <sys/wait.h> #include <stdio.h> #include <unistd.h> #include <stdlib.h> int main() { // \u6709\u4e00\u4e2a\u7236\u8fdb\u7a0b\uff0c\u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b\uff08\u5144\u5f1f\uff09 pid_t pid; // \u521b\u5efa5\u4e2a\u5b50\u8fdb\u7a0b for(int i = 0; i < 5; i++) { pid = fork(); if(pid == 0) { break; } } if(pid > 0) { // \u7236\u8fdb\u7a0b while(1) { printf(\"parent, pid = %d\\n\", getpid()); sleep(1); int st; // int ret = waitpid(-1, &st, 0); int ret = waitpid(-1, &st, WNOHANG); if(ret == -1) { break; } else if(ret == 0) { // \u8bf4\u660e\u8fd8\u6709\u5b50\u8fdb\u7a0b\u5b58\u5728 continue; } else if(ret > 0) { if(WIFEXITED(st)) { // \u662f\u4e0d\u662f\u6b63\u5e38\u9000\u51fa printf(\"\u9000\u51fa\u7684\u72b6\u6001\u7801\uff1a%d\\n\", WEXITSTATUS(st)); } if(WIFSIGNALED(st)) { // \u662f\u4e0d\u662f\u5f02\u5e38\u7ec8\u6b62 printf(\"\u88ab\u54ea\u4e2a\u4fe1\u53f7\u5e72\u6389\u4e86\uff1a%d\\n\", WTERMSIG(st)); } printf(\"child die, pid = %d\\n\", ret); } } } else if (pid == 0){ // \u5b50\u8fdb\u7a0b while(1) { printf(\"child, pid = %d\\n\",getpid()); sleep(1); } exit(0); } return 0; }","title":"waitpid()"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_32","text":"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u7ba1\u9053\u53ca\u5185\u5b58\u6620\u5c04"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_33","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/06 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u7ba1\u9053\u53ca\u5185\u5b58\u6620\u5c04","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_34","text":"\u8fdb\u7a0b\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8d44\u6e90\u5206\u914d\u5355\u5143\uff0c\u4e0d\u540c\u8fdb\u7a0b\uff08\u8fd9\u91cc\u6240\u8bf4\u7684\u8fdb\u7a0b\u901a\u5e38\u6307\u7684\u662f\u7528\u6237\u8fdb\u7a0b\uff09\u4e4b\u95f4\u7684\u8d44\u6e90\u662f\u72ec\u7acb\u7684\uff0c\u6ca1\u6709\u5173\u8054\uff0c\u4e0d\u80fd\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u76f4\u63a5\u8bbf\u95ee\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90 \u4f46\u662f\uff0c\u8fdb\u7a0b\u4e0d\u662f\u5b64\u7acb\u7684\uff0c\u4e0d\u540c\u7684\u8fdb\u7a0b\u9700\u8981\u8fdb\u884c\u4fe1\u606f\u7684\u4ea4\u4e92\u548c\u72b6\u6001\u7684\u4f20\u9012\u7b49\uff0c\u56e0\u6b64\u9700\u8981 \u8fdb\u7a0b\u95f4\u901a\u4fe1( IPC\uff1aInter Processes Communication) \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u76ee\u7684 \u6570\u636e\u4f20\u8f93\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u5c06\u5b83\u7684\u6570\u636e\u53d1\u9001\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b \u901a\u77e5\u4e8b\u4ef6\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u5411\u53e6\u4e00\u4e2a\u6216\u4e00\u7ec4\u8fdb\u7a0b\u53d1\u9001\u6d88\u606f\uff0c\u901a\u77e5\u5b83\uff08\u5b83\u4eec\uff09\u53d1\u751f\u4e86\u67d0\u79cd\u4e8b\u4ef6\uff08\u5982\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u8981\u901a\u77e5\u7236\u8fdb\u7a0b\uff09 \u8d44\u6e90\u5171\u4eab\uff1a\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u540c\u6837\u7684\u8d44\u6e90\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u9700\u8981\u5185\u6838\u63d0\u4f9b\u4e92\u65a5\u548c\u540c\u6b65\u673a\u5236 \u8fdb\u7a0b\u63a7\u5236\uff1a\u6709\u4e9b\u8fdb\u7a0b\u5e0c\u671b\u5b8c\u5168\u63a7\u5236\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6267\u884c\uff08\u5982 Debug \u8fdb\u7a0b\uff09\uff0c\u6b64\u65f6\u63a7\u5236\u8fdb\u7a0b\u5e0c\u671b\u80fd\u591f\u62e6\u622a\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6240\u6709\u9677\u5165\u548c\u5f02\u5e38\uff0c\u5e76\u80fd\u591f\u53ca\u65f6\u77e5\u9053\u5b83\u7684\u72b6\u6001\u6539\u53d8","title":"\u8fdb\u7a0b\u95f4\u901a\u8baf\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#linux","text":"","title":"Linux \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_35","text":"","title":"\u7ba1\u9053"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_36","text":"\u7ba1\u9053\u5176\u5b9e\u662f\u4e00\u4e2a\u5728 \u5185\u6838\u5185\u5b58\u4e2d\u7ef4\u62a4\u7684\u7f13\u51b2\u5668 \uff0c\u8fd9\u4e2a\u7f13\u51b2\u5668\u7684\u5b58\u50a8\u80fd\u529b\u662f\u6709\u9650\u7684\uff0c\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u5927\u5c0f\u4e0d\u4e00\u5b9a\u76f8\u540c \u7ba1\u9053\u62e5\u6709\u6587\u4ef6\u7684\u7279\u8d28\uff1a\u8bfb\u64cd\u4f5c\u3001\u5199\u64cd\u4f5c \u533f\u540d\u7ba1\u9053 \u6ca1\u6709\u6587\u4ef6\u5b9e\u4f53 \u6709\u540d\u7ba1\u9053 \u6709\u6587\u4ef6\u5b9e\u4f53\uff0c\u4f46\u4e0d\u5b58\u50a8\u6570\u636e\u3002\u53ef\u4ee5\u6309\u7167\u64cd\u4f5c\u6587\u4ef6\u7684\u65b9\u5f0f\u5bf9\u7ba1\u9053\u8fdb\u884c\u64cd\u4f5c \u4e00\u4e2a\u7ba1\u9053\u662f\u4e00\u4e2a\u5b57\u8282\u6d41 \uff0c\u4f7f\u7528\u7ba1\u9053\u65f6\u4e0d\u5b58\u5728\u6d88\u606f\u6216\u8005\u6d88\u606f\u8fb9\u754c\u7684\u6982\u5ff5\uff0c\u4ece\u7ba1\u9053\u8bfb\u53d6\u6570\u636e\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\u5757\uff0c\u800c\u4e0d\u7ba1\u5199\u5165\u8fdb\u7a0b\u5199\u5165\u7ba1\u9053\u7684\u6570\u636e\u5757\u7684\u5927\u5c0f\u662f\u591a\u5c11 \u901a\u8fc7\u7ba1\u9053\u4f20\u9012\u7684\u6570\u636e\u662f\u987a\u5e8f\u7684\uff0c\u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u51fa\u6765\u7684\u5b57\u8282\u7684\u987a\u5e8f\u548c\u5b83\u4eec\u88ab\u5199\u5165\u7ba1\u9053\u7684\u987a\u5e8f\u662f\u5b8c\u5168\u4e00\u6837\u7684 \u5728\u7ba1\u9053\u4e2d\u7684\u6570\u636e\u7684\u4f20\u9012\u65b9\u5411\u662f\u5355\u5411\u7684\uff0c\u4e00\u7aef\u7528\u4e8e\u5199\u5165\uff0c\u4e00\u7aef\u7528\u4e8e\u8bfb\u53d6\uff0c\u7ba1\u9053\u662f \u534a\u53cc\u5de5 \u7684 \u4ece\u7ba1\u9053\u8bfb\u6570\u636e\u662f\u4e00\u6b21\u6027\u64cd\u4f5c\uff0c\u6570\u636e\u4e00\u65e6\u88ab\u8bfb\u8d70\uff0c\u5b83\u5c31\u4ece\u7ba1\u9053\u4e2d\u88ab\u629b\u5f03\uff0c\u91ca\u653e\u7a7a\u95f4\u4ee5\u4fbf\u5199\u66f4\u591a\u7684\u6570\u636e\uff0c \u5728\u7ba1\u9053\u4e2d\u65e0\u6cd5\u4f7f\u7528 lseek() \u6765\u968f\u673a\u7684\u8bbf\u95ee\u6570\u636e \u533f\u540d\u7ba1\u9053 \u53ea\u80fd\u5728 \u5177\u6709\u516c\u5171\u7956\u5148\u7684\u8fdb\u7a0b\uff08\u7236\u8fdb\u7a0b\u4e0e\u5b50\u8fdb\u7a0b\uff0c\u6216\u8005\u4e24\u4e2a\u5144\u5f1f\u8fdb\u7a0b\uff0c\u5177\u6709\u4eb2\u7f18\u5173\u7cfb\uff09\u4e4b\u95f4\u4f7f\u7528","title":"\u7ba1\u9053\u7279\u70b9"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_37","text":"\u7ba1\u9053\u76f8\u5f53\u4e8e \u4e00\u4e2a\u4e2d\u95f4\u5a92\u4ecb\uff0c\u5171\u4eab\u6570\u636e","title":"\u7ba1\u9053\u5b9e\u73b0\u8fdb\u7a0b\u901a\u4fe1\u7684\u539f\u7406"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_38","text":"","title":"\u7ba1\u9053\u7684\u6570\u636e\u7ed3\u6784"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_39","text":"","title":"\u533f\u540d\u7ba1\u9053"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_40","text":"\u7ba1\u9053 \u4e5f\u53eb \u65e0\u540d\uff08\u533f\u540d\uff09\u7ba1\u9053 \uff0c\u5b83\u662f\u662f UNIX \u7cfb\u7edf IPC\uff08\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09\u7684\u6700\u53e4\u8001\u5f62\u5f0f\uff0c\u6240\u6709\u7684 UNIX \u7cfb\u7edf\u90fd\u652f\u6301\u8fd9\u79cd\u901a\u4fe1\u673a\u5236 \u7edf\u8ba1\u4e00\u4e2a\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u6570\u76ee\u547d\u4ee4\uff1a ls | wc \u2013l \uff0c\u4e3a\u4e86\u6267\u884c\u8be5\u547d\u4ee4\uff0cshell \u521b\u5efa\u4e86\u4e24\u4e2a\u8fdb\u7a0b\u6765\u5206\u522b\u6267\u884c ls \u548c wc \u67e5\u770b\u5e2e\u52a9\uff1a man 2 pipe \u521b\u5efa\u533f\u540d\u7ba1\u9053\uff1a int pipe(int pipefd[2]); \u67e5\u770b\u7ba1\u9053\u7f13\u51b2\u5927\u5c0f\u547d\u4ee4\uff1a ulimit \u2013a \uff08\u51718\u4e2a\uff0c\u6bcf\u4e2a521byte\uff0c\u53734k\uff09 \u67e5\u770b\u7ba1\u9053\u7f13\u51b2\u5927\u5c0f\u51fd\u6570\uff1a long fpathconf(int fd, int name);","title":"\u6982\u5ff5\u53ca\u4f7f\u7528"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_41","text":"int pipe(int pipefd[2]) \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u7ba1\u9053\uff0c\u7528\u6765\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 \u53c2\u6570\uff1a int pipefd[2] \u8fd9\u4e2a\u6570\u7ec4\u662f\u4e00\u4e2a\u4f20\u51fa\u53c2\u6570\u3002 pipefd[0] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u8bfb\u7aef pipefd[1] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u5199\u7aef \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c\u5931\u8d25 -1 \u6ce8\u610f \u7ba1\u9053\u9ed8\u8ba4\u662f\u963b\u585e\u7684\uff1a\u5982\u679c\u7ba1\u9053\u4e2d\u6ca1\u6709\u6570\u636e\uff0cread\u963b\u585e\uff0c\u5982\u679c\u7ba1\u9053\u6ee1\u4e86\uff0cwrite\u963b\u585e \u533f\u540d\u7ba1\u9053\u53ea\u80fd\u7528\u4e8e\u5177\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff08\u7236\u5b50\u8fdb\u7a0b\uff0c\u5144\u5f1f\u8fdb\u7a0b\uff09 \u5b9e\u73b0 \u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u7ed9\u7236\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u8bfb\u53d6\u5230\u6570\u636e\u8f93\u51fa \u7ba1\u9053\u5e94\u5728\u5b50\u8fdb\u7a0b\u521b\u5efa\u524d\u751f\u6210\uff0c\u5426\u5219\u7236\u5b50\u8fdb\u7a0b\u4e0d\u4e00\u5b9a\u5bf9\u5e94\u540c\u4e00\u4e2a\u7ba1\u9053 \u5355\u5411\u53d1\u9001\u65f6 \u7531\u4e8e\u8bfb\u5199\u987a\u5e8f\u4e0d\u5b9a\uff0c\u770b\u8d77\u6765\u50cf\u81ea\u5df1\u5199\u81ea\u5df1\u8bfb \u89e3\u51b3\u65b9\u6cd5\uff1a\u5173\u95ed\u4e0d\u9700\u8981\u7684\u7aef\u53e3\uff08\u5373\u4ee3\u7801\u4e2d\u7684 close(pipefd[1]); \uff09 \u5b9e\u9645\u5728\u4e0d\u52a0 sleep \u8fd0\u884c\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e0b\u5217\u95ee\u9898\uff0c\u539f\u56e0\u662f==\u5199\u7684\u901f\u5ea6\u8fc7\u5feb\uff0c\u5411\u7ba1\u9053\u8fde\u7eed\u5199\u4e86\u597d\u591a\u6b21\uff0c\u624d\u88ab\u8bfb\u53d6\u5230\u4e00\u6b21\uff0c\u7236\u8fdb\u7a0b\u63a5\u6536\u5230\u8fc7\u591a\u7684\u5b50\u8fdb\u7a0b\u4fe1\u606f\u662f\u56e0\u4e3a\u7236\u8fdb\u7a0b\u6bcf\u6b21\u8bfb\u5b8c\u7ba1\u9053\u4e2d\u7684\u6570\u636e\uff0c\u60f3\u8981\u518d\u6b21\u8bfb\u53d6\u65f6\u5c31\u4f1a\u56e0\u4e3a\u7ba1\u9053\u4e3a\u7a7a\u800c\u88ab\u963b\u585e\u3002\u6240\u4ee5\u5c31\u9020\u6210\u4e86\u4ece\u6548\u679c\u4e0a\u6765\u770b\u5199\u7684\u901f\u5ea6\u8981\u6bd4\u8bfb\u7684\u5feb== \u6ce8\u610f\u53cc\u5411\u53d1\u9001\u65f6\uff0c\u6ce8\u610f\u7236\u5b50\u8fdb\u7a0b\u7684\u8bfb\u5199\u987a\u5e8f\uff08\u4ee3\u7801\u4e2d\u6ce8\u91ca\u6bb5\uff09 ```c /* #include int pipe(int pipefd[2]); \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u7ba1\u9053\uff0c\u7528\u6765\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002 \u53c2\u6570\uff1aint pipefd[2] \u8fd9\u4e2a\u6570\u7ec4\u662f\u4e00\u4e2a\u4f20\u51fa\u53c2\u6570\u3002 pipefd[0] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u8bfb\u7aef pipefd[1] \u5bf9\u5e94\u7684\u662f\u7ba1\u9053\u7684\u5199\u7aef \u8fd4\u56de\u503c\uff1a \u6210\u529f 0 \u5931\u8d25 -1 \u7ba1\u9053\u9ed8\u8ba4\u662f\u963b\u585e\u7684\uff1a\u5982\u679c\u7ba1\u9053\u4e2d\u6ca1\u6709\u6570\u636e\uff0cread\u963b\u585e\uff0c\u5982\u679c\u7ba1\u9053\u6ee1\u4e86\uff0cwrite\u963b\u585e \u6ce8\u610f\uff1a\u533f\u540d\u7ba1\u9053\u53ea\u80fd\u7528\u4e8e\u5177\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff08\u7236\u5b50\u8fdb\u7a0b\uff0c\u5144\u5f1f\u8fdb\u7a0b\uff09 */ // \u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u7ed9\u7236\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u8bfb\u53d6\u5230\u6570\u636e\u8f93\u51fa #include #include #include #include #include int main() { // \u5728fork\u4e4b\u524d\u521b\u5efa\u7ba1\u9053 int pipefd[2]; int ret = pipe(pipefd); if(ret == -1) { perror(\"pipe\"); exit(0); } // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"i am parent process, pid : %d\\n\", getpid()); // \u5173\u95ed\u5199\u7aef // close(pipefd[1]); // \u4ece\u7ba1\u9053\u7684\u8bfb\u53d6\u7aef\u8bfb\u53d6\u6570\u636e char buf[1024] = {0}; while(1) { int len = read(pipefd[0], buf, sizeof(buf)); printf(\"parent recv : %s, pid : %d\\n\", buf, getpid()); // \u5411\u7ba1\u9053\u4e2d\u5199\u5165\u6570\u636e //char * str = \"hello,i am parent\"; //write(pipefd[1], str, strlen(str)); //sleep(1); } } else if(pid == 0){ // \u5b50\u8fdb\u7a0b printf(\"i am child process, pid : %d\\n\", getpid()); // \u5173\u95ed\u8bfb\u7aef // close(pipefd[0]); char buf[1024] = {0}; while(1) { // \u5411\u7ba1\u9053\u4e2d\u5199\u5165\u6570\u636e char * str = \"hello,i am child\"; write(pipefd[1], str, strlen(str)); sleep(1); // int len = read(pipefd[0], buf, sizeof(buf)); // printf(\"child recv : %s, pid : %d\\n\", buf, getpid()); // bzero(buf, 1024); } } return 0; } ```","title":"\u521b\u5efa\u533f\u540d\u7ba1\u9053"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#shellps-aux","text":"\u601d\u8def \u5b50\u8fdb\u7a0b\uff1a \u5b9e\u73b0 ps aux , \u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e\uff0c\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u7236\u8fdb\u7a0b \u7236\u8fdb\u7a0b\uff1a\u83b7\u53d6\u5230\u6570\u636e\u5e76\u6253\u5370 pipe()->fork()->execlp()<\u5728\u6b64\u4e4b\u524d\uff0c\u8f93\u51fa\u4e3a\u6587\u4ef6\u63cf\u8ff0\u7b26\u91cd\u5b9a\u5411>->\u6253\u5370 code ```c /* \u5b9e\u73b0 ps aux | grep xxx \u7236\u5b50\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u5b50\u8fdb\u7a0b\uff1a ps aux, \u5b50\u8fdb\u7a0b\u7ed3\u675f\u540e\uff0c\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u7236\u8fdb\u7a0b \u7236\u8fdb\u7a0b\uff1a\u83b7\u53d6\u5230\u6570\u636e\uff0c\u8fc7\u6ee4 pipe() execlp() \u5b50\u8fdb\u7a0b\u5c06\u6807\u51c6\u8f93\u51fa stdout_fileno \u91cd\u5b9a\u5411\u5230\u7ba1\u9053\u7684\u5199\u7aef\u3002 dup2 */ #include #include #include #include #include #include int main() { // \u521b\u5efa\u4e00\u4e2a\u7ba1\u9053 int fd[2]; int ret = pipe(fd); if(ret == -1) { perror(\"pipe\"); exit(0); } // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); if(pid > 0) { // \u7236\u8fdb\u7a0b // \u5173\u95ed\u5199\u7aef\uff0c\u5fc5\u987b\u8981\u6709\uff0c\u5426\u5219\u7a0b\u5e8f\u4e0d\u4f1a\u7ed3\u675f close(fd[1]); // \u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6 char buf[1024] = {0}; int len = -1; while((len = read(fd[0], buf, sizeof(buf) - 1)) > 0) { // \u8fc7\u6ee4\u6570\u636e\u8f93\u51fa printf(\"%s\", buf); memset(buf, 0, 1024); } wait(NULL); } else if(pid == 0) { // \u5b50\u8fdb\u7a0b // \u5173\u95ed\u8bfb\u7aef close(fd[0]); // \u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u91cd\u5b9a\u5411 stdout_fileno -> fd[1] dup2(fd[1], STDOUT_FILENO); // \u6267\u884c ps aux execlp(\"ps\", \"ps\", \"aux\", NULL); perror(\"execlp\"); exit(0); } else { perror(\"fork\"); exit(0); } return 0; } ``` ==\u672a\u89e3\u51b3\uff1a./ipc | wc - c \u6bd4 ps aux | wc -c \u7edf\u8ba1\u7684\u8fdb\u7a0b\u6570\u4e0d\u540c==","title":"\u5b9e\u4f8b\uff1a\u81ea\u5efa\u7ba1\u9053\u5b9e\u73b0shell\u547d\u4ee4(ps aux)"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_42","text":"int flags = fcntl(fd[0], F_GETFL); // \u83b7\u53d6\u539f\u6765\u7684flag flags |= O_NONBLOCK; // \u4fee\u6539flag\u7684\u503c fcntl(fd[0], F_SETFL, flags); // \u8bbe\u7f6e\u65b0\u7684flag","title":"\u8bbe\u7f6e\u7ba1\u9053\u975e\u963b\u585e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_43","text":"\u8bfb\u7ba1\u9053 \u7ba1\u9053\u4e2d\u6709\u6570\u636e\uff0cread\u8fd4\u56de\u5b9e\u9645\u8bfb\u5230\u7684\u5b57\u8282\u6570 \u7ba1\u9053\u4e2d\u65e0\u6570\u636e \u5199\u7aef\u88ab\u5168\u90e8\u5173\u95ed\uff0cread\u8fd4\u56de0\uff08\u76f8\u5f53\u4e8e\u8bfb\u5230\u6587\u4ef6\u7684\u672b\u5c3e\uff09 \u5199\u7aef\u6ca1\u6709\u5b8c\u5168\u5173\u95ed\uff0cread\u963b\u585e\u7b49\u5f85 \u5199\u7ba1\u9053 \u7ba1\u9053\u8bfb\u7aef\u5168\u90e8\u88ab\u5173\u95ed\uff0c\u8fdb\u7a0b\u5f02\u5e38\u7ec8\u6b62\uff08\u8fdb\u7a0b\u6536\u5230 SIGPIPE \u4fe1\u53f7\uff09 \u7ba1\u9053\u8bfb\u7aef\u6ca1\u6709\u5168\u90e8\u5173\u95ed\uff1a \u7ba1\u9053\u5df2\u6ee1\uff0cwrite\u963b\u585e \u7ba1\u9053\u6ca1\u6709\u6ee1\uff0cwrite\u5c06\u6570\u636e\u5199\u5165\uff0c\u5e76\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570","title":"\u8bfb\u5199\u7279\u70b9\u603b\u7ed3"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_44","text":"","title":"\u6709\u540d\u7ba1\u9053"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_45","text":"\u533f\u540d\u7ba1\u9053\uff0c\u7531\u4e8e\u6ca1\u6709\u540d\u5b57\uff0c\u53ea\u80fd\u7528\u4e8e\u4eb2\u7f18\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002\u4e3a\u4e86\u514b\u670d\u8fd9\u4e2a\u7f3a\u70b9\uff0c\u63d0\u51fa\u4e86 \u6709\u540d\u7ba1\u9053\uff08FIFO\uff09 \uff0c\u4e5f\u53eb \u547d\u540d\u7ba1\u9053 \u3001 FIFO\u6587\u4ef6 \u6709\u540d\u7ba1\u9053\uff08FIFO\uff09 \u4e0d\u540c\u4e8e\u533f\u540d\u7ba1\u9053\u4e4b\u5904\u5728\u4e8e\u5b83 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8def\u5f84\u540d\u4e0e\u4e4b\u5173\u8054 \uff0c\u4ee5 FIFO \u7684\u6587\u4ef6\u5f62\u5f0f\u5b58\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d \uff0c\u5e76\u4e14\u5176\u6253\u5f00\u65b9\u5f0f\u4e0e\u6253\u5f00\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u5373\u4f7f\u4e0e FIFO \u7684\u521b\u5efa\u8fdb\u7a0b\u4e0d\u5b58\u5728\u4eb2\u7f18\u5173\u7cfb\u7684\u8fdb\u7a0b\uff0c\u53ea\u8981\u53ef\u4ee5\u8bbf\u95ee\u8be5\u8def\u5f84\uff0c\u5c31\u80fd\u591f\u5f7c\u6b64\u901a\u8fc7 FIFO \u76f8\u4e92\u901a\u4fe1\uff0c\u56e0\u6b64\uff0c\u901a\u8fc7 FIFO \u4e0d\u76f8\u5173\u7684\u8fdb\u7a0b\u4e5f\u80fd\u4ea4\u6362\u6570\u636e \u4e00\u65e6\u6253\u5f00\u4e86 FIFO \uff0c\u5c31\u80fd\u5728\u5b83\u4e0a\u9762\u4f7f\u7528\u4e0e\u64cd\u4f5c\u533f\u540d\u7ba1\u9053\u548c\u5176\u4ed6\u6587\u4ef6\u7684\u7cfb\u7edf\u8c03\u7528\u4e00\u6837\u7684I/O\u7cfb\u7edf\u8c03\u7528\u4e86\uff08\u5982 read() \u3001 write() \u548c close() \uff09\u3002\u4e0e\u7ba1\u9053\u4e00\u6837\uff0c FIFO \u4e5f\u6709\u4e00\u4e2a\u5199\u5165\u7aef\u548c\u8bfb\u53d6\u7aef\uff0c\u5e76\u4e14\u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u987a\u5e8f\u4e0e\u5199\u5165\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\u3002FIFO \u7684\u540d\u79f0\u4e5f\u7531\u6b64\u800c\u6765\uff1a\u5148\u5165\u5148\u51fa \u6709\u540d\u7ba1\u9053\uff08FIFO) \u548c \u533f\u540d\u7ba1\u9053\uff08pipe\uff09 \u6709\u4e00\u4e9b\u7279\u70b9\u662f\u76f8\u540c\u7684\uff0c\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e FIFO \u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u7279\u6b8a\u6587\u4ef6\u5b58\u5728\uff0c\u4f46 FIFO \u4e2d\u7684 \u5185\u5bb9\u5374\u5b58\u653e\u5728\u5185\u5b58\u4e2d \u5f53\u4f7f\u7528 FIFO \u7684\u8fdb\u7a0b\u9000\u51fa\u540e\uff0c FIFO \u6587\u4ef6\u5c06\u7ee7\u7eed\u4fdd\u5b58\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5\u4fbf\u4ee5\u540e\u4f7f\u7528 FIFO \u6709\u540d\u5b57\uff0c\u4e0d\u76f8\u5173\u7684\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u6253\u5f00\u6709\u540d\u7ba1\u9053\u8fdb\u884c\u901a\u4fe1 \u53ef\u4f7f\u7528 man fifo \u67e5\u770b\u5e2e\u52a9","title":"\u6982\u5ff5\u53ca\u4f7f\u7528"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_46","text":"shell\u547d\u4ee4\u521b\u5efa\uff1a mkfifo \u6587\u4ef6\u540d \uff0c\u53ef\u901a\u8fc7 man 1 mkfifo \u67e5\u770b\u5e2e\u52a9 \u51fd\u6570\u521b\u5efa\uff1a int mkfifo(const char *pathname, mode_t mode); \uff0c\u53ef\u901a\u8fc7 man 3 mkfifo \u67e5\u770b\u5e2e\u52a9 ```c #include #include #include #include #include int main() { // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 int ret = access(\"test\", F_OK); // \u4e0d\u5b58\u5728\u5219\u521b\u5efa if (ret == -1) { printf(\"\u7ba1\u9053\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u7ba1\u9053...\\n\"); ret = mkfifo(\"test\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(0); } } return 0; } ```","title":"\u521b\u5efa\u6709\u540d\u7ba1\u9053"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_47","text":"\u5199\u7aef ```c #include #include #include #include #include #include #include // \u5411\u7ba1\u9053\u4e2d\u5199\u6570\u636e int main() { // 1.\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 int ret = access(\"test\", F_OK); if(ret == -1) { printf(\"\u7ba1\u9053\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u7ba1\u9053\\n\"); // 2.\u521b\u5efa\u7ba1\u9053\u6587\u4ef6 ret = mkfifo(\"test\", 0664); if(ret == -1) { perror(\"mkfifo\"); exit(0); } } // 3.\u4ee5\u53ea\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u7ba1\u9053 int fd = open(\"test\", O_WRONLY); if(fd == -1) { perror(\"open\"); exit(0); } // \u5199\u6570\u636e for(int i = 0; i < 100; i++) { char buf[1024]; sprintf(buf, \"hello, %d\\n\", i); printf(\"write data : %s\\n\", buf); write(fd, buf, strlen(buf)); sleep(1); } close(fd); return 0; } ``` \u8bfb\u7aef ```c #include #include #include #include #include #include // \u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e int main() { // 1.\u6253\u5f00\u7ba1\u9053\u6587\u4ef6 int fd = open(\"test\", O_RDONLY); if(fd == -1) { perror(\"open\"); exit(0); } // \u8bfb\u6570\u636e while(1) { char buf[1024] = {0}; // \u8fd9\u91cc\u4e0d\u80fd\u5199strlen(buf) \u56e0\u4e3a\u8fd9\u91cc\u7684\u542b\u4e49\u662f\u6bcf\u6b21\u6309\u56fa\u5b9a\u957f\u5ea6\u8bfb\u53d6\uff0c\u6700\u5f00\u59cbstrlen(buf)=0 int len = read(fd, buf, sizeof(buf)); if(len == 0) { printf(\"\u5199\u7aef\u65ad\u5f00\u8fde\u63a5\u4e86...\\n\"); break; } printf(\"recv buf : %s\\n\", buf); } close(fd); return 0; } ``` \u8fd0\u884c \u5f53\u5199\u7aef\u5f00\u59cb\u5199\u6570\u636e\uff0c\u4f46\u8bfb\u7aef\u6ca1\u6709\u542f\u52a8\u65f6\uff0c\u5199\u7aef\u963b\u585e \u5f53\u8bfb\u7aef\u5f00\u59cb\u8bfb\u6570\u636e\uff0c\u4f46\u5199\u7aef\u6ca1\u6709\u542f\u52a8\u65f6\uff0c\u8bfb\u7aef\u963b\u585e \u4e24\u7aef\u90fd\u542f\u52a8\u65f6\uff0c\u6b63\u5e38\u8f93\u51fa\uff08\u65e0\u5173\u54ea\u4e2a\u5148\u542f\u52a8\uff09 \u5148\u5173\u95ed\u8bfb\u7aef \u5148\u5173\u95ed\u5199\u7aef","title":"\u5b9e\u4f8b\uff1a\u4e24\u8fdb\u7a0b\u901a\u8fc7\u6709\u540d\u7ba1\u9053\u901a\u4fe1\uff08\u5355\u4e00\u53d1\u9001\uff09"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_48","text":"\u529f\u80fd\uff1a\u4e24\u4e2a\u8fdb\u7a0b\u76f8\u4e92\u53d1\u9001\u6570\u636e\u53ca\u63a5\u6536\u6570\u636e\uff0c\u80fd\u591f\u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536 \u601d\u8def \u7531\u4e8e\u4e24\u4e2a\u8fdb\u7a0b\u5e76\u6ca1\u6709\u4eb2\u7f18\u5173\u7cfb\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u6709\u540d\u7ba1\u9053\u5b9e\u73b0 \u9700\u8981\u4e24\u4e2a\u7ba1\u9053 \u4e00\u4e2a\u7ba1\u9053\u7528\u4e8e\u8fdb\u7a0bA\u7684\u5199\u4e0e\u8fdb\u7a0bB\u7684\u8bfb \u4e00\u4e2a\u7ba1\u9053\u7528\u4e8e\u8fdb\u7a0bB\u7684\u5199\u4e0e\u8fdb\u7a0bA\u7684\u8bfb \u9700\u8981\u7236\u5b50\u8fdb\u7a0b\uff0c\u5b9e\u73b0\u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536 \u7236\u8fdb\u7a0b\u8d1f\u8d23\u5199\u5165\u6570\u636e\u5230\u7ba1\u9053 \u5b50\u8fdb\u7a0b\u8d1f\u8d23\u4ece\u7ba1\u9053\u8bfb\u53d6\u6570\u636e \u6d41\u7a0b\uff08\u4e0d\u5305\u542b\u7236\u5b50\u8fdb\u7a0b\uff0c\u5373\u4e0b\u56fe\u6240\u793a\u6d41\u7a0b\u4e0d\u80fd\u5b9e\u73b0\u8fde\u7eed\u53d1\u9001\u529f\u80fd\uff09 \u8fdb\u7a0bA ```c / chatA 1. \u8bfb\u3001\u5199\u6570\u636e\u5206\u5f00\uff0c\u7528\u4e24\u4e2a\u7ba1\u9053 1. fifo1\u7528\u4e8e\u8fdb\u7a0bA\u5199\u53ca\u8fdb\u7a0bB\u8bfb 2. fifo2\u7528\u4e8e\u8fdb\u7a0bB\u5199\u53ca\u8fdb\u7a0bA\u8bfb 2. \u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536\u4fe1\u606f\uff0c\u4f7f\u7528\u4e24\u4e2a\u8fdb\u7a0b 1. \u7236\u8fdb\u7a0b\u7528\u4e8e\u5199\u6570\u636e 2. \u5b50\u8fdb\u7a0b\u7528\u4e8e\u8bfb\u6570\u636e / #include #include #include #include #include #include #include #include int main() { // \u5224\u65ad\u5199\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa int ret = access(\"fifo1\", F_OK); if (ret == -1) { printf(\"fifo1\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo1\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u5224\u65ad\u8bfb\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa ret = access(\"fifo2\", F_OK); if (ret == -1) { printf(\"fifo2\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo2\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u521b\u5efa\u8fdb\u7a0b pid_t pid = fork(); char buf[1024]; if (pid > 0) { // \u7236\u8fdb\u7a0b // \u6253\u5f00\u5199\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdw = open(\"fifo1\", O_WRONLY); while (1) { // \u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165 printf(\"[chatA]please input: \\n\"); fgets(buf, sizeof(buf), stdin); write(fdw, buf, strlen(buf)); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdw); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b // \u6253\u5f00\u8bfb\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdr = open(\"fifo2\", O_RDONLY); while (1) { char buf[1024]; int len = read(fdr, buf, sizeof(buf)); if(len == 0) { printf(\"[chatA]\u5199\u7aef\u65ad\u5f00\u8fde\u63a5\u4e86...\\n\"); break; } printf(\"[chatA]recv : %s\", buf); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdr); } else { perror(\"fork\"); exit(-2); } return 0; } ``` \u8fdb\u7a0bB ```c / chatB 1. \u8bfb\u3001\u5199\u6570\u636e\u5206\u5f00\uff0c\u7528\u4e24\u4e2a\u7ba1\u9053 1. fifo1\u7528\u4e8e\u8fdb\u7a0bA\u5199\u53ca\u8fdb\u7a0bB\u8bfb 2. fifo2\u7528\u4e8e\u8fdb\u7a0bB\u5199\u53ca\u8fdb\u7a0bA\u8bfb 2. \u8fde\u7eed\u53d1\u9001\u53ca\u63a5\u6536\u4fe1\u606f\uff0c\u4f7f\u7528\u4e24\u4e2a\u8fdb\u7a0b 1. \u7236\u8fdb\u7a0b\u7528\u4e8e\u5199\u6570\u636e 2. \u5b50\u8fdb\u7a0b\u7528\u4e8e\u8bfb\u6570\u636e / #include #include #include #include #include #include #include #include int main() { // \u5224\u65ad\u5199\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa int ret = access(\"fifo1\", F_OK); if (ret == -1) { printf(\"fifo1\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo1\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u5224\u65ad\u8bfb\u7ba1\u9053\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa ret = access(\"fifo2\", F_OK); if (ret == -1) { printf(\"fifo2\u4e0d\u5b58\u5728\uff0c\u521b\u5efa...\\n\"); ret = mkfifo(\"fifo2\", 0664); if (ret == -1) { perror(\"mkfifo\"); exit(-1); } } // \u521b\u5efa\u8fdb\u7a0b pid_t pid = fork(); char buf[1024] = { 0 }; if (pid > 0) { // \u7236\u8fdb\u7a0b // \u6253\u5f00\u5199\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdw = open(\"fifo2\", O_WRONLY); while (1) { // \u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165 printf(\"[chatB]please input: \\n\"); fgets(buf, sizeof(buf), stdin); write(fdw, buf, strlen(buf)); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdw); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b // \u6253\u5f00\u8bfb\u7ba1\u9053 // \u6253\u5f00\u4e00\u6b21\uff0c\u5426\u5219\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5d29 int fdr = open(\"fifo1\", O_RDONLY); while (1) { char buf[1024]; int len = read(fdr, buf, sizeof(buf)); if(len == 0) { printf(\"[chatB]\u5199\u7aef\u65ad\u5f00\u8fde\u63a5\u4e86...\\n\"); break; } printf(\"[chatB]recv : %s\", buf); // \u6e05\u7a7a\u6570\u7ec4 memset(buf, 0, sizeof(buf)); } close(fdr); } else { perror(\"fork\"); exit(-2); } return 0; } ``` \u8fd0\u884c\u7ed3\u679c ==\u5b58\u5728\u7684\u95ee\u9898==\uff1a \u4e71\u7801 \u4e00\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u540e\uff0c\u53e6\u4e00\u4e2a\u8fd8\u672a\u7ed3\u675f\uff0c\u9700\u8981\u624b\u52a8\u5173\u95ed","title":"\u5b9e\u4f8b\uff1a\u7b80\u6613\u7248\u804a\u5929\u529f\u80fd\uff08\u8fde\u7eed\u53d1\u9001\uff09"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_49","text":"\u8bfb\u7ba1\u9053 \u7ba1\u9053\u4e2d\u6709\u6570\u636e\uff0c read \u8fd4\u56de\u5b9e\u9645\u8bfb\u5230\u7684\u5b57\u8282\u6570 \u7ba1\u9053\u4e2d\u65e0\u6570\u636e\uff1a \u7ba1\u9053\u5199\u7aef\u88ab\u5168\u90e8\u5173\u95ed\uff0c read \u8fd4\u56de0\uff0c\uff08\u76f8\u5f53\u4e8e\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\uff09 \u5199\u7aef\u6ca1\u6709\u5168\u90e8\u88ab\u5173\u95ed\uff0c read \u963b\u585e\u7b49\u5f85 \u5199\u7ba1\u9053 \u7ba1\u9053\u8bfb\u7aef\u88ab\u5168\u90e8\u5173\u95ed\uff0c\u8fdb\u884c\u5f02\u5e38\u7ec8\u6b62\uff08\u6536\u5230\u4e00\u4e2a SIGPIP \u4fe1\u53f7\uff09 \u7ba1\u9053\u8bfb\u7aef\u6ca1\u6709\u5168\u90e8\u5173\u95ed\uff1a \u7ba1\u9053\u5df2\u7ecf\u6ee1\u4e86\uff0c write \u4f1a\u963b\u585e \u7ba1\u9053\u6ca1\u6709\u6ee1\uff0c write \u5c06\u6570\u636e\u5199\u5165\uff0c\u5e76\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570","title":"\u8bfb\u5199\u7279\u70b9\u603b\u7ed3"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_50","text":"","title":"\u5185\u5b58\u6620\u5c04"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_51","text":"\u5185\u5b58\u6620\u5c04\uff08Memory-mapped I/O\uff09 \u662f\u5c06 \u78c1\u76d8\u6587\u4ef6\u7684\u6570\u636e\u6620\u5c04\u5230\u5185\u5b58 \uff0c\u7528\u6237\u901a\u8fc7\u4fee\u6539\u5185\u5b58\u5c31\u80fd\u4fee\u6539\u78c1\u76d8\u6587\u4ef6 \u5185\u5b58\u6620\u5c04\u76f8\u5173\u7cfb\u7edf\u8c03\u7528\uff0c\u4f7f\u7528 man 2 mmap \u67e5\u770b\u5e2e\u52a9 void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); \u529f\u80fd\uff1a\u5c06\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u8bbe\u5907\u7684\u6570\u636e\u6620\u5c04\u5230\u5185\u5b58\u4e2d \u53c2\u6570 addr \uff1a\u8bbe\u7f6e\u4e3a NULL\u65f6, \u7531\u5185\u6838\u6307\u5b9a\uff08\u63a8\u8350\u505a\u6cd5\uff09 length : \u8981\u6620\u5c04\u7684\u6570\u636e\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u503c \u4e0d\u80fd\u4e3a0\u3002\u5efa\u8bae\u4f7f\u7528\u6587\u4ef6\u7684\u957f\u5ea6 \uff0c\u83b7\u53d6\u6587\u4ef6\u7684\u957f\u5ea6\uff1a stat \uff0c lseek prot : \u5bf9\u7533\u8bf7\u7684\u5185\u5b58\u6620\u5c04\u533a\u7684\u64cd\u4f5c\u6743\u9650 PROT_EXEC \uff1a\u53ef\u6267\u884c\u7684\u6743\u9650 PROT_READ \uff1a\u8bfb\u6743\u9650 PROT_WRITE \uff1a\u5199\u6743\u9650 PROT_NONE \uff1a\u6ca1\u6709\u6743\u9650 flags MAP_SHARED : \u6620\u5c04\u533a\u7684\u6570\u636e\u4f1a\u81ea\u52a8\u548c\u78c1\u76d8\u6587\u4ef6\u8fdb\u884c\u540c\u6b65\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u5fc5\u987b\u8981\u8bbe\u7f6e\u8fd9\u4e2a\u9009\u9879 MAP_PRIVATE \uff1a\u4e0d\u540c\u6b65\uff0c\u5185\u5b58\u6620\u5c04\u533a\u7684\u6570\u636e\u6539\u53d8\u4e86\uff0c\u5bf9\u539f\u6765\u7684\u6587\u4ef6\u4e0d\u4f1a\u4fee\u6539\uff0c\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u3002\uff08 copy on write \uff09 fd : \u9700\u8981\u6620\u5c04\u7684\u90a3\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u901a\u8fc7 open \u5f97\u5230\uff0c open \u7684\u662f\u4e00\u4e2a\u78c1\u76d8\u6587\u4ef6 offset \uff1a\u504f\u79fb\u91cf\uff0c\u4e00\u822c\u8fdb\u884c\u7279\u6b8a\u6307\u5b9a\uff08\u6307\u5b9a\u4e3a0\u5373\u53ef\uff09\uff0c\u5982\u679c\u4f7f\u7528\u5fc5\u987b\u6307\u5b9a\u7684\u662f 4k \u7684\u6574\u6570\u500d\uff0c0\u8868\u793a\u4e0d\u504f\u79fb \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u521b\u5efa\u7684\u5185\u5b58\u7684\u9996\u5730\u5740\u3002\u5931\u8d25\u8fd4\u56de MAP_FAILED(\u5373(void *) -1) int munmap(void *addr, size_t length); \u529f\u80fd\uff1a\u91ca\u653e\u5185\u5b58\u6620\u5c04 \u53c2\u6570 addr : \u8981\u91ca\u653e\u7684\u5185\u5b58\u7684\u9996\u5730\u5740 length : \u8981\u91ca\u653e\u7684\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u8981\u548c mmap \u51fd\u6570\u4e2d\u7684length\u53c2\u6570\u7684\u503c\u4e00\u6837","title":"\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_52","text":"\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\uff08\u7236\u5b50\u8fdb\u7a0b\uff09 \u8fd8\u6ca1\u6709\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u552f\u4e00\u7684\u7236\u8fdb\u7a0b\uff0c\u5148\u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a \u6709\u4e86\u5185\u5b58\u6620\u5c04\u533a\u4ee5\u540e\uff0c\u521b\u5efa\u5b50\u8fdb\u7a0b \u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u521b\u5efa\u7684\u5185\u5b58\u6620\u5c04\u533a \u6ca1\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u51c6\u5907\u4e00\u4e2a\u5927\u5c0f\u4e0d\u662f0\u7684\u78c1\u76d8\u6587\u4ef6 \u8fdb\u7a0b1 \u901a\u8fc7\u78c1\u76d8\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a\uff0c\u5f97\u5230\u4e00\u4e2a\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\u7684\u6307\u9488 \u8fdb\u7a0b2 \u901a\u8fc7\u78c1\u76d8\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a\uff0c\u5f97\u5230\u4e00\u4e2a\u64cd\u4f5c\u8fd9\u5757\u5185\u5b58\u7684\u6307\u9488 \u4f7f\u7528\u5185\u5b58\u6620\u5c04\u533a\u901a\u4fe1","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1\u79cd\u7c7b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_53","text":"\u8981\u64cd\u4f5c\u6620\u5c04\u5185\u5b58\uff0c \u5fc5\u987b\u8981\u6709\u8bfb\u7684\u6743\u9650 \uff0c\u5373\u6743\u9650\u4e3a PROT_READ \u6216 PROT_READ|PROT_WRITE \u5728\u4f7f\u7528 \u5185\u5b58\u6620\u5c04 \u901a\u4fe1\u65f6\uff0c\u4f7f\u7528\u6587\u4ef6\u7684\u5927\u5c0f\u4e0d\u80fd\u4e3a0\uff0c open \u6307\u5b9a\u7684\u6743\u9650\u4e0d\u80fd\u548c prot \u53c2\u6570\u6709\u51b2\u7a81 prot open PROT_READ O_RDONLY \u6216 O_RDWR PROT_READ | PROT_WRITE O_RDWR \u5185\u5b58\u6620\u5c04\u533a\u901a\u4fe1\uff0c\u662f\u975e\u963b\u585e \u4e00\u4e2a\u6587\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u5185\u5b58\u6620\u5c04\u533a \u5982\u679c\u5bf9 mmap \u7684\u8fd4\u56de\u503c( ptr )\u505a ++\u64cd\u4f5c(ptr++) , munmap \u662f\u5426\u80fd\u591f\u6210\u529f? \u4e0d\u80fd\u6210\u529f\uff0c\u56e0\u4e3a\u56de\u6536\u8d44\u6e90\u65f6\uff0c\u9700\u8981\u4f20\u9012\u6307\u9488\uff0c\u5982\u679c\u53d8\u5316\uff0c\u5c06\u4f1a\u56de\u6536\u5931\u8d25 \u5982\u679c open \u65f6 O_RDONLY , mmap \u65f6 prot \u53c2\u6570\u6307\u5b9a PROT_READ | PROT_WRITE \u4f1a\u600e\u6837? \u9519\u8bef\uff0c\u8fd4\u56de MAP_FAILED \uff0c open() \u51fd\u6570\u4e2d\u7684\u6743\u9650\u5efa\u8bae\u548c prot \u53c2\u6570\u7684\u6743\u9650\u4fdd\u6301\u4e00\u81f4 \u5982\u679c\u6587\u4ef6\u504f\u79fb\u91cf\u4e3a1000\u4f1a\u600e\u6837? \u504f\u79fb\u91cf\u5fc5\u987b\u662f 4K \u7684\u6574\u6570\u500d\uff0c\u8fd4\u56de MAP_FAILED mmap \u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528\u5931\u8d25? \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1alength = 0 \u7b2c\u4e09\u4e2a\u53c2\u6570\uff1a prot \u53ea\u6307\u5b9a\u5199\u6743\u9650 prot \u548c open() \u4e24\u8005\u7684\u6743\u9650\u4e0d\u5339\u914d \u53ef\u4ee5open\u7684\u65f6\u5019 O_CREAT \u4e00\u4e2a\u65b0\u6587\u4ef6\u6765\u521b\u5efa\u6620\u5c04\u533a\u5417? \u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u521b\u5efa\u7684\u6587\u4ef6\u7684\u5927\u5c0f\u5982\u679c\u4e3a0\u7684\u8bdd\uff0c\u80af\u5b9a\u4e0d\u884c(\u56e0\u4e3a mmap \u8c03\u7528\u65f6\uff0c\u957f\u5ea6\u4e0d\u5141\u8bb8\u4e3a0) mmap \u540e\u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5bf9 mmap \u6620\u5c04\u6709\u6ca1\u6709\u5f71\u54cd\uff1f \u6620\u5c04\u533a\u8fd8\u5b58\u5728\uff0c\u521b\u5efa\u6620\u5c04\u533a\u7684 fd \u88ab\u5173\u95ed\uff0c\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd \u5bf9 ptr \u8d8a\u754c\u64cd\u4f5c\u4f1a\u600e\u6837\uff1f \u8d8a\u754c\u64cd\u4f5c\u64cd\u4f5c\u7684\u662f\u975e\u6cd5\u7684\u5185\u5b58 -> \u6bb5\u9519\u8bef","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_54","text":"\u601d\u8def \u6253\u5f00\u6307\u5b9a\u6587\u4ef6\u5e76\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6 \u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a \u7236\u5b50\u8fdb\u7a0b\u529f\u80fd\uff0c\u7236\u8fdb\u7a0b\u8d1f\u8d23\u6536\u6570\u636e\uff0c\u5b50\u8fdb\u7a0b\u8d1f\u8d23\u53d1\u6570\u636e \u56de\u6536\u8d44\u6e90 code ```c #include #include #include #include #include #include #include #include int main() { // \u6253\u5f00\u6307\u5b9a\u6587\u4ef6 int fd = open(\"ipc.txt\", O_RDWR); // \u83b7\u53d6\u7ed9\u5b9a\u6587\u4ef6\u957f\u5ea6 int size = lseek(fd, 0, SEEK_END); // \u521b\u5efa\u5185\u5b58\u6620\u5c04\u533a void ptr = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0); // \u5224\u65ad\u662f\u5426\u6210\u529f if (ptr == MAP_FAILED) { perror(\"mmap\"); exit(-1); } // \u521b\u5efa\u5b50\u8fdb\u7a0b pid_t pid = fork(); if (pid > 0) { // \u7236\u8fdb\u7a0b\uff0c\u7528\u4e8e\u8bfb\u53d6\u6570\u636e // \u56de\u6536\u5b50\u8fdb\u7a0b wait(NULL); // \u63a5\u6536\u6570\u636e\u5e76\u6253\u5370 char buf[64]; // \u7c7b\u578b\u9700\u8981\u5f3a\u8f6c strcpy(buf, (char )ptr); printf(\"recv : %s\\n\", buf); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b\uff0c\u7528\u4e8e\u53d1\u9001\u6570\u636e // \u7c7b\u578b\u9700\u8981\u5f3a\u8f6c strcpy((char *)ptr, \"hello, i am child process\"); } else { perror(\"fork\"); exit(-1); } // \u5173\u95ed\u5185\u5b58\u6620\u5c04\u533a munmap(ptr, size); // \u5173\u95ed\u6587\u4ef6 close(fd); return 0; } ``` \u6ce8\u610f\uff1a\u7a0b\u5e8f\u6267\u884c\u540e\uff0c\u6587\u4ef6\u5927\u5c0f\u4e0d\u6539\u53d8\uff0c\u90a3\u4e48\u5b50\u8fdb\u7a0b\u5199\u5165\u7684\u6570\u636e\u4f1a\u88ab\u622a\u65ad\uff0c==\u539f\u56e0\u672a\u77e5== \u6267\u884c\u524d \u6267\u884c\u540e","title":"\u5b9e\u4f8b\uff1a\u7236\u5b50\u8fdb\u7a0b\u901a\u4fe1"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_55","text":"\u601d\u8def \u9700\u8981\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f\u6709\u5185\u5bb9\u7684\u6587\u4ef6\uff08\u5f85\u62f7\u8d1d\u6587\u4ef6\uff09\uff0c\u4e00\u4e2a\u662f\u7a7a\u6587\u4ef6 \u7531\u4e8e\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u4e24\u4e2a\u5185\u5b58\u6620\u5c04\u533a \u7136\u540e\u5c06\u6587\u4ef6A\u7684\u5185\u5b58\u6620\u5c04\u533a\u5185\u5bb9\u62f7\u8d1d\u7ed9\u6587\u4ef6B\u7684\u5185\u5b58\u6620\u5c04\u533a \u56de\u6536\u8d44\u6e90 code ```c #include #include #include #include #include #include #include #include int main() { // \u6253\u5f00\u6e90\u6587\u4ef6\uff0c\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6\u5e76\u521b\u5efa\u5bf9\u5e94\u5185\u5b58\u6620\u5c04\u533a int fdSource = open(\"source.txt\", O_RDONLY); int len = lseek(fdSource, 0, SEEK_END); void *ptrSource = mmap(NULL, len, PROT_READ, MAP_SHARED, fdSource, 0); if (ptrSource == MAP_FAILED) { perror(\"mmap\"); exit(-1); } // \u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c\u5e76\u521b\u5efa\u5bf9\u5e94\u5185\u5b58\u6620\u5c04\u533a int fdTarget = open(\"target.txt\", O_RDWR | O_CREAT, 0664); // \u7531\u4e8e\u76ee\u6807\u6587\u4ef6\u662f\u901a\u8fc7\u521b\u5efa\u5f97\u5230\uff0c\u6240\u4ee5\u9700\u8981\u6269\u5c55\u957f\u5ea6\u4e0e\u6e90\u6587\u4ef6\u4fdd\u6301\u4e00\u81f4 truncate(\"target.txt\", len); // \u5982\u679c\u4e0d\u52a0\uff0c\u6269\u5c55\u53ef\u80fd\u5931\u8d25\uff08\u4fdd\u9669\u8d77\u89c1\uff09 write(fdTarget, \" \", 1); void *ptrTarget = mmap(NULL, len, PROT_READ | PROT_WRITE, MAP_SHARED, fdTarget, 0); if (ptrTarget == MAP_FAILED) { perror(\"mmap\"); exit(-1); } // \u5185\u5b58\u62f7\u8d1d memcpy(ptrTarget, ptrSource, len); // \u56de\u6536\u8d44\u6e90 close(fdTarget); close(fdSource); munmap(ptrTarget, len); munmap(ptrSource, len); return 0; } ``` output \u6267\u884c\u524d \u6267\u884c\u540e","title":"\u5b9e\u4f8b\uff1a\u6587\u4ef6\u62f7\u8d1d"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_56","text":"\u601d\u8def \u533f\u540d\u5185\u5b58\u6620\u5c04\u4e0d\u5b58\u5728\u6587\u4ef6\u5b9e\u4f53\uff0c\u90a3\u4e48\u53ea\u80fd\u901a\u8fc7\u7236\u5b50\u8fdb\u7a0b\u5b9e\u73b0 \u7236\u5b50\u8fdb\u7a0b\u64cd\u4f5c\u540c\u4e00\u5757\u533a\u57df\uff0c\u91cd\u70b9\u5728\u4e8e\u5185\u5b58\u6620\u5c04\u533a\u5728\u521b\u5efa\u65f6\u65b0\u589eflags\u53c2\u6570 MAP_ANONYMOUS \u7236\u8fdb\u7a0b\u8bfb\uff0c\u5b50\u8fdb\u7a0b\u5199 code ```c #include #include #include #include #include #include #include int main() { void ptr = mmap(NULL, 128, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0); if (ptr == MAP_FAILED) { perror(\"mmap\"); exit(-1); } pid_t pid = fork(); if (pid > 0) { // \u7236\u8fdb\u7a0b wait(NULL); char buf[128]; strcpy(buf, (char )ptr); printf(\"recv : %s\\n\", buf); } else if (pid == 0) { // \u5b50\u8fdb\u7a0b strcpy((char*)ptr, \"i am a message\"); } else { perror(\"fork\"); exit(-1); } // \u91ca\u653e\u8d44\u6e90 munmap(ptr, 128); return 0; } ``` output","title":"\u5b9e\u4f8b\uff1a\u533f\u540d\u5185\u5b58\u6620\u5c04"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_57","text":"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u4fe1\u53f7"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_58","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/07 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u4fe1\u53f7","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_59","text":"\u4fe1\u53f7\u662f Linux \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u6700\u53e4\u8001\u7684\u65b9\u5f0f\u4e4b\u4e00\uff0c\u662f\u4e8b\u4ef6\u53d1\u751f\u65f6\u5bf9\u8fdb\u7a0b\u7684\u901a\u77e5\u673a\u5236\uff0c\u6709\u65f6\u4e5f\u79f0\u4e4b\u4e3a\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u5b83\u662f\u5728\u8f6f\u4ef6\u5c42\u6b21\u4e0a\u5bf9\u4e2d\u65ad\u673a\u5236\u7684\u4e00\u79cd\u6a21\u62df\uff0c\u662f\u4e00\u79cd\u5f02\u6b65\u901a\u4fe1\u7684\u65b9\u5f0f\u3002\u4fe1\u53f7\u53ef\u4ee5\u5bfc\u81f4\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u88ab\u53e6\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5f02\u6b65\u8fdb\u7a0b\u4e2d\u65ad\uff0c\u8f6c\u800c\u5904\u7406\u67d0\u4e00\u4e2a\u7a81\u53d1\u4e8b\u4ef6 \u53d1\u5f80\u8fdb\u7a0b\u7684\u8bf8\u591a\u4fe1\u53f7\uff0c\u901a\u5e38\u90fd\u662f\u6e90\u4e8e\u5185\u6838\u3002\u5f15\u53d1\u5185\u6838\u4e3a\u8fdb\u7a0b\u4ea7\u751f\u4fe1\u53f7\u7684\u5404\u7c7b\u4e8b\u4ef6\u5982\u4e0b \u5bf9\u4e8e\u524d\u53f0\u8fdb\u7a0b\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u7279\u6b8a\u7684\u7ec8\u7aef\u5b57\u7b26\u6765\u7ed9\u5b83\u53d1\u9001\u4fe1\u53f7\u3002\u6bd4\u5982\u8f93\u5165 Ctrl+C \u901a\u5e38\u4f1a\u7ed9\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7 \u786c\u4ef6\u53d1\u751f\u5f02\u5e38\uff0c\u5373\u786c\u4ef6\u68c0\u6d4b\u5230\u4e00\u4e2a\u9519\u8bef\u6761\u4ef6\u5e76\u901a\u77e5\u5185\u6838\uff0c\u968f\u5373\u518d\u7531\u5185\u6838\u53d1\u9001\u76f8\u5e94\u4fe1\u53f7\u7ed9\u76f8\u5173\u8fdb\u7a0b\u3002\u6bd4\u5982\u6267\u884c\u4e00\u6761\u5f02\u5e38\u7684\u673a\u5668\u8bed\u8a00\u6307\u4ee4\uff0c\u8bf8\u5982\u88ab 0 \u9664\uff0c\u6216\u8005\u5f15\u7528\u4e86\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u5b58\u533a\u57df \u7cfb\u7edf\u72b6\u6001\u53d8\u5316\uff0c\u6bd4\u5982 alarm \u5b9a\u65f6\u5668\u5230\u671f\u5c06\u5f15\u8d77 SIGALRM \u4fe1\u53f7\uff0c\u8fdb\u7a0b\u6267\u884c\u7684 CPU \u65f6\u95f4\u8d85\u9650\uff0c\u6216\u8005\u8be5\u8fdb\u7a0b\u7684\u67d0\u4e2a\u5b50\u8fdb\u7a0b\u9000\u51fa \u8fd0\u884c kill \u547d\u4ee4\u6216\u8c03\u7528 kill \u51fd\u6570 \u4f7f\u7528\u4fe1\u53f7\u7684\u4e24\u4e2a\u4e3b\u8981\u76ee\u7684\u662f \u8ba9\u8fdb\u7a0b\u77e5\u9053\u5df2\u7ecf\u53d1\u751f\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684\u4e8b\u60c5 \u5f3a\u8feb\u8fdb\u7a0b\u6267\u884c\u5b83\u81ea\u5df1\u4ee3\u7801\u4e2d\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f \u4fe1\u53f7\u7684\u7279\u70b9 \u7b80\u5355 \u4e0d\u80fd\u643a\u5e26\u5927\u91cf\u4fe1\u606f \u6ee1\u8db3\u67d0\u4e2a\u7279\u5b9a\u6761\u4ef6\u624d\u53d1\u9001 \u4f18\u5148\u7ea7\u6bd4\u8f83\u9ad8 \u67e5\u770b\u7cfb\u7edf\u5b9a\u4e49\u7684\u4fe1\u53f7\u5217\u8868\uff1a kill \u2013l \uff0c\u524d 31 \u4e2a\u4fe1\u53f7\u4e3a\u5e38\u89c4\u4fe1\u53f7\uff0c\u5176\u4f59\u4e3a\u5b9e\u65f6\u4fe1\u53f7","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_60","text":"\u53ef\u901a\u8fc7 man 7 signal \u67e5\u770b\u5e2e\u52a9 \u4fe1\u53f7\u7684 5 \u4e2d\u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c Term \uff1a\u7ec8\u6b62\u8fdb\u7a0b Ign \uff1a\u5f53\u524d\u8fdb\u7a0b\u5ffd\u7565\u6389\u8fd9\u4e2a\u4fe1\u53f7 Core \uff1a\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5e76\u751f\u6210\u4e00\u4e2aCore\u6587\u4ef6 Stop \uff1a\u6682\u505c\u5f53\u524d\u8fdb\u7a0b Cont \uff1a\u7ee7\u7eed\u6267\u884c\u5f53\u524d\u88ab\u6682\u505c\u7684\u8fdb\u7a0b \u4fe1\u53f7\u7684\u51e0\u79cd\u72b6\u6001\uff1a \u4ea7\u751f \u3001 \u672a\u51b3 \u3001 \u9012\u8fbe SIGKILL \u548c SIGSTOP \u4fe1\u53f7\u4e0d\u80fd\u88ab\u6355\u6349\u3001\u963b\u585e\u6216\u8005\u5ffd\u7565\uff0c\u53ea\u80fd\u6267\u884c\u9ed8\u8ba4\u52a8\u4f5c \u7ea2\u8272\u6807\u8bb0\u4ee3\u8868\u9700\u8981\u719f\u7ec3\u638c\u63e1","title":"\u4fe1\u53f7\u4e00\u89c8\u8868\u53ca\u7279\u70b9"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_61","text":"","title":"\u4fe1\u53f7\u76f8\u5173\u7684\u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#core","text":"\u5f53\u8fdb\u7a0b\u5f02\u5e38\u7ec8\u6b62\u65f6\uff0c\u4f1a\u751f\u6210 core \u6587\u4ef6\uff08\u9700\u8981\u8fdb\u884c\u76f8\u5e94\u8bbe\u7f6e\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7 gdb \u8c03\u8bd5\u67e5\u770b\u9519\u8bef\uff0c\u8c03\u8bd5\u4ee5\u4e0b\u7a0b\u5e8f code ```c #include #include int main() { char* buf; strcpy(buf, \"core test\"); return 0; } ``` \u751f\u6210\u8c03\u8bd5 core \u6587\u4ef6\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u6b65 \u4f7f\u7528 ulimit -a \u67e5\u770b\u8d44\u6e90\u4e0a\u9650 \u4fee\u6539 core size \uff1a ulimit -c core-size \u5728\u7f16\u8bd1\u8fd0\u884c\u7a0b\u5e8f\u65f6\u52a0\u4e0a -g \u9009\u9879\u4f7f\u5f97\u80fd\u591f\u88ab gdb \u8c03\u8bd5\uff0c\u8fd0\u884c\u540e\u751f\u6210 core \u6587\u4ef6 \u8c03\u8bd5 core \u7a0b\u5e8f\uff1a gdb test \u8fdb\u5165 gdb \u7ec8\u7aef\uff0c\u4f7f\u7528 core-file core \u53ef\u4ee5\u67e5\u770b core \u5b9a\u4f4d\u9519\u8bef","title":"core\u6587\u4ef6\u751f\u6210\u53ca\u8c03\u8bd5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#kill-raise-abort","text":"int kill(pid_t pid, int sig); \u4f7f\u7528 man 2 kill \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u7ed9 \u4efb\u4f55\u7684\u8fdb\u7a0b\u6216\u8005\u8fdb\u7a0b\u7ec4 pid \uff0c\u53d1\u9001 \u4efb\u4f55\u7684\u4fe1\u53f7 sig \u53c2\u6570 pid > 0 : \u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u6307\u5b9a\u7684\u8fdb\u7a0b = 0 : \u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u5f53\u524d\u7684\u8fdb\u7a0b\u7ec4 = -1 : \u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u6bcf\u4e00\u4e2a\u6709\u6743\u9650\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7\u7684\u8fdb\u7a0b < -1 : \u8fd9\u4e2a pid=\u67d0\u4e2a\u8fdb\u7a0b\u7ec4\u7684ID\u53d6\u53cd sig : \u9700\u8981\u53d1\u9001\u7684\u4fe1\u53f7\u7684\u7f16\u53f7\u6216\u8005\u662f\u5b8f\u503c\uff0c0\u8868\u793a\u4e0d\u53d1\u9001\u4efb\u4f55\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a0\u6210\u529f\uff0c-1\u5931\u8d25 int raise(int sig); \u4f7f\u7528 man 3 raise \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u7ed9 \u5f53\u524d\u8fdb\u7a0b \u53d1\u9001\u4fe1\u53f7 \u53c2\u6570\uff1a sig : \u8981\u53d1\u9001\u7684\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a0\u6210\u529f\uff0c\u975e0\u5931\u8d25 void abort(void); \u4f7f\u7528 man 3 abort \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a \u53d1\u9001 SIGABRT \u4fe1\u53f7\u7ed9\u5f53\u524d\u7684\u8fdb\u7a0b\uff0c \u6740\u6b7b\u5f53\u524d\u8fdb\u7a0b #include <stdio.h> #include <sys/types.h> #include <signal.h> #include <unistd.h> int main() { pid_t pid = fork(); if(pid == 0) { // \u5b50\u8fdb\u7a0b int i = 0; for(i = 0; i < 5; i++) { printf(\"child process\\n\"); sleep(1); } } else if(pid > 0) { // \u7236\u8fdb\u7a0b printf(\"parent process\\n\"); sleep(2); printf(\"kill child process now\\n\"); kill(pid, SIGINT); } return 0; }","title":"kill &amp; raise &amp; abort"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#alarm-setitimer","text":"\u533a\u522b\uff1a alarm \u53ea\u80fd\u5b9a\u4e00\u6b21\u65f6\uff0c setitimer \u53ef\u4ee5\u5468\u671f\u6027\u5b9a\u65f6 unsigned int alarm(unsigned int seconds); \u4f7f\u7528 man 2 alarm \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff08\u95f9\u949f\uff09\u3002\u51fd\u6570\u8c03\u7528\uff0c\u5f00\u59cb\u5012\u8ba1\u65f6\uff0c\u5f53\u5012\u8ba1\u65f6\u4e3a0\u7684\u65f6\u5019\uff0c\u51fd\u6570\u4f1a\u7ed9\u5f53\u524d\u7684\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff1a SIGALARM \u53c2\u6570\uff1a seconds \uff0c\u5012\u8ba1\u65f6\u7684\u65f6\u957f\uff0c\u5355\u4f4d\uff1a\u79d2\u3002\u5982\u679c\u53c2\u6570\u4e3a0\uff0c\u5b9a\u65f6\u5668\u65e0\u6548\uff08\u4e0d\u8fdb\u884c\u5012\u8ba1\u65f6\uff0c\u4e0d\u53d1\u4fe1\u53f7\uff09 \u53d6\u6d88\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u901a\u8fc7 alarm(0) \u8fd4\u56de\u503c \u4e4b\u524d\u6ca1\u6709\u5b9a\u65f6\u5668\uff0c\u8fd4\u56de0 \u4e4b\u524d\u6709\u5b9a\u65f6\u5668\uff0c\u8fd4\u56de\u4e4b\u524d\u7684\u5b9a\u65f6\u5668\u5269\u4f59\u7684\u65f6\u95f4 SIGALARM \uff1a\u9ed8\u8ba4\u7ec8\u6b62 \u5f53\u524d\u7684\u8fdb\u7a0b \uff0c\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e14\u53ea\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5b9a\u65f6\u5668 \u5b9a\u65f6\u5668\uff0c\u4e0e\u8fdb\u7a0b\u7684\u72b6\u6001\u65e0\u5173\uff08\u81ea\u7136\u5b9a\u65f6\u6cd5\uff09\u3002\u65e0\u8bba\u8fdb\u7a0b\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\uff0calarm\u90fd\u4f1a\u8ba1\u65f6\uff0c\u5373 \u51fd\u6570\u4e0d\u963b\u585e #include <stdio.h> #include <unistd.h> int main() { int seconds = alarm(5); printf(\"seconds = %d\\n\", seconds); // 0 sleep(2); seconds = alarm(2); // \u4e0d\u963b\u585e printf(\"seconds = %d\\n\", seconds); // 3 while(1) { } return 0; } int setitimer(int which, const struct itimerval *new_val, struct itimerval *old_value); \u4f7f\u7528 man 2 setitimer \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u8bbe\u7f6e\u5b9a\u65f6\u5668\uff08\u95f9\u949f\uff09\u3002\u53ef\u4ee5\u66ff\u4ee3alarm\u51fd\u6570\u3002\u7cbe\u5ea6\u5fae\u5999us\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5468\u671f\u6027\u5b9a\u65f6 \u53c2\u6570 which : \u5b9a\u65f6\u5668\u4ee5\u4ec0\u4e48\u65f6\u95f4\u8ba1\u65f6 ITIMER_REAL : \u771f\u5b9e\u65f6\u95f4\uff0c\u65f6\u95f4\u5230\u8fbe\uff0c\u53d1\u9001 SIGALRM (\u5e38\u7528) ITIMER_VIRTUAL : \u7528\u6237\u65f6\u95f4\uff0c\u65f6\u95f4\u5230\u8fbe\uff0c\u53d1\u9001 SIGVTALRM ITIMER_PROF : \u4ee5\u8be5\u8fdb\u7a0b\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e0b\u6240\u6d88\u8017\u7684\u65f6\u95f4\u6765\u8ba1\u7b97\uff0c\u65f6\u95f4\u5230\u8fbe\uff0c\u53d1\u9001 SIGPROF new_value : \u8bbe\u7f6e\u5b9a\u65f6\u5668\u7684\u5c5e\u6027 old_value \uff1a\u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u5b9a\u65f6\u7684\u65f6\u95f4\u53c2\u6570\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\uff0c\u6307\u5b9aNULL \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c\u5931\u8d25 -1 \u5e76\u8bbe\u7f6e\u9519\u8bef\u53f7 struct itimerval ```c struct itimerval { // \u5b9a\u65f6\u5668\u7684\u7ed3\u6784\u4f53 struct timeval it_interval; // \u6bcf\u4e2a\u9636\u6bb5\u7684\u65f6\u95f4\uff0c\u95f4\u9694\u65f6\u95f4 struct timeval it_value; // \u5ef6\u8fdf\u591a\u957f\u65f6\u95f4\u6267\u884c\u5b9a\u65f6\u5668 }; struct timeval { // \u65f6\u95f4\u7684\u7ed3\u6784\u4f53 time_t tv_sec; // \u79d2\u6570 suseconds_t tv_usec; // \u5fae\u79d2 }; // \u8fc7it_value\u79d2\u540e\uff0c\u6bcf\u9694it_interval\u79d2\u5b9a\u65f6\u4e00\u6b21 ``` \u5b9e\u73b0 \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 =>\u56e0\u4e3a\u6ca1\u6709 \u4fe1\u53f7\u6355\u6349 \uff0c\u6240\u4ee5\u8fd8\u6ca1\u6709\u5b9e\u73b0\u8fd9\u6837\u7684\u6548\u679c ```c #include #include #include // \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 int main() { struct itimerval new_value; // \u8bbe\u7f6e\u95f4\u9694\u7684\u65f6\u95f4 new_value.it_interval.tv_sec = 2; new_value.it_interval.tv_usec = 0; // \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u65f6\u95f4,3\u79d2\u4e4b\u540e\u5f00\u59cb\u7b2c\u4e00\u6b21\u5b9a\u65f6 new_value.it_value.tv_sec = 3; new_value.it_value.tv_usec = 0; int ret = setitimer(ITIMER_REAL, &new_value, NULL); // \u975e\u963b\u585e\u7684 printf(\"\u5b9a\u65f6\u5668\u5f00\u59cb\u4e86...\\n\"); if(ret == -1) { perror(\"setitimer\"); exit(0); } getchar(); return 0; } ```","title":"alarm &amp; setitimer"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_62","text":"","title":"\u4fe1\u53f7\u6355\u6349\u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#signal","text":"sighandler_t signal(int signum, sighandler_t handler); \u4f7f\u7528 man 2 signal \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u8bbe\u7f6e\u67d0\u4e2a\u4fe1\u53f7\u7684\u6355\u6349\u884c\u4e3a \u53c2\u6570 signum : \u8981\u6355\u6349\u7684\u4fe1\u53f7 handler : \u6355\u6349\u5230\u4fe1\u53f7\u8981\u5982\u4f55\u5904\u7406 SIG_IGN \uff1a \u5ffd\u7565\u4fe1\u53f7 SIG_DFL \uff1a \u4f7f\u7528\u4fe1\u53f7\u9ed8\u8ba4\u7684\u884c\u4e3a \u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570 \u8fd4\u56de\u503c \u6210\u529f\uff0c\u8fd4\u56de\u4e0a\u4e00\u6b21\u6ce8\u518c\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u5730\u5740\u3002\u7b2c\u4e00\u6b21\u8c03\u7528\u8fd4\u56deNULL \u5931\u8d25\uff0c\u8fd4\u56deSIG_ERR\uff0c\u8bbe\u7f6e\u9519\u8bef\u53f7 \u6ce8\u610f\uff1a\u8fd4\u56de\u503c\u5b9a\u4e49\u5728\u5b8f __USE_GNU \u4e2d\uff0c\u9700\u8981\u6307\u5b9a\u6216\u8005\u76f4\u63a5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528 typedef __sighandler_t sighandler_t; SIGKILL \u548c SIGSTOP \u4e0d\u80fd\u88ab\u6355\u6349\uff0c\u4e0d\u80fd\u88ab\u5ffd\u7565 \u5b8c\u5584 \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21\u7684\u5b9a\u65f6\u5668\u529f\u80fd ```c #include #include #include #include void myalarm(int num) { printf(\"\u6355\u6349\u5230\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\uff1a%d\\n\", num); printf(\"xxxxxxx\\n\"); } // \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 int main() { // \u6ce8\u518c\u4fe1\u53f7\u6355\u6349 // signal(SIGALRM, SIG_IGN); // signal(SIGALRM, SIG_DFL); // void (*sighandler_t)(int); \u51fd\u6570\u6307\u9488\uff0cint\u7c7b\u578b\u7684\u53c2\u6570\u8868\u793a\u6355\u6349\u5230\u7684\u4fe1\u53f7\u7684\u503c // \u6355\u6349\u7684\u4fe1\u53f7\u53f3\u5b9a\u65f6\u5668\u53d1\u51fa signal(SIGALRM, myalarm); struct itimerval new_value; // \u8bbe\u7f6e\u95f4\u9694\u7684\u65f6\u95f4 new_value.it_interval.tv_sec = 2; new_value.it_interval.tv_usec = 0; // \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u65f6\u95f4,3\u79d2\u4e4b\u540e\u5f00\u59cb\u7b2c\u4e00\u6b21\u5b9a\u65f6 new_value.it_value.tv_sec = 3; new_value.it_value.tv_usec = 0; int ret = setitimer(ITIMER_REAL, &new_value, NULL); // \u975e\u963b\u585e\u7684 printf(\"\u5b9a\u65f6\u5668\u5f00\u59cb\u4e86...\\n\"); if(ret == -1) { perror(\"setitimer\"); exit(0); } getchar(); return 0; } ```","title":"signal"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#sigaction","text":"int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact); \u4f7f\u7528 man 2 sigaction \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u68c0\u67e5\u6216\u8005\u6539\u53d8\u4fe1\u53f7\u7684\u5904\u7406\uff0c\u5373\u4fe1\u53f7\u6355\u6349 \u53c2\u6570 signum : \u9700\u8981\u6355\u6349\u7684\u4fe1\u53f7\u7684\u7f16\u53f7\u6216\u8005\u5b8f\u503c\uff08\u4fe1\u53f7\u7684\u540d\u79f0\uff09 act \uff1a\u6355\u6349\u5230\u4fe1\u53f7\u4e4b\u540e\u7684\u5904\u7406\u52a8\u4f5c oldact : \u4e0a\u4e00\u6b21\u5bf9\u4fe1\u53f7\u6355\u6349\u76f8\u5173\u7684\u8bbe\u7f6e\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\uff0c\u8bbe\u7f6e\u4e3aNULL \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 struct sigaction c struct sigaction { // \u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u7684\u51fd\u6570\u5c31\u662f\u4fe1\u53f7\u6355\u6349\u5230\u4e4b\u540e\u7684\u5904\u7406\u51fd\u6570 void (*sa_handler)(int); // \u4e0d\u5e38\u7528 void (*sa_sigaction)(int, siginfo_t *, void *); // \u4e34\u65f6\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u5728\u4fe1\u53f7\u6355\u6349\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e34\u65f6\u963b\u585e\u67d0\u4e9b\u4fe1\u53f7\u3002 sigset_t sa_mask; // \u4f7f\u7528\u54ea\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u5bf9\u6355\u6349\u5230\u7684\u4fe1\u53f7\u8fdb\u884c\u5904\u7406 // \u8fd9\u4e2a\u503c\u53ef\u4ee5\u662f0\uff0c\u8868\u793a\u4f7f\u7528sa_handler,\u4e5f\u53ef\u4ee5\u662fSA_SIGINFO\u8868\u793a\u4f7f\u7528sa_sigaction int sa_flags; // \u88ab\u5e9f\u5f03\u6389\u4e86 void (*sa_restorer)(void); }; #include <sys/time.h> #include <stdio.h> #include <stdlib.h> #include <signal.h> void myalarm(int num) { printf(\"\u6355\u6349\u5230\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\uff1a%d\\n\", num); printf(\"xxxxxxx\\n\"); } // \u8fc73\u79d2\u4ee5\u540e\uff0c\u6bcf\u96942\u79d2\u949f\u5b9a\u65f6\u4e00\u6b21 int main() { struct sigaction act; act.sa_flags = 0; act.sa_handler = myalarm; sigemptyset(&act.sa_mask); // \u6e05\u7a7a\u4e34\u65f6\u963b\u585e\u4fe1\u53f7\u96c6 // \u6ce8\u518c\u4fe1\u53f7\u6355\u6349 sigaction(SIGALRM, &act, NULL); struct itimerval new_value; // \u8bbe\u7f6e\u95f4\u9694\u7684\u65f6\u95f4 new_value.it_interval.tv_sec = 2; new_value.it_interval.tv_usec = 0; // \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u65f6\u95f4,3\u79d2\u4e4b\u540e\u5f00\u59cb\u7b2c\u4e00\u6b21\u5b9a\u65f6 new_value.it_value.tv_sec = 3; new_value.it_value.tv_usec = 0; int ret = setitimer(ITIMER_REAL, &new_value, NULL); // \u975e\u963b\u585e\u7684 printf(\"\u5b9a\u65f6\u5668\u5f00\u59cb\u4e86...\\n\"); if(ret == -1) { perror(\"setitimer\"); exit(0); } // getchar(); while(1); return 0; }","title":"sigaction"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#signalsigaction","text":"\u53c2\u6570\u533a\u522b \u7248\u672c\u533a\u522b\uff0c signal \u5728\u4e0d\u540c\u7248\u672cLinux\u4e2d\uff0c\u884c\u4e3a\u4e0d\u4e00\u81f4\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528 sigaction \uff08 ubutun \u4e0b\u4e24\u8005\u4e00\u81f4\uff09","title":"signal\u548csigaction\u533a\u522b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_63","text":"","title":"\u5185\u6838\u5b9e\u73b0\u4fe1\u53f7\u6355\u6349\u7684\u8fc7\u7a0b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_64","text":"signal \u4e2d\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a getchar() \u963b\u585e\u4fe1\u53f7\uff0c\u800c sigaction \u4e2d\u8c03\u7528\u51e0\u6b21\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u8981\u4f7f\u7528\u591a\u5c11\u4e2a getchar()","title":"==\u672a\u89e3\u51b3=="},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_65","text":"","title":"\u4fe1\u53f7\u96c6"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_66","text":"\u4f7f\u7528 man 3 sigset \u67e5\u770b\u5e2e\u52a9 \u8bb8\u591a\u4fe1\u53f7\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u9700\u8981\u80fd\u8868\u793a\u4e00\u7ec4\u4e0d\u540c\u7684\u4fe1\u53f7\uff0c\u591a\u4e2a\u4fe1\u53f7\u53ef\u4f7f\u7528\u4e00\u4e2a\u79f0\u4e4b\u4e3a\u4fe1\u53f7\u96c6\u7684\u6570\u636e\u7ed3\u6784\u6765\u8868\u793a\uff0c\u5176\u7cfb\u7edf\u6570\u636e\u7c7b\u578b\u4e3a sigset_t \u5728 PCB \u4e2d\u6709\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4fe1\u53f7\u96c6\u3002\u4e00\u4e2a\u79f0\u4e4b\u4e3a \u963b\u585e\u4fe1\u53f7\u96c6 \uff0c\u53e6\u4e00\u4e2a\u79f0\u4e4b\u4e3a \u672a\u51b3\u4fe1\u53f7\u96c6 \u3002\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u96c6\u90fd\u662f \u5185\u6838\u4f7f\u7528\u4f4d\u56fe\u673a\u5236\u6765\u5b9e\u73b0 \u7684\u3002\u4f46\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u5141\u8bb8\u6211\u4eec\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u96c6\u8fdb\u884c\u4f4d\u64cd\u4f5c\u3002\u800c\u9700\u81ea\u5b9a\u4e49\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\uff0c\u501f\u52a9\u4fe1\u53f7\u96c6\u64cd\u4f5c\u51fd\u6570\u6765\u5bf9 PCB \u4e2d\u7684\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u96c6\u8fdb\u884c\u4fee\u6539 \u4fe1\u53f7\u7684 \u672a\u51b3 \u662f\u4e00\u79cd\u72b6\u6001\uff0c\u6307\u7684\u662f \u4ece\u4fe1\u53f7\u7684\u4ea7\u751f\u5230\u4fe1\u53f7\u88ab\u5904\u7406\u524d\u7684\u8fd9\u4e00\u6bb5\u65f6\u95f4 \u4fe1\u53f7\u7684 \u963b\u585e \u662f\u4e00\u4e2a\u5f00\u5173\u52a8\u4f5c\uff0c\u6307\u7684\u662f \u963b\u6b62\u4fe1\u53f7\u88ab\u5904\u7406\uff0c\u4f46\u4e0d\u662f\u963b\u6b62\u4fe1\u53f7\u4ea7\u751f \u3002\u4fe1\u53f7\u7684\u963b\u585e\u5c31\u662f\u8ba9\u7cfb\u7edf\u6682\u65f6\u4fdd\u7559\u4fe1\u53f7\u7559\u5f85\u4ee5\u540e\u53d1\u9001\u3002\u7531\u4e8e\u53e6\u5916\u6709\u529e\u6cd5\u8ba9\u7cfb\u7edf\u5ffd\u7565\u4fe1\u53f7\uff0c\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\u4fe1\u53f7\u7684\u963b\u585e\u53ea\u662f\u6682\u65f6\u7684\uff0c\u53ea\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u6253\u65ad\u654f\u611f\u7684\u64cd\u4f5c","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_67","text":"\u7528\u6237\u901a\u8fc7\u952e\u76d8 Ctrl + C , \u4ea7\u751f2\u53f7\u4fe1\u53f7 SIGINT (\u4fe1\u53f7\u88ab\u521b\u5efa) \u4fe1\u53f7\u4ea7\u751f\u4f46\u662f\u6ca1\u6709\u88ab\u5904\u7406 \uff08\u672a\u51b3\uff09 \u5728\u5185\u6838\u4e2d\u5c06\u6240\u6709\u7684\u6ca1\u6709\u88ab\u5904\u7406\u7684\u4fe1\u53f7\u5b58\u50a8\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d \uff08\u672a\u51b3\u4fe1\u53f7\u96c6\uff09 SIGINT \u4fe1\u53f7\u72b6\u6001\u88ab\u5b58\u50a8\u5728\u7b2c\u4e8c\u4e2a\u6807\u5fd7\u4f4d\u4e0a \u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7684\u503c\u4e3a0\uff0c \u8bf4\u660e\u4fe1\u53f7\u4e0d\u662f\u672a\u51b3\u72b6\u6001 \u8fd9\u4e2a\u6807\u5fd7\u4f4d\u7684\u503c\u4e3a1\uff0c \u8bf4\u660e\u4fe1\u53f7\u5904\u4e8e\u672a\u51b3\u72b6\u6001 \u8fd9\u4e2a\u672a\u51b3\u72b6\u6001\u7684\u4fe1\u53f7\uff0c\u9700\u8981\u88ab\u5904\u7406\uff0c\u5904\u7406\u4e4b\u524d\u9700\u8981\u548c\u53e6\u4e00\u4e2a\u4fe1\u53f7\u96c6\uff08\u963b\u585e\u4fe1\u53f7\u96c6\uff09\uff0c\u8fdb\u884c\u6bd4\u8f83 \u963b\u585e\u4fe1\u53f7\u96c6\u9ed8\u8ba4\u4e0d\u963b\u585e\u4efb\u4f55\u7684\u4fe1\u53f7 \u5982\u679c\u60f3\u8981\u963b\u585e\u67d0\u4e9b\u4fe1\u53f7\u9700\u8981\u7528\u6237\u8c03\u7528\u7cfb\u7edf\u7684API \u5728\u5904\u7406\u7684\u65f6\u5019\u548c\u963b\u585e\u4fe1\u53f7\u96c6\u4e2d\u7684\u6807\u5fd7\u4f4d\u8fdb\u884c\u67e5\u8be2\uff0c\u770b\u662f\u4e0d\u662f\u5bf9\u8be5\u4fe1\u53f7\u8bbe\u7f6e\u963b\u585e\u4e86 \u5982\u679c\u6ca1\u6709\u963b\u585e\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5c31\u88ab\u5904\u7406 \u5982\u679c\u963b\u585e\u4e86\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5c31\u7ee7\u7eed\u5904\u4e8e\u672a\u51b3\u72b6\u6001\uff0c\u76f4\u5230\u963b\u585e\u89e3\u9664\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u5c31\u88ab\u5904\u7406","title":"\u963b\u585e\u4fe1\u53f7\u96c6\u4e0e\u975e\u963b\u585e\u4fe1\u53f7\u96c6\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#sigemptyset","text":"\u4f7f\u7528 man 3 sigemptyset \u67e5\u770b\u5e2e\u52a9 int sigemptyset(sigset_t *set); \u529f\u80fd\uff1a\u6e05\u7a7a\u4fe1\u53f7\u96c6\u4e2d\u7684\u6570\u636e\uff0c\u5c06\u4fe1\u53f7\u96c6\u4e2d\u7684\u6240\u6709\u7684\u6807\u5fd7\u4f4d\u7f6e\u4e3a0 \u53c2\u6570\uff1a set \uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigfillset(sigset_t *set); \u529f\u80fd\uff1a\u5c06\u4fe1\u53f7\u96c6\u4e2d\u7684\u6240\u6709\u7684\u6807\u5fd7\u4f4d\u7f6e\u4e3a1 \u53c2\u6570\uff1a set \uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigaddset(sigset_t *set, int signum); \u529f\u80fd\uff1a\u8bbe\u7f6e\u4fe1\u53f7\u96c6\u4e2d\u7684\u67d0\u4e00\u4e2a\u4fe1\u53f7\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u4e3a1\uff0c\u8868\u793a\u963b\u585e\u8fd9\u4e2a\u4fe1\u53f7 \u53c2\u6570 set \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 signum \uff1a\u9700\u8981\u8bbe\u7f6e\u963b\u585e\u7684\u90a3\u4e2a\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigdelset(sigset_t *set, int signum); \u529f\u80fd\uff1a\u8bbe\u7f6e\u4fe1\u53f7\u96c6\u4e2d\u7684\u67d0\u4e00\u4e2a\u4fe1\u53f7\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u4e3a0\uff0c\u8868\u793a\u4e0d\u963b\u585e\u8fd9\u4e2a\u4fe1\u53f7 \u53c2\u6570 set \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 signum \uff1a\u9700\u8981\u8bbe\u7f6e\u4e0d\u963b\u585e\u7684\u90a3\u4e2a\u4fe1\u53f7 \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigismember(const sigset_t *set, int signum); \u529f\u80fd\uff1a\u5224\u65ad\u67d0\u4e2a\u4fe1\u53f7\u662f\u5426\u963b\u585e \u53c2\u6570 set \uff1a\u4f20\u5165\u53c2\u6570\uff0c\u9700\u8981\u64cd\u4f5c\u7684\u4fe1\u53f7\u96c6 signum \uff1a\u9700\u8981\u5224\u65ad\u7684\u90a3\u4e2a\u4fe1\u53f7 \u8fd4\u56de\u503c 1 \uff1a signum \u88ab\u963b\u585e 0 \uff1a signum \u4e0d\u963b\u585e -1 \uff1a \u5931\u8d25 #include <signal.h> #include <stdio.h> int main() { // \u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u96c6 sigset_t set; // \u6e05\u7a7a\u4fe1\u53f7\u96c6\u7684\u5185\u5bb9 sigemptyset(&set); // \u5224\u65ad SIGINT \u662f\u5426\u5728\u4fe1\u53f7\u96c6 set \u91cc int ret = sigismember(&set, SIGINT); if(ret == 0) { printf(\"SIGINT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGINT \u963b\u585e\\n\"); } // \u6dfb\u52a0\u51e0\u4e2a\u4fe1\u53f7\u5230\u4fe1\u53f7\u96c6\u4e2d sigaddset(&set, SIGINT); sigaddset(&set, SIGQUIT); // \u5224\u65adSIGINT\u662f\u5426\u5728\u4fe1\u53f7\u96c6\u4e2d ret = sigismember(&set, SIGINT); if(ret == 0) { printf(\"SIGINT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGINT \u963b\u585e\\n\"); } // \u5224\u65adSIGQUIT\u662f\u5426\u5728\u4fe1\u53f7\u96c6\u4e2d ret = sigismember(&set, SIGQUIT); if(ret == 0) { printf(\"SIGQUIT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGQUIT \u963b\u585e\\n\"); } // \u4ece\u4fe1\u53f7\u96c6\u4e2d\u5220\u9664\u4e00\u4e2a\u4fe1\u53f7 sigdelset(&set, SIGQUIT); // \u5224\u65adSIGQUIT\u662f\u5426\u5728\u4fe1\u53f7\u96c6\u4e2d ret = sigismember(&set, SIGQUIT); if(ret == 0) { printf(\"SIGQUIT \u4e0d\u963b\u585e\\n\"); } else if(ret == 1) { printf(\"SIGQUIT \u963b\u585e\\n\"); } return 0; }","title":"\u64cd\u4f5c\u81ea\u5b9a\u4e49\u4fe1\u53f7\u96c6\u51fd\u6570(sigemptyset\u7b49)"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#sigprocmask-sigpending","text":"int sigprocmask(int how, const sigset_t *set, sigset_t *oldset); \u4f7f\u7528 man 2 sigprocmask \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5c06\u81ea\u5b9a\u4e49\u4fe1\u53f7\u96c6\u4e2d\u7684\u6570\u636e\u8bbe\u7f6e\u5230\u5185\u6838\u4e2d\uff08\u8bbe\u7f6e\u963b\u585e\uff0c\u89e3\u9664\u963b\u585e\uff0c\u66ff\u6362\uff09 \u53c2\u6570 how : \u5982\u4f55\u5bf9\u5185\u6838\u963b\u585e\u4fe1\u53f7\u96c6\u8fdb\u884c\u5904\u7406 SIG_BLOCK : \u5c06\u7528\u6237\u8bbe\u7f6e\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u6dfb\u52a0\u5230\u5185\u6838\u4e2d\uff0c\u5185\u6838\u4e2d\u539f\u6765\u7684\u6570\u636e\u4e0d\u53d8\u3002\u5047\u8bbe\u5185\u6838\u4e2d\u9ed8\u8ba4\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u662fmask\uff0c \u76f8\u5f53\u4e8e mask | set SIG_UNBLOCK : \u6839\u636e\u7528\u6237\u8bbe\u7f6e\u7684\u6570\u636e\uff0c\u5bf9\u5185\u6838\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u89e3\u9664\u963b\u585e\u3002\u76f8\u5f53\u4e8e mask &= ~set SIG_SETMASK \uff1a\u8986\u76d6\u5185\u6838\u4e2d\u539f\u6765\u7684\u503c set \uff1a\u5df2\u7ecf\u521d\u59cb\u5316\u597d\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\u96c6 oldset : \u4fdd\u5b58\u8bbe\u7f6e\u4e4b\u524d\u7684\u5185\u6838\u4e2d\u7684\u963b\u585e\u4fe1\u53f7\u96c6\u7684\u72b6\u6001\uff0c\u4e00\u822c\u4e0d\u4f7f\u7528\uff0c\u8bbe\u7f6e\u4e3a NULL \u5373\u53ef \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 int sigpending(sigset_t *set); \u4f7f\u7528 man 2 sigpending \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u83b7\u53d6\u5185\u6838\u4e2d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6 \u53c2\u6570\uff1aset\uff0c\u4f20\u51fa\u53c2\u6570\uff0c\u4fdd\u5b58\u7684\u662f\u5185\u6838\u4e2d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6\u4e2d\u7684\u4fe1\u606f \u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de0\uff0c \u5931\u8d25\u8fd4\u56de-1 #include <stdio.h> #include <signal.h> #include <stdlib.h> #include <unistd.h> int main() { // \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u4fe1\u53f7\u96c6 sigset_t set; // \u6e05\u7a7a\u4fe1\u53f7\u96c6 sigemptyset(&set); // \u8bbe\u7f6e2 3\u53f7\u4fe1\u53f7\u963b\u585e sigaddset(&set, SIGINT); sigaddset(&set, SIGQUIT); // \u4fee\u6539\u5185\u6838\u4e2d\u7684\u963b\u585e\u4fe1\u53f7\u96c6 sigprocmask(SIG_BLOCK, &set, NULL); int num = 0; // \u5faa\u73af\u83b7\u53d6\u5f53\u524d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6\u7684\u6570\u636e while (1) { // \u8ba1\u6570\uff0c\u7528\u4ee5\u9000\u51fa\u5faa\u73af num++; sigset_t pendingset; // \u6e05\u7a7a sigemptyset(&pendingset); // \u83b7\u53d6\u5f53\u524d\u7684\u672a\u51b3\u4fe1\u53f7\u96c6\u7684\u6570\u636e sigpending(&pendingset); // \u904d\u5386\u524d32\u4f4d for(int i = 1; i <= 31; i++) { if(sigismember(&pendingset, i) == 1) { printf(\"1\"); }else if(sigismember(&pendingset, i) == 0) { printf(\"0\"); }else { perror(\"sigismember\"); exit(0); } } printf(\"\\n\"); sleep(1); if(num == 10) { // \u89e3\u9664\u963b\u585e sigprocmask(SIG_UNBLOCK, &set, NULL); } } return 0; }","title":"\u64cd\u4f5c\u5185\u6838\u4fe1\u53f7\u96c6\u51fd\u6570(sigprocmask &amp; sigpending)"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#sigchld","text":"","title":"SIGCHLD\u4fe1\u53f7"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_68","text":"\u4f5c\u7528\uff1a\u89e3\u51b3 \u50f5\u5c38\u8fdb\u7a0b\u95ee\u9898 \uff0c\u80fd\u591f\u5728\u4e0d\u963b\u585e\u7236\u8fdb\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_69","text":"#include <stdio.h> #include <sys/types.h> #include <sys/stat.h> #include <unistd.h> #include <signal.h> #include <sys/wait.h> void myalarm(int num) { printf(\"\u6355\u6349\u5230\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\u662f\uff1a%d\\n\", num); // \u56de\u6536\u5b50\u8fdb\u7a0bPCB\u7684\u8d44\u6e90 // \u56e0\u4e3a\u53ef\u80fd\u591a\u4e2a\u5b50\u8fdb\u7a0b\u540c\u65f6\u6b7b\u4e86\uff0c\u6240\u4ee5\u4f7f\u7528while\u5faa\u73af // \u4e0d\u4f7f\u7528wait\u662f\u56e0\u4e3a\u4f1a\u9020\u6210\u963b\u585e\uff0c\u7236\u8fdb\u7a0b\u4e0d\u80fd\u7ee7\u7eed // \u4f7f\u7528waitpid\u53ef\u4ee5\u8bbe\u7f6e\u975e\u963b\u585e while (1) { int ret = waitpid(-1, NULL, WNOHANG); if(ret > 0) { // \u56de\u6536\u4e00\u4e2a\u5b50\u8fdb\u7a0b printf(\"child die , pid = %d\\n\", ret); } else if(ret == 0) { // \u8bf4\u660e\u8fd8\u6709\u5b50\u8fdb\u7a0b\u6d3b\u7740 break; } else if(ret == -1) { // \u6ca1\u6709\u5b50\u8fdb\u7a0b break; } } } int main() { // \u63d0\u524d\u8bbe\u7f6e\u597d\u963b\u585e\u4fe1\u53f7\u96c6\uff0c\u963b\u585eSIGCHLD\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u5b50\u8fdb\u7a0b\u5f88\u5feb\u7ed3\u675f\uff0c\u7236\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u6ce8\u518c\u5b8c\u4fe1\u53f7\u6355\u6349 sigset_t set; sigemptyset(&set); sigaddset(&set, SIGCHLD); sigprocmask(SIG_BLOCK, &set, NULL); pid_t pid; // \u521b\u5efa\u4e00\u4e9b\u5b50\u8fdb\u7a0b for (int i = 0; i < 20; i++) { pid = fork(); // \u5982\u679c\u662f\u5b50\u8fdb\u7a0b\uff0c\u4e0d\u5728\u4f5c\u4e3a\u7236\u8fdb\u7a0b\u7ee7\u7eed\u521b\u5efa\u5b50\u8fdb\u7a0b if (pid == 0) { break; } } // \u5b50\u8fdb\u7a0b\u5148\u7ed3\u675f\uff0c\u7236\u8fdb\u7a0b\u5faa\u73af=>\u4ea7\u751f\u50f5\u5c38\u8fdb\u7a0b if (pid > 0) { // \u7236\u8fdb\u7a0b // \u4f7f\u7528sigaction\u6355\u6349\u5b50\u8fdb\u7a0b\u6b7b\u4ea1\u65f6\u53d1\u9001\u7684SIGCHLD\u4fe1\u53f7 struct sigaction act; act.sa_flags = 0; act.sa_handler = myalarm; sigemptyset(&act.sa_mask); sigaction(SIGCHLD, &act, NULL); // \u6ce8\u518c\u5b8c\u4fe1\u53f7\u6355\u6349\u4ee5\u540e\uff0c\u89e3\u9664\u963b\u585e sigprocmask(SIG_UNBLOCK, &set, NULL); while (1) { printf(\"parent process : %d\\n\", getpid()); sleep(2); } } else { // \u5b50\u8fdb\u7a0b printf(\"child process : %d\\n\", getpid()); } return 0; }","title":"\u5b9e\u4f8b\uff1a\u50f5\u5c38\u95ee\u9898\u89e3\u51b3"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_70","text":"\u53ef\u80fd\u4f1a\u51fa\u73b0\u6bb5\u9519\u8bef\uff08\u4e0d\u4e00\u5b9a\u80fd\u590d\u73b0\uff09 \u539f\u56e0\uff1a\u5728\u6355\u83b7\u4fe1\u53f7\u6ce8\u518c\u524d\uff0c\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u6267\u884c\u5b8c \u5982\u679c\u4ece\u5f00\u59cb\u6ce8\u518c\u4fe1\u53f7\u5230\u6ce8\u518c\u6210\u529f\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u6709n\u4e2aSIGCHID\u4fe1\u53f7\u4ea7\u751f\u7684\u8bdd\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u4ea7\u751f\u7684SIGCHID\u4f1a\u62a2\u5148\u5c06\u672a\u51b3\u4f4d\u7f6e\u4e3a1\uff0c\u4f59\u4e0b\u7684n-1\u4e2aSIGCHID\u88ab\u4e22\u5f03\uff0c\u7136\u540e\u5f53\u963b\u585e\u89e3\u9664\u4e4b\u540e\uff0c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u53d1\u73b0\u8fd9\u65f6\u5019\u5bf9\u5e94\u4fe1\u53f7\u7684\u672a\u51b3\u4f4d\u4e3a1\uff0c\u7ee7\u800c\u6267\u884c\u51fd\u6570\u5904\u7406\u8be5\u4fe1\u53f7\uff0c\u5904\u7406\u51fd\u6570\u4e2d\u7684while\u5faa\u73af\u987a\u5e26\u5c06\u5176\u4ed6n-1\u5b50\u8fdb\u7a0b\u4e5f\u4e00\u7f51\u6253\u5c3d\u4e86\uff0c\u5728\u8fd9\u671f\u95f4\u672a\u51b3\u4f4d\u7684\u72b6\u6001\u53ea\u7ecf\u5386\u4e86\u4e24\u6b21\u53d8\u5316\uff0c\u53730->1->0 \u6355\u6349\u4e00\u6b21\u53ef\u80fd\u4f1a\u56de\u6536\u591a\u4e2a\u5b50\u8fdb\u7a0b","title":"\u6ce8\u610f"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_71","text":"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u5171\u4eab\u5185\u5b58"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_72","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/08 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u4e4b\u5171\u4eab\u5185\u5b58","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_73","text":"\u5171\u4eab\u5185\u5b58\u5141\u8bb8\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u7269\u7406\u5185\u5b58\u7684\u540c\u4e00\u5757\u533a\u57df\uff08\u901a\u5e38\u88ab\u79f0\u4e3a\u6bb5\uff09 \u3002\u7531\u4e8e\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6bb5\u4f1a\u79f0\u4e3a\u4e00\u4e2a\u8fdb\u7a0b\u7528\u6237\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u8fd9\u79cd IPC \u673a\u5236\u65e0\u9700\u5185\u6838\u4ecb\u5165\u3002\u6240\u6709\u9700\u8981\u505a\u7684\u5c31\u662f\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u6570\u636e\u590d\u5236\u8fdb\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u5e76\u4e14\u8fd9\u90e8\u5206\u6570\u636e\u4f1a\u5bf9\u5176\u4ed6\u6240\u6709\u5171\u4eab\u540c\u4e00\u4e2a\u6bb5\u7684\u8fdb\u7a0b\u53ef\u7528 \u4e0e\u7ba1\u9053\u7b49\u8981\u6c42\u53d1\u9001\u8fdb\u7a0b\u5c06\u6570\u636e\u4ece\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u590d\u5236\u8fdb\u5185\u6838\u5185\u5b58\u548c\u63a5\u6536\u8fdb\u7a0b\u5c06\u6570\u636e\u4ece\u5185\u6838\u5185\u5b58\u590d\u5236\u8fdb\u7528\u6237\u7a7a\u95f4\u7684\u7f13\u51b2\u533a\u7684\u505a\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u79cd IPC \u6280\u672f\u7684\u901f\u5ea6\u66f4\u5feb","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_74","text":"\u8c03\u7528 shmget() \u521b\u5efa\u4e00\u4e2a\u65b0\u5171\u4eab\u5185\u5b58\u6bb5\u6216\u53d6\u5f97\u4e00\u4e2a\u65e2\u6709\u5171\u4eab\u5185\u5b58\u6bb5\u7684\u6807\u8bc6\u7b26\uff08\u5373\u7531\u5176\u4ed6\u8fdb\u7a0b\u521b\u5efa\u7684\u5171\u4eab\u5185\u5b58\u6bb5\uff09\u3002\u8fd9\u4e2a\u8c03\u7528\u5c06\u8fd4\u56de\u540e\u7eed\u8c03\u7528\u4e2d\u9700\u8981\u7528\u5230\u7684\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26 \u4f7f\u7528 shmat() \u6765\u9644\u4e0a\u5171\u4eab\u5185\u5b58\u6bb5\uff0c\u5373\u4f7f\u8be5\u6bb5\u6210\u4e3a\u8c03\u7528\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u7684\u4e00\u90e8\u5206 \u6b64\u523b\u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u50cf\u5bf9\u5f85\u5176\u4ed6\u53ef\u7528\u5185\u5b58\u90a3\u6837\u5bf9\u5f85\u8fd9\u4e2a\u5171\u4eab\u5185\u5b58\u6bb5\u3002\u4e3a\u5f15\u7528\u8fd9\u5757\u5171\u4eab\u5185\u5b58\uff0c\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u7531 shmat() \u8c03\u7528\u8fd4\u56de\u7684 addr \u503c\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u8be5\u5171\u4eab\u5185\u5b58\u6bb5\u7684\u8d77\u70b9\u7684\u6307\u9488 \u8c03\u7528 shmdt() \u6765\u5206\u79bb\u5171\u4eab\u5185\u5b58\u6bb5\u3002\u5728\u8fd9\u4e2a\u8c03\u7528\u4e4b\u540e\uff0c\u8fdb\u7a0b\u5c31\u65e0\u6cd5\u518d\u5f15\u7528\u8fd9\u5757\u5171\u4eab\u5185\u5b58\u4e86\u3002\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u5728\u8fdb\u7a0b\u7ec8\u6b62\u65f6\u4f1a\u81ea\u52a8\u5b8c\u6210\u8fd9\u4e00\u6b65 \u8c03\u7528 shmctl() \u6765\u5220\u9664\u5171\u4eab\u5185\u5b58\u6bb5\u3002\u53ea\u6709\u5f53\u5f53\u524d\u6240\u6709\u9644\u52a0\u5185\u5b58\u6bb5\u7684\u8fdb\u7a0b\u90fd\u4e0e\u4e4b\u5206\u79bb\u4e4b\u540e\u5185\u5b58\u6bb5\u624d\u4f1a\u9500\u6bc1\u3002\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c\u8fd9\u4e00\u6b65","title":"\u5171\u4eab\u5185\u5b58\u4f7f\u7528\u6b65\u9aa4"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_75","text":"int shmget(key_t key, size_t size, int shmflg); \u4f7f\u7528 man 2 shmget \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5171\u4eab\u5185\u5b58\u6bb5\uff08\u65b0\u521b\u5efa\u7684\u5185\u5b58\u6bb5\u4e2d\u7684\u6570\u636e\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a0\uff09\uff0c\u6216\u8005\u83b7\u53d6\u4e00\u4e2a\u65e2\u6709\u7684\u5171\u4eab\u5185\u5b58\u6bb5\u7684\u6807\u8bc6 \u53c2\u6570 key \uff1a key_t \u7c7b\u578b\u662f\u4e00\u4e2a\u6574\u5f62\uff0c\u901a\u8fc7\u8fd9\u4e2a\u627e\u5230\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u3002\u4e00\u822c\u4f7f\u7528 16\u8fdb\u5236 \u8868\u793a\uff0c\u975e0\u503c size \uff1a\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f shmflg \uff1a\u5c5e\u6027 \u8bbf\u95ee\u6743\u9650 \u9644\u52a0\u5c5e\u6027\uff1a\u521b\u5efa/\u5224\u65ad\u5171\u4eab\u5185\u5b58\u662f\u4e0d\u662f\u5b58\u5728 \u521b\u5efa\uff1a IPC_CREAT \u5224\u65ad\u5171\u4eab\u5185\u5b58\u662f\u5426\u5b58\u5728\uff1a IPC_EXCL , \u9700\u8981\u548c IPC_CREAT \u4e00\u8d77\u4f7f\u7528\uff0c\u5373 IPC_CREAT | IPC_EXCL | 0664 \u8fd4\u56de\u503c \u5931\u8d25\uff1a-1 \u5e76\u8bbe\u7f6e\u9519\u8bef\u53f7 \u6210\u529f\uff1a>0 \u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684\u5f15\u7528\u7684ID\uff0c\u540e\u9762\u64cd\u4f5c\u5171\u4eab\u5185\u5b58\u90fd\u662f\u901a\u8fc7\u8fd9\u4e2a\u503c void *shmat(int shmid, const void *shmaddr, int shmflg); \u4f7f\u7528 man 2 shmat \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u548c\u5f53\u524d\u7684\u8fdb\u7a0b\u8fdb\u884c\u5173\u8054 \u53c2\u6570 shmid : \u5171\u4eab\u5185\u5b58\u7684\u6807\u8bc6\uff08ID\uff09\uff0c\u7531 shmget \u8fd4\u56de\u503c\u83b7\u53d6 shmaddr : \u7533\u8bf7\u7684\u5171\u4eab\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740\uff0c\u8bbe\u7f6e\u4e3aNULL\uff0c\u8868\u793a\u7531\u5185\u6838\u6307\u5b9a shmflg : \u5bf9\u5171\u4eab\u5185\u5b58\u7684\u64cd\u4f5c \u8bfb \uff1a SHM_RDONLY \uff0c\u5fc5\u987b\u8981\u6709\u8bfb\u6743\u9650 \u8bfb\u5199\uff1a \u6307\u5b9a\u4e3a0\u5373\u4e3a\u6709\u8bfb\u5199\u6743\u9650 \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff1a\u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684\u9996\uff08\u8d77\u59cb\uff09\u5730\u5740\u3002 \u5931\u8d25 (void *) -1 int shmdt(const void *shmaddr); \u4f7f\u7528 man 2 shmdt \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u89e3\u9664\u5f53\u524d\u8fdb\u7a0b\u548c\u5171\u4eab\u5185\u5b58\u7684\u5173\u8054 \u53c2\u6570\uff1a shmaddr \uff1a\u5171\u4eab\u5185\u5b58\u7684\u9996\u5730\u5740 \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c \u5931\u8d25 -1 int shmctl(int shmid, int cmd, struct shmid_ds *buf); \u4f7f\u7528 man 2 shmctl \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\u3002\u5220\u9664\u5171\u4eab\u5185\u5b58\uff0c\u5171\u4eab\u5185\u5b58\u8981\u5220\u9664\u624d\u4f1a\u6d88\u5931\uff0c\u521b\u5efa\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u88ab\u9500\u6bc1\u4e86\u5bf9\u5171\u4eab\u5185\u5b58\u662f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd \u53c2\u6570 shmid \uff1a\u5171\u4eab\u5185\u5b58\u7684ID cmd : \u8981\u505a\u7684\u64cd\u4f5c IPC_STAT \uff1a\u83b7\u53d6\u5171\u4eab\u5185\u5b58\u7684\u5f53\u524d\u7684\u72b6\u6001 IPC_SET \uff1a\u8bbe\u7f6e\u5171\u4eab\u5185\u5b58\u7684\u72b6\u6001 IPC_RMID \uff1a\u6807\u8bb0\u5171\u4eab\u5185\u5b58\u88ab\u9500\u6bc1 buf\uff1a\u9700\u8981\u8bbe\u7f6e\u6216\u8005\u83b7\u53d6\u7684\u5171\u4eab\u5185\u5b58\u7684\u5c5e\u6027\u4fe1\u606f IPC_STAT \uff1a buf \u5b58\u50a8\u6570\u636e IPC_SET \uff1a buf \u4e2d\u9700\u8981\u521d\u59cb\u5316\u6570\u636e\uff0c\u8bbe\u7f6e\u5230\u5185\u6838\u4e2d IPC_RMID \uff1a\u6ca1\u6709\u7528\uff0c\u8bbe\u7f6e\u4e3aNULL key_t ftok(const char *pathname, int proj_id); \u4f7f\u7528 man 3 ftok \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u6839\u636e\u6307\u5b9a\u7684\u8def\u5f84\u540d\uff0c\u548cint\u503c\uff0c\u751f\u6210\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u7684key \u53c2\u6570 pathname \uff1a\u6307\u5b9a\u4e00\u4e2a \u5b58\u5728\u7684\u8def\u5f84 proj_id \uff1aint\u7c7b\u578b\u7684\u503c\uff0c\u4f46\u662f\u7cfb\u7edf\u8c03\u7528\u53ea\u4f1a\u4f7f\u7528\u5176\u4e2d\u76841\u4e2a\u5b57\u8282\uff0c\u8303\u56f4 \uff1a 0-255 \u4e00\u822c\u6307\u5b9a\u4e00\u4e2a\u5b57\u7b26 'a' \u8fd4\u56de\u503c\uff1a shmget \u4e2d\u7528\u5230\u7684 key","title":"\u5171\u4eab\u5185\u5b58\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_76","text":"","title":"\u5171\u4eab\u5185\u5b58\u64cd\u4f5c\u547d\u4ee4"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#ipcs","text":"ipcs -a \uff1a\u6253\u5370\u5f53\u524d\u7cfb\u7edf\u4e2d \u6240\u6709\u7684 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\u7684\u4fe1\u606f ipcs -m \uff1a\u6253\u5370\u51fa \u4f7f\u7528\u5171\u4eab\u5185\u5b58 \u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4fe1\u606f ipcs -q \uff1a\u6253\u5370\u51fa \u4f7f\u7528\u6d88\u606f\u961f\u5217 \u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4fe1\u606f ipcs -s \uff1a\u6253\u5370\u51fa \u4f7f\u7528\u4fe1\u53f7 \u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u4fe1\u606f","title":"ipcs"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#ipcrm","text":"ipcrm -M shmkey \uff1a\u79fb\u9664\u7528 shmkey \u521b\u5efa\u7684 \u5171\u4eab\u5185\u5b58\u6bb5 ipcrm -m shmid \uff1a\u79fb\u9664\u7528 shmid \u6807\u8bc6\u7684 \u5171\u4eab\u5185\u5b58\u6bb5 ipcrm -Q msgkey \uff1a\u79fb\u9664\u7528 msqkey \u521b\u5efa\u7684 \u6d88\u606f\u961f\u5217 ipcrm -q msqid \uff1a\u79fb\u9664\u7528 msqid \u6807\u8bc6\u7684 \u6d88\u606f\u961f\u5217 ipcrm -S semkey \uff1a\u79fb\u9664\u7528 semkey \u521b\u5efa\u7684 \u4fe1\u53f7 ipcrm -s semid \uff1a\u79fb\u9664\u7528 semid \u6807\u8bc6\u7684 \u4fe1\u53f7","title":"ipcrm"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_77","text":"","title":"\u5b9e\u4f8b\uff1a\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff08\u6ce8\u610f\uff09"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_78","text":"#include <stdio.h> #include <sys/ipc.h> #include <sys/shm.h> #include <string.h> int main() { // 1. \u521b\u65b0\u65b0\u5171\u4eab\u5185\u5b58 // key\u4e0d\u80fd\u968f\u610f\u6307\u5b9a\uff0c\u6bd4\u5982\u7528key=100\u65f6\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // 2. \u5c06\u8fdb\u7a0b\u4e0e\u5171\u4eab\u5185\u5b58\u5173\u8054 void* ptr = shmat(shmId, NULL, 0); // 3. \u5f80\u5171\u4eab\u5185\u5b58\u4e2d\u5199\u6570\u636e // \u64cd\u4f5c\u5185\u5b58\u53ea\u80fd\u4f7f\u7528memcpy\uff0c\u4f7f\u7528strcpy\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef // strcpy((char*)addr, \"hello, world\"); char* str = \"helloworld\"; printf(\"send : %s\\n\", str); // \u5305\u542b\u7ed3\u675f\u7b26'\\0' memcpy(ptr, str, strlen(str) + 1); // \u4e3a\u4e86\u7a0b\u5e8f\u4e0d\u88ab\u76f4\u63a5\u505c\u6389\uff0c\u5982\u679c\u505c\u6389\uff0c\u90a3\u4e48\u5171\u4eab\u5185\u5b58\u4e0d\u590d\u5b58\u5728 printf(\"\u6309\u4efb\u610f\u952e\u7ee7\u7eed\\n\"); getchar(); // 4. \u5206\u79bb\u5185\u5b58\u6bb5 shmdt(ptr); // 5. \u5220\u9664\u5171\u4eab\u5185\u5b58\u6bb5\uff08\u6807\u8bb0\u5220\u9664\uff09 shmctl(shmId, IPC_RMID, NULL); return 0; }","title":"\u5199\u7aef"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_79","text":"#include <stdio.h> #include <sys/ipc.h> #include <sys/shm.h> #include <string.h> int main() { // 1. \u5224\u65ad\u5e76\u83b7\u53d6\u5171\u4eab\u5185\u5b58 // \u6ce8\u610fIPC_EXCL\u53ea\u80fd\u5728\u521b\u5efa\u5171\u4eab\u5185\u5b58\u65f6\u4f7f\u7528 int shmId = shmget(100, 1024, IPC_CREAT); // int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // 2. \u5c06\u8fdb\u7a0b\u4e0e\u5171\u4eab\u5185\u5b58\u5173\u8054 void* addr = shmat(shmId, NULL, 0); // 3. \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u8bfb\u6570\u636e // \u6b64\u65f6\u5b57\u7b26\u4e32\u5185\u5b58\u5373\u4e3a\u5171\u4eab\u5185\u5b58\u5185\u5bb9 printf(\"recv : %s\\n\", (char*)addr); // \u4e3a\u4e86\u7a0b\u5e8f\u4e0d\u88ab\u76f4\u63a5\u505c\u6389\uff0c\u5982\u679c\u505c\u6389\uff0c\u90a3\u4e48\u5171\u4eab\u5185\u5b58\u4e0d\u590d\u5b58\u5728 printf(\"\u6309\u4efb\u610f\u952e\u7ee7\u7eed\\n\"); getchar(); // 4. \u5206\u79bb\u5185\u5b58\u6bb5 shmdt(addr); // 5. \u5220\u9664\u5171\u4eab\u5185\u5b58\u6bb5\uff08\u6807\u8bb0\u5220\u9664\uff09 shmctl(shmId, IPC_RMID, NULL); return 0; }","title":"\u8bfb\u7aef"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_80","text":"","title":"\u6ce8\u610f"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_81","text":"\u865a\u62df\u673a\u5728\u542f\u52a8\u60c5\u51b5\u4e0b\uff0c\u6709\u9ed8\u8ba4\u5171\u4eab\u5185\u5b58\uff0c\u800c\u5b9e\u4f53\u673a\uff08\u670d\u52a1\u5668\uff09\u6ca1\u6709 \u865a\u62df\u673a \u5b9e\u4f53\u673a","title":"\u865a\u62df\u673a\u548c\u5b9e\u4f53\u673a"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_82","text":"\u5148\u6267\u884c\u8bfb\u7aef\uff0c\u518d\u6267\u884c\u5199\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c\u6b64\u65f6 \u8bfb\u7aef\u8bfb\u5230\u7a7a\u6570\u636e\uff0c\u5199\u7aef\u4f1a\u5148\u8f93\u51fa\u5185\u5bb9\u7136\u540e\u4ea7\u751f\u6bb5\u9519\u8bef c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); \u5148\u6267\u884c\u5199\u7aef\uff0c\u518d\u6267\u884c\u8bfb\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c\u6b64\u65f6 \u5199\u7aef\u6b63\u5e38\u5199\u6570\u636e\uff0c\u8bfb\u7aef\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); \u5148\u6267\u884c\u8bfb\u7aef\uff0c\u518d\u6267\u884c\u5199\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c\u6b64\u65f6 \u8bfb\u7aef\u4ea7\u751f\u6bb5\u9519\u8bef\uff0c\u5199\u7aef\u4f1a\u5148\u8f93\u51fa\u5185\u5bb9\u7136\u540e\u4ea7\u751f\u6bb5\u9519\u8bef\u4e14\u5f53\u524dkey=100\uff08\u5341\u516d\u8fdb\u5236\u4e3a64\uff09\u88ab\u5360\u7528\uff0c\u6309\u5148\u5199\u540e\u8bfb\u987a\u5e8f\u65f6\uff0c\u9700\u8981\u624b\u52a8\u56de\u6536\u5185\u5b58\uff0c\u5426\u5219\u4e0d\u80fd\u7ee7\u7eed\u8be5\u5757\u5185\u5b58 \uff0c\u5982\u4e0b\u56fe\u6240\u793a c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT); \u5148\u6267\u884c\u5199\u7aef\uff0c\u518d\u6267\u884c\u8bfb\u7aef \uff0c\u4e14\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u65f6\uff0c \u6b63\u5e38\u6267\u884c c // write int shmId = shmget(100, 1024, IPC_CREAT | IPC_EXCL | 0664); // read int shmId = shmget(100, 1024, IPC_CREAT); \u51fa\u73b0\u7684\u539f\u56e0 \u5f53\u5148\u6267\u884c\u8bfb\u7aef\u65f6\uff0c\u6b64\u65f6\u5171\u4eab\u5185\u5b58\u4e2d\u6ca1\u6709\u5185\u5bb9\u6216\u8005\u6ca1\u6709\u521b\u5efa","title":"\u6267\u884c\u987a\u5e8f\u4e0e\u4ee3\u7801\uff08\u6ce8\u610f\uff09"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_83","text":"","title":"\u603b\u7ed3"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_84","text":"\u64cd\u4f5c\u7cfb\u7edf\u5982\u4f55\u77e5\u9053\u4e00\u5757\u5171\u4eab\u5185\u5b58\u88ab\u591a\u5c11\u4e2a\u8fdb\u7a0b\u5173\u8054\uff1f \u5171\u4eab\u5185\u5b58\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 struct shmid_ds \uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u6709\u4e00\u4e2a\u6210\u5458 shm_nattch shm_nattach \u8bb0\u5f55\u4e86\u5173\u8054\u7684\u8fdb\u7a0b\u4e2a\u6570 \u53ef\u4e0d\u53ef\u4ee5\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u591a\u6b21\u5220\u9664 shmctl \u53ef\u4ee5\uff0c\u56e0\u4e3a\u6267\u884c shmctl \u8868\u793a \u6807\u8bb0\u5220\u9664\u5171\u4eab\u5185\u5b58\uff08key\u53d8\u4e3a0\uff09\uff0c\u4e0d\u662f\u76f4\u63a5\u5220\u9664 \u3002\u5f53\u548c\u5171\u4eab\u5185\u5b58\u5173\u8054\u7684\u8fdb\u7a0b\u6570\u4e3a0\u7684\u65f6\u5019\uff0c\u5c31\u771f\u6b63\u88ab\u5220\u9664 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u548c\u5171\u4eab\u5185\u5b58\u53d6\u6d88\u5173\u8054\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5c31\u4e0d\u80fd\u7ee7\u7eed\u64cd\u4f5c\u8fd9\u4e2a\u5171\u4eab\u5185\u5b58","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_85","text":"\u5171\u4eab\u5185\u5b58 \u53ef\u4ee5\u76f4\u63a5\u521b\u5efa\uff0c \u5185\u5b58\u6620\u5c04 \u9700\u8981\u78c1\u76d8\u6587\u4ef6\uff08\u533f\u540d\u6620\u5c04\u9664\u5916\uff09 \u5171\u4eab\u5185\u5b58\u6548\u7387\u66f4\u9ad8 \u5171\u4eab\u5185\u5b58 \u6240\u6709\u7684\u8fdb\u7a0b\u64cd\u4f5c\u7684\u662f\u540c\u4e00\u5757\u5171\u4eab\u5185\u5b58\uff0c \u5185\u5b58\u6620\u5c04 \uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u81ea\u5df1\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u5185\u5b58 \u6570\u636e\u5b89\u5168 \u8fdb\u7a0b\u7a81\u7136\u9000\u51fa\uff1a \u5171\u4eab\u5185\u5b58 \u8fd8\u5b58\u5728\uff0c \u5185\u5b58\u6620\u5c04\u533a \u6d88\u5931 \u8fd0\u884c\u8fdb\u7a0b\u7684\u7535\u8111\u6b7b\u673a(\u5b95\u673a)\uff1a \u5171\u4eab\u5185\u5b58 \u4e2d\u7684\u6570\u636e\u6d88\u5931\uff0c\u5185\u5b58\u6620\u5c04\u533a\u7684\u6570\u636e\u4e5f\u6d88\u5931 \uff0c\u4f46\u7531\u4e8e\u78c1\u76d8\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8fd8\u5728\uff0c\u6240\u4ee5 \u53ef\u4ee5\u8bf4\u5185\u5b58\u6620\u5c04\u533a\u7684\u6570\u636e\u8fd8\u5b58\u5728 \u751f\u547d\u5468\u671f \u5171\u4eab\u5185\u5b58 \u8fdb\u7a0b\u9000\u51fa\u65f6\u5171\u4eab\u5185\u5b58\u8fd8\u5728\uff0c\u53ea\u4f1a\u6807\u8bb0\u5220\u9664 \u53ea\u6709\u5f53\u6240\u6709\u7684\u5173\u8054\u7684\u8fdb\u7a0b\u6570\u4e3a0\u6216\u8005\u5173\u673a\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u5220\u9664 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u9000\u51fa\uff0c\u4f1a\u81ea\u52a8\u548c\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u53d6\u6d88\u5173\u8054 \u5185\u5b58\u6620\u5c04\u533a\uff1a\u8fdb\u7a0b\u9000\u51fa\uff0c\u5185\u5b58\u6620\u5c04\u533a\u9500\u6bc1","title":"\u5171\u4eab\u5185\u5b58\u4e0e\u5185\u5b58\u6620\u5c04\u533a\u522b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_86","text":"","title":"\u5b88\u62a4\u8fdb\u7a0b"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_87","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/02Linux\u591a\u8fdb\u7a0b\u5f00\u53d1/09 \u5b88\u62a4 \u8fdb\u7a0b","title":"\u8bf4\u660e"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_88","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_89","text":"\u5728 UNIX \u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u901a\u8fc7\u7ec8\u7aef\u767b\u5f55\u7cfb\u7edf\u540e\u5f97\u5230\u4e00\u4e2a shell \u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u7ec8\u7aef\u6210\u4e3a shell \u8fdb\u7a0b\u7684 \u63a7\u5236\u7ec8\u7aef\uff08Controlling Terminal\uff09 \uff0c\u8fdb\u7a0b\u4e2d\uff0c\u63a7\u5236\u7ec8\u7aef\u662f\u4fdd\u5b58\u5728 PCB \u4e2d\u7684\u4fe1\u606f\uff0c\u800c fork() \u4f1a\u590d\u5236 PCB \u4e2d\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u7531 shell \u8fdb\u7a0b\u542f\u52a8\u7684\u5176\u5b83\u8fdb\u7a0b\u7684\u63a7\u5236\u7ec8\u7aef\u4e5f\u662f\u8fd9\u4e2a\u7ec8\u7aef \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\u6ca1\u6709\u91cd\u5b9a\u5411\uff09\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u5165\u3001\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u90fd\u6307\u5411\u63a7\u5236\u7ec8\u7aef \u8fdb\u7a0b\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u4e5f\u5c31\u662f\u8bfb\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165 \u8fdb\u7a0b\u5f80\u6807\u51c6\u8f93\u51fa\u6216\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u5199\u4e5f\u5c31\u662f\u8f93\u51fa\u5230\u663e\u793a\u5668\u4e0a \u5728\u63a7\u5236\u7ec8\u7aef\u8f93\u5165\u4e00\u4e9b\u7279\u6b8a\u7684\u63a7\u5236\u952e\u53ef\u4ee5\u7ed9\u524d\u53f0\u8fdb\u7a0b\u53d1\u4fe1\u53f7\uff0c\u4f8b\u5982 Ctrl + C \u4f1a\u4ea7\u751f SIGINT \u4fe1\u53f7\uff0c Ctrl + \\ \u4f1a\u4ea7\u751f SIGQUIT \u4fe1\u53f7","title":"\u7ec8\u7aef"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_90","text":"\u8fdb\u7a0b\u7ec4 \u548c \u4f1a\u8bdd \u5728\u8fdb\u7a0b\u4e4b\u95f4\u5f62\u6210\u4e86\u4e00\u79cd\u4e24\u7ea7\u5c42\u6b21\u5173\u7cfb \u8fdb\u7a0b\u7ec4\u662f\u4e00\u7ec4\u76f8\u5173\u8fdb\u7a0b\u7684\u96c6\u5408\uff0c\u4f1a\u8bdd\u662f\u4e00\u7ec4\u76f8\u5173\u8fdb\u7a0b\u7ec4\u7684\u96c6\u5408 \u8fdb\u7a0b\u7ec4\u548c\u4f1a\u8bdd\u662f\u4e3a\u652f\u6301 shell \u4f5c\u4e1a\u63a7\u5236\u800c\u5b9a\u4e49\u7684\u62bd\u8c61\u6982\u5ff5\uff0c\u7528\u6237\u901a\u8fc7 shell \u80fd\u591f\u4ea4\u4e92\u5f0f\u5730\u5728\u524d\u53f0\u6216\u540e\u53f0\u8fd0\u884c\u547d\u4ee4 \u8fdb\u7a0b\u7ec4\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5171\u4eab\u540c\u4e00\u8fdb\u7a0b\u7ec4\u6807\u8bc6\u7b26\uff08 PGID \uff09\u7684\u8fdb\u7a0b\u7ec4\u6210 \u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u62e5\u6709\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u9996\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u662f\u521b\u5efa\u8be5\u7ec4\u7684\u8fdb\u7a0b\uff0c\u5176\u8fdb\u7a0b ID \u4e3a\u8be5\u8fdb\u7a0b\u7ec4\u7684 ID\uff0c\u65b0\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u5176\u7236\u8fdb\u7a0b\u6240\u5c5e\u7684\u8fdb\u7a0b\u7ec4 ID \u8fdb\u7a0b\u7ec4\u62e5\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\uff0c\u5176 \u5f00\u59cb\u65f6\u95f4\u4e3a\u9996\u8fdb\u7a0b\u521b\u5efa\u7ec4\u7684\u65f6\u523b \uff0c \u7ed3\u675f\u65f6\u95f4\u4e3a\u6700\u540e\u4e00\u4e2a\u6210\u5458\u8fdb\u7a0b\u9000\u51fa\u7ec4\u7684\u65f6\u523b \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7ec8\u6b62\u800c\u9000\u51fa\u8fdb\u7a0b\u7ec4\uff0c\u4e5f\u53ef\u80fd\u4f1a\u56e0\u4e3a\u52a0\u5165\u4e86\u53e6\u5916\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u800c\u9000\u51fa\u8fdb\u7a0b\u7ec4 \u8fdb\u7a0b\u7ec4\u9996\u8fdb\u7a0b\u65e0\u9700\u662f\u6700\u540e\u4e00\u4e2a\u79bb\u5f00\u8fdb\u7a0b\u7ec4\u7684\u6210\u5458","title":"\u8fdb\u7a0b\u7ec4"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_91","text":"\u4f1a\u8bdd \u662f\u4e00\u7ec4\u8fdb\u7a0b\u7ec4\u7684\u96c6\u5408 \u4f1a\u8bdd\u9996\u8fdb\u7a0b\u662f\u521b\u5efa\u8be5\u65b0\u4f1a\u8bdd\u7684\u8fdb\u7a0b\uff0c\u5176\u8fdb\u7a0b ID \u4f1a\u6210\u4e3a\u4f1a\u8bdd ID\u3002\u65b0\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u5176\u7236\u8fdb\u7a0b\u7684\u4f1a\u8bdd ID \u4e00\u4e2a\u4f1a\u8bdd\u4e2d\u7684\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u5355\u4e2a\u63a7\u5236\u7ec8\u7aef\u3002\u63a7\u5236\u7ec8\u7aef\u4f1a\u5728\u4f1a\u8bdd\u9996\u8fdb\u7a0b\u9996\u6b21\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u8bbe\u5907\u65f6\u88ab\u5efa\u7acb \u4e00\u4e2a\u7ec8\u7aef\u6700\u591a\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u4f1a\u8bdd\u7684\u63a7\u5236\u7ec8\u7aef \u5728\u4efb\u4e00\u65f6\u523b\uff0c\u4f1a\u8bdd\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u4f1a\u6210\u4e3a\u7ec8\u7aef\u7684\u524d\u53f0\u8fdb\u7a0b\u7ec4\uff0c\u5176\u4ed6\u8fdb\u7a0b\u7ec4\u4f1a\u6210\u4e3a\u540e\u53f0\u8fdb\u7a0b\u7ec4 \u3002\u53ea\u6709\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u8fdb\u7a0b\u624d\u80fd\u4ece\u63a7\u5236\u7ec8\u7aef\u4e2d\u8bfb\u53d6\u8f93\u5165\u3002\u5f53\u7528\u6237\u5728\u63a7\u5236\u7ec8\u7aef\u4e2d\u8f93\u5165\u7ec8\u7aef\u5b57\u7b26\u751f\u6210\u4fe1\u53f7\u540e\uff0c\u8be5\u4fe1\u53f7\u4f1a\u88ab\u53d1\u9001\u5230\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6240\u6709\u6210\u5458 \u5f53\u63a7\u5236\u7ec8\u7aef\u7684\u8fde\u63a5\u5efa\u7acb\u8d77\u6765\u4e4b\u540e\uff0c\u4f1a\u8bdd\u9996\u8fdb\u7a0b\u4f1a\u6210\u4e3a\u8be5\u7ec8\u7aef\u7684\u63a7\u5236\u8fdb\u7a0b","title":"\u4f1a\u8bdd"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_92","text":"","title":"\u8fdb\u7a0b\u7ec4\u3001\u4f1a\u8bdd\u3001\u63a7\u5236\u7ec8\u7aef\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_93","text":"pid_t getpgrp(void); pid_t getpgid(pid_t pid); int setpgid(pid_t pid, pid_t pgid); pid_t getsid(pid_t pid); pid_t setsid(void);","title":"\u8fdb\u7a0b\u7ec4\u3001\u4f1a\u8bdd\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_94","text":"\u5b88\u62a4\u8fdb\u7a0b\uff08Daemon Process\uff09 \uff0c\u4e5f\u5c31\u662f\u901a\u5e38\u8bf4\u7684 Daemon \u8fdb\u7a0b\uff08\u7cbe\u7075\u8fdb\u7a0b\uff09\uff0c\u662fLinux \u4e2d\u7684\u540e\u53f0\u670d\u52a1\u8fdb\u7a0b\u3002\u5b83\u662f\u4e00\u4e2a\u751f\u5b58\u671f\u8f83\u957f\u7684\u8fdb\u7a0b\uff0c\u901a\u5e38\u72ec\u7acb\u4e8e\u63a7\u5236\u7ec8\u7aef\u5e76\u4e14\u5468\u671f\u6027\u5730\u6267\u884c\u67d0\u79cd\u4efb\u52a1\u6216\u7b49\u5f85\u5904\u7406\u67d0\u4e9b\u53d1\u751f\u7684\u4e8b\u4ef6\u3002\u4e00\u822c\u91c7\u7528\u4ee5 d \u7ed3\u5c3e\u7684\u540d\u5b57 \u5b88\u62a4\u8fdb\u7a0b\u7279\u5f81 \u751f\u547d\u5468\u671f\u5f88\u957f\uff0c\u5b88\u62a4\u8fdb\u7a0b\u4f1a\u5728\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019\u88ab\u521b\u5efa\u5e76\u4e00\u76f4\u8fd0\u884c\u76f4\u81f3\u7cfb\u7edf\u88ab\u5173\u95ed \u5b83\u5728\u540e\u53f0\u8fd0\u884c\u5e76\u4e14\u4e0d\u62e5\u6709\u63a7\u5236\u7ec8\u7aef\u3002\u6ca1\u6709\u63a7\u5236\u7ec8\u7aef\u786e\u4fdd\u4e86\u5185\u6838\u6c38\u8fdc\u4e0d\u4f1a\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u81ea\u52a8\u751f\u6210\u4efb\u4f55\u63a7\u5236\u4fe1\u53f7\u4ee5\u53ca\u7ec8\u7aef\u76f8\u5173\u7684\u4fe1\u53f7\uff08\u5982 SIGINT \u3001 SIGQUIT \uff09 Linux \u7684\u5927\u591a\u6570\u670d\u52a1\u5668\u5c31\u662f\u7528\u5b88\u62a4\u8fdb\u7a0b\u5b9e\u73b0\u7684\u3002\u6bd4\u5982\uff0cInternet \u670d\u52a1\u5668 inetd \uff0cWeb \u670d\u52a1\u5668 httpd \u7b49","title":"\u5b88\u62a4\u8fdb\u7a0b\u6982\u5ff5"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_95","text":"\u6267\u884c\u4e00\u4e2a fork() \uff0c\u4e4b\u540e\u7236\u8fdb\u7a0b\u9000\u51fa\uff0c\u5b50\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c \u5b50\u8fdb\u7a0b\u8c03\u7528 setsid() \u5f00\u542f\u4e00\u4e2a\u65b0\u4f1a\u8bdd \u6e05\u9664\u8fdb\u7a0b\u7684 umask \u4ee5\u786e\u4fdd\u5f53\u5b88\u62a4\u8fdb\u7a0b\u521b\u5efa\u6587\u4ef6\u548c\u76ee\u5f55\u65f6\u62e5\u6709\u6240\u9700\u7684\u6743\u9650 \u4fee\u6539\u8fdb\u7a0b\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u901a\u5e38\u4f1a\u6539\u4e3a\u6839\u76ee\u5f55\uff08 / \uff09 \u5173\u95ed\u5b88\u62a4\u8fdb\u7a0b\u4ece\u5176\u7236\u8fdb\u7a0b\u7ee7\u627f\u800c\u6765\u7684\u6240\u6709\u6253\u5f00\u7740\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5728\u5173\u95ed\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b260\u30011\u30012\u4e4b\u540e\uff0c\u5b88\u62a4\u8fdb\u7a0b\u901a\u5e38\u4f1a\u6253\u5f00 /dev/null \u5e76\u4f7f\u7528 dup2() \u4f7f\u6240\u6709\u8fd9\u4e9b\u63cf\u8ff0\u7b26\u6307\u5411\u8fd9\u4e2a\u8bbe\u5907 \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91","title":"\u5b88\u62a4\u8fdb\u7a0b\u7684\u521b\u5efa\u6b65\u9aa4"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_96","text":"/* \u5199\u4e00\u4e2a\u5b88\u62a4\u8fdb\u7a0b\uff0c\u6bcf\u96942s\u83b7\u53d6\u4e00\u4e0b\u7cfb\u7edf\u65f6\u95f4\uff0c\u5c06\u8fd9\u4e2a\u65f6\u95f4\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002 */ #include <stdio.h> #include <sys/types.h> #include <unistd.h> #include <stdlib.h> #include <sys/stat.h> #include <fcntl.h> #include <sys/time.h> #include <signal.h> #include <time.h> #include <string.h> void myWork(int num) { // \u6355\u6349\u5230\u4fe1\u53f7\u4e4b\u540e\uff0c\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\uff0c\u5199\u5165\u78c1\u76d8\u6587\u4ef6 time_t tm = time(NULL); struct tm * loc = localtime(&tm); char* str = asctime(loc); int fd = open(\"time.txt\", O_RDWR | O_CREAT | O_APPEND, 0664); write(fd ,str, strlen(str)); close(fd); } int main() { // 1. fork\u4ea7\u751f\u5b50\u8fdb\u7a0b\uff0c\u5e76\u9000\u51fa\u7236\u8fdb\u7a0b pid_t pid = fork(); if (pid > 0) { exit(0); } // 2. \u5b50\u8fdb\u7a0b\u8c03\u7528 setsid() \u5f00\u542f\u4e00\u4e2a\u65b0\u4f1a\u8bdd setsid(); // 3. \u8bbe\u7f6e\u63a9\u7801 umask(022); // 4. \u4fee\u6539\u8fdb\u7a0b\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u901a\u5e38\u8bbe\u4e3a/\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u6743\u9650\u4e0d\u591f\uff0c\u6240\u4ee5\u6539\u4e3a\u5f53\u524d\u76ee\u5f55 chdir(\"/home/u/Desktop\"); // 5. \u5173\u95ed\u3001\u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26 int fd = open(\"/dev/null\", O_RDWR); dup2(fd, STDIN_FILENO); dup2(fd, STDOUT_FILENO); dup2(fd, STDERR_FILENO); // 6. \u4e1a\u52a1\u903b\u8f91 // \u6355\u6349\u5b9a\u65f6\u4fe1\u53f7 struct sigaction act; act.sa_flags = 0; act.sa_handler = myWork; sigemptyset(&act.sa_mask); sigaction(SIGALRM, &act, NULL); // \u8bbe\u7f6e\u5b9a\u65f6\u5668 struct itimerval val; val.it_interval.tv_sec = 2; val.it_interval.tv_usec = 0; val.it_value.tv_sec = 2; val.it_value.tv_usec = 0; setitimer(ITIMER_REAL, &val, NULL); // \u4e0d\u8ba9\u8fdb\u7a0b\u7ed3\u675f while(1) { sleep(10); } return 0; }","title":"\u5b9e\u4f8b\uff1a\u5b88\u62a4\u8fdb\u7a0b\u5b9e\u73b0\u6bcf\u9694\u4e24\u79d2\u83b7\u53d6\u65f6\u95f4\u5e76\u5199\u5165\u78c1\u76d8"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_97","text":"","title":"\u5b9e\u7528\u6280\u5de7"},{"location":"Linux504/02Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%BC%80%E5%8F%91/#_98","text":"code ```c #include #include int main() { while (1) { printf(\"this is a test...\\n\"); sleep(1); } return 0; } ``` \u8fdb\u7a0b\u5207\u6362\u5230\u540e\u53f0\u8fd0\u884c\uff1a ./test & \uff0c\u5207\u6362\u5230\u540e\u53f0\u540e\uff0c\u5f53\u524d\u7ec8\u7aef\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u547d\u4ee4\uff0c\u6b64\u65f6\u65e0\u6cd5\u901a\u8fc7 CTRL C \u7ec8\u6b62 \u540e\u53f0\u8fdb\u7a0b\u5207\u6362\u5230\u524d\u53f0\uff1a fg \uff0c\u5207\u6362\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 CTRL C \u7ec8\u6b62","title":"\u540e\u53f0\u8fd0\u884c\u8fdb\u7a0b"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/","text":"\u7ebf\u7a0b\u57fa\u7840 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/03Linux\u591a\u7ebf\u7a0b\u5f00\u53d1/01 \u7ebf\u7a0b\u57fa\u7840 \u7ebf\u7a0b\u6982\u8ff0 \u57fa\u672c\u6982\u5ff5 \u4e0e \u8fdb\u7a0b\uff08process\uff09 \u7c7b\u4f3c\uff0c \u7ebf\u7a0b\uff08thread\uff09 \u662f\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f \u5e76\u53d1\u6267\u884c\u591a\u4e2a\u4efb\u52a1 \u7684\u4e00\u79cd\u673a\u5236 \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b \u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u5747\u4f1a\u72ec\u7acb\u6267\u884c\u76f8\u540c\u7a0b\u5e8f\uff0c\u4e14\u5171\u4eab\u540c\u4e00\u4efd\u5168\u5c40\u5185\u5b58\u533a\u57df\uff0c\u5176\u4e2d\u5305\u62ec\u521d\u59cb\u5316\u6570\u636e\u6bb5\u3001\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u4ee5\u53ca\u5806\u5185\u5b58\u6bb5\u3002\uff08\u4f20\u7edf\u610f\u4e49\u4e0a\u7684 UNIX \u8fdb\u7a0b\u53ea\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u8be5\u8fdb\u7a0b\u53ea\u5305\u542b\u4e00\u4e2a\u7ebf\u7a0b\uff09 \u8fdb\u7a0b\u662f CPU \u5206\u914d\u8d44\u6e90\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u6267\u884c\u7684\u6700\u5c0f\u5355\u4f4d \u7ebf\u7a0b\u662f\u8f7b\u91cf\u7ea7\u7684\u8fdb\u7a0b\uff08 LWP\uff1aLight Weight Process \uff09\uff0c\u5728 Linux \u73af\u5883\u4e0b\u7ebf\u7a0b\u7684\u672c\u8d28\u4ecd\u662f\u8fdb\u7a0b \u67e5\u770b\u6307\u5b9a\u8fdb\u7a0b\u7684 LWP \u53f7\uff1a ps \u2013Lf pid \uff0c\u5176\u4e2d pid \u53ef\u4ee5\u7531 ps aux \u5f97\u5230 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c main\u51fd\u6570 \u6240\u5728\u7684\u7ebf\u7a0b\u6211\u4eec\u79f0\u4e4b\u4e3a \u4e3b\u7ebf\u7a0b\uff08main\u7ebf\u7a0b\uff09 \uff0c\u5176\u4f59\u521b\u5efa\u7684\u7ebf\u7a0b\u79f0\u4e3a \u5b50\u7ebf\u7a0b \u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\uff0c fork() \u51fd\u6570\u8c03\u7528\uff0c2\u8fdb\u7a0b\uff08\u7236\u5b50\u8fdb\u7a0b\uff09 \u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c pthread_create() \u51fd\u6570\u8c03\u7528\uff0c2\u4e2a\u7ebf\u7a0b\uff08\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\uff09 \u7ebf\u7a0b\u548c\u8fdb\u7a0b\u533a\u522b \u8fdb\u7a0b\u95f4\u7684\u4fe1\u606f\u96be\u4ee5\u5171\u4eab \u3002\u7531\u4e8e\u9664\u53bb\u53ea\u8bfb\u4ee3\u7801\u6bb5\u5916\uff0c\u7236\u5b50\u8fdb\u7a0b\u5e76\u672a\u5171\u4eab\u5185\u5b58\uff0c\u56e0\u6b64\u5fc5\u987b\u91c7\u7528\u4e00\u4e9b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u5728\u8fdb\u7a0b\u95f4\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362 \u8c03\u7528 fork() \u6765\u521b\u5efa\u8fdb\u7a0b\u7684\u4ee3\u4ef7\u76f8\u5bf9\u8f83\u9ad8\uff0c\u5373\u4fbf\u5229\u7528\u5199\u65f6\u590d\u5236\u6280\u672f\uff0c\u4ecd\u7136\u9700\u8981\u590d\u5236\u8bf8\u5982\u5185\u5b58\u9875\u8868\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u4e4b\u7c7b\u7684\u591a\u79cd\u8fdb\u7a0b\u5c5e\u6027\uff0c\u8fd9\u610f\u5473\u7740 fork() \u8c03\u7528\u5728\u65f6\u95f4\u4e0a\u7684\u5f00\u9500\u4f9d\u7136\u4e0d\u83f2 \u7ebf\u7a0b\u4e4b\u95f4\u80fd\u591f\u65b9\u4fbf\u3001\u5feb\u901f\u5730\u5171\u4eab\u4fe1\u606f\u3002\u53ea\u9700 \u5c06\u6570\u636e\u590d\u5236\u5230\u5171\u4eab\uff08\u5168\u5c40\u6216\u5806\uff09\u53d8\u91cf \u4e2d\u5373\u53ef \u521b\u5efa\u7ebf\u7a0b\u6bd4\u521b\u5efa\u8fdb\u7a0b\u901a\u5e38\u8981\u5feb 10 \u500d\u751a\u81f3\u66f4\u591a\u3002\u7ebf\u7a0b\u95f4\u662f\u5171\u4eab\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\uff0c\u65e0\u9700\u91c7\u7528\u5199\u65f6\u590d\u5236\u6765\u590d\u5236\u5185\u5b58\uff0c\u4e5f\u65e0\u9700\u590d\u5236\u9875\u8868 \u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u548c\u975e\u5171\u4eab\u8d44\u6e90 \u5171\u4eab\u8d44\u6e90 \u8fdb\u7a0b ID \u548c\u7236\u8fdb\u7a0b ID \u8fdb\u7a0b\u7ec4 ID \u548c\u4f1a\u8bdd ID \u7528\u6237 ID \u548c \u7528\u6237\u7ec4 ID \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868 \u4fe1\u53f7\u5904\u7f6e \u6587\u4ef6\u7cfb\u7edf\u7684\u76f8\u5173\u4fe1\u606f\uff1a\u6587\u4ef6\u6743\u9650\u63a9\u7801\uff08 umask \uff09\u3001\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u865a\u62df\u5730\u5740\u7a7a\u95f4\uff08 \u9664\u6808\u3001.text \uff09 \u975e\u5171\u4eab\u8d44\u6e90 \u7ebf\u7a0b ID \u4fe1\u53f7\u63a9\u7801 \u7ebf\u7a0b\u7279\u6709\u6570\u636e error \u53d8\u91cf \u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7 \u6808\uff0c\u672c\u5730\u53d8\u91cf\u548c\u51fd\u6570\u7684\u8c03\u7528\u94fe\u63a5\u4fe1\u606f NPTL \u5f53 Linux \u6700\u521d\u5f00\u53d1\u65f6\uff0c\u5728\u5185\u6838\u4e2d\u5e76\u4e0d\u80fd\u771f\u6b63\u652f\u6301\u7ebf\u7a0b\u3002\u4f46\u662f\u5b83\u7684\u786e\u53ef\u4ee5\u901a\u8fc7 clone() \u7cfb\u7edf\u8c03\u7528\u5c06\u8fdb\u7a0b\u4f5c\u4e3a\u53ef\u8c03\u5ea6\u7684\u5b9e\u4f53\u3002\u8fd9\u4e2a\u8c03\u7528\u521b\u5efa\u4e86\u8c03\u7528\u8fdb\u7a0b\uff08calling process\uff09\u7684\u4e00\u4e2a\u62f7\u8d1d\uff0c\u8fd9\u4e2a\u62f7\u8d1d\u4e0e\u8c03\u7528\u8fdb\u7a0b\u5171\u4eab\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u3002 LinuxThreads \u9879\u76ee\u4f7f\u7528\u8fd9\u4e2a\u8c03\u7528\u6765\u5b8c\u6210\u5728\u7528\u6237\u7a7a\u95f4\u6a21\u62df\u5bf9\u7ebf\u7a0b\u7684\u652f\u6301\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e9b\u7f3a\u70b9\uff0c\u5c24\u5176\u662f\u5728\u4fe1\u53f7\u5904\u7406\u3001\u8c03\u5ea6\u548c\u8fdb\u7a0b\u95f4\u540c\u6b65\u7b49\u65b9\u9762\u90fd\u5b58\u5728\u95ee\u9898\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u6a21\u578b\u4e5f\u4e0d\u7b26\u5408 POSIX \u7684\u8981\u6c42 \u8981\u6539\u8fdb LinuxThreads \uff0c\u9700\u8981\u5185\u6838\u7684\u652f\u6301\uff0c\u5e76\u4e14\u91cd\u5199\u7ebf\u7a0b\u5e93\u3002\u6709\u4e24\u4e2a\u76f8\u4e92\u7ade\u4e89\u7684\u9879\u76ee\u5f00\u59cb\u6765\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42 \u4e00\u4e2a\u5305\u62ec IBM \u7684\u5f00\u53d1\u4eba\u5458\u7684\u56e2\u961f\u5f00\u5c55\u4e86 NGPT\uff08Next-Generation POSIX Threads\uff09 \u9879\u76ee \u540c\u65f6\uff0cRed Hat \u7684\u4e00\u4e9b\u5f00\u53d1\u4eba\u5458\u5f00\u5c55\u4e86 NPTL \u9879\u76ee NGPT \u5728 2003 \u5e74\u4e2d\u671f\u88ab\u653e\u5f03\u4e86\uff0c\u628a\u8fd9\u4e2a\u9886\u57df\u5b8c\u5168\u7559\u7ed9\u4e86 NPTL NPTL \uff0c\u6216\u79f0\u4e3a Native POSIX Thread Library \uff0c\u662f Linux \u7ebf\u7a0b\u7684\u4e00\u4e2a\u65b0\u5b9e\u73b0\uff0c\u5b83\u514b\u670d\u4e86 LinuxThreads \u7684\u7f3a\u70b9\uff0c\u540c\u65f6\u4e5f\u7b26\u5408 POSIX \u7684\u9700\u6c42\u3002\u4e0e LinuxThreads \u76f8\u6bd4\uff0c\u5b83\u5728\u6027\u80fd\u548c\u7a33\u5b9a\u6027\u65b9\u9762\u90fd\u63d0\u4f9b\u4e86\u91cd\u5927\u7684\u6539\u8fdb \u67e5\u770b\u5f53\u524d pthread \u5e93\u7248\u672c\uff1a getconf GNU_LIBPTHREAD_VERSION \u6ce8\u610f \u7531\u4e8e pthread \u5c5e\u4e8e\u7b2c\u4e09\u65b9\u5e93\uff0c\u6240\u4ee5\u5728\u7f16\u8bd1\u65f6\u9700\u8981\u52a0\u4e0a\u53c2\u6570 -pthread \u6216 -lpthread \u5373\u6307\u5b9a\u5305\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u52a0\u62a5\u4ee5\u4e0b\u9519\u8bef\uff08\u6267\u884c\u7a0b\u5e8f\u4e3a\u7ebf\u7a0b\u521b\u5efa\uff09 \u7ebf\u7a0b\u64cd\u4f5c\u51fd\u6570 \u83b7\u53d6\u5f53\u524d\u7684\u7ebf\u7a0b\u7684\u7ebf\u7a0bID\uff1a pthread_t pthread_self(void); \u6bd4\u8f83\u4e24\u4e2a\u7ebf\u7a0bID\u662f\u5426\u76f8\u7b49\uff1a int pthread_equal(pthread_t t1, pthread_t t2); \u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c pthread_t \u7c7b\u578b\u7684\u5b9e\u73b0\u4e0d\u4e00\u6837\uff0c\u6709\u7684\u662f\u65e0\u7b26\u53f7\u7684\u957f\u6574\u578b\uff0c\u6709\u7684\u662f\u4f7f\u7528\u7ed3\u6784\u4f53\u53bb\u5b9e\u73b0\u7684 \u7ebf\u7a0b\u521b\u5efa\uff1a int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); \u7ebf\u7a0b\u7ec8\u6b62\uff1a void pthread_exit(void *retval); \u7ebf\u7a0b\u521b\u5efa int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); \u901a\u8fc7 man 3 pthread_create \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b \u53c2\u6570 thread \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u7ebf\u7a0b\u521b\u5efa\u6210\u529f\u540e\uff0c\u5b50\u7ebf\u7a0b\u7684\u7ebf\u7a0bID\u88ab\u5199\u5230\u8be5\u53d8\u91cf\u4e2d attr : \u8bbe\u7f6e\u7ebf\u7a0b\u7684\u5c5e\u6027\uff0c\u4e00\u822c\u4f7f\u7528\u9ed8\u8ba4\u503c\uff0cNULL start_routine : \u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u5b50\u7ebf\u7a0b\u9700\u8981\u5904\u7406\u7684\u903b\u8f91\u4ee3\u7801 arg : \u7ed9\u7b2c\u4e09\u4e2a\u53c2\u6570( start_routine )\u4f7f\u7528\uff0c\u4f20\u53c2 \u8fd4\u56de\u503c \u6210\u529f\uff1a0 \u5931\u8d25\uff1a\u8fd4\u56de\u9519\u8bef\u53f7\u3002\u8fd9\u4e2a\u9519\u8bef\u53f7\u548c\u4e4b\u524d errno \u4e0d\u592a\u4e00\u6837\u3002\u83b7\u53d6\u9519\u8bef\u53f7\u7684\u4fe1\u606f\uff1a char * strerror(int errnum); #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void* arg) { printf(\"child thread...\\n\"); printf(\"num = %d\\n\", *(int*)arg); return NULL; } int main() { // \u521b\u5efa\u5b50\u7ebf\u7a0b pthread_t tid; int num = 10; int ret = pthread_create(&tid, NULL, myWork, (void*)&num); if (ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } // \u9632\u6b62\u5b50\u7ebf\u7a0b\u6ca1\u6709\u62a2\u5360\u5230CPU\u4e14\u6b64\u65f6\u4e3b\u7ebf\u7a0b\u5df2\u7ecf\u6267\u884c\u5b8c\u5e76\u9000\u51fa sleep(1); return 0; } \u7ebf\u7a0b\u7ec8\u6b62 void pthread_exit(void *retval); \u901a\u8fc7 man 3 pthread_exit \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u7ec8\u6b62\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5728\u54ea\u4e2a\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u5c31\u8868\u793a\u7ec8\u6b62\u54ea\u4e2a\u7ebf\u7a0b \u53c2\u6570\uff1a retval \uff0c\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u5728 pthread_join() \u4e2d\u83b7\u53d6\u5230 #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void* arg) { printf(\"child thread...\\n\"); printf(\"num = %d\\n\", *(int*)arg); printf(\"child thread id : %ld\\n\", pthread_self()); return NULL; } int main() { // \u521b\u5efa\u5b50\u7ebf\u7a0b pthread_t tid; int num = 10; int ret = pthread_create(&tid, NULL, myWork, (void*)&num); if (ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } printf(\"tid : %ld, main thread id : %ld\\n\", tid ,pthread_self()); for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } // \u8ba9\u4e3b\u7ebf\u7a0b\u9000\u51fa\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u6b63\u5e38\u8fd0\u884c\u7684\u7ebf\u7a0b pthread_exit(NULL); // \u4e0b\u9762\u7a0b\u5e8f\u5df2\u7ecf\u4e0d\u80fd\u88ab\u6267\u884c printf(\"test message\\n\"); return 0; } \u7ebf\u7a0b\u8fde\u63a5 int pthread_join(pthread_t thread, void **retval); \u901a\u8fc7 man 3 pthread_join \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u548c\u4e00\u4e2a\u5df2\u7ecf\u7ec8\u6b62\u7684\u7ebf\u7a0b\u8fdb\u884c\u8fde\u63a5\u3002\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u963b\u585e\u51fd\u6570\uff0c\u8c03\u7528\u4e00\u6b21\u53ea\u80fd\u56de\u6536\u4e00\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u4e00\u822c\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u4f7f\u7528 \u53c2\u6570 thread \uff1a\u9700\u8981\u56de\u6536\u7684\u5b50\u7ebf\u7a0b\u7684ID retval \uff1a\u63a5\u6536\u5b50\u7ebf\u7a0b\u9000\u51fa\u65f6\u7684\u8fd4\u56de\u503c \u8fd4\u56de\u503c \u6210\u529f\uff1a0 \u5931\u8d25\uff1a\u8fd4\u56de\u9519\u8bef\u53f7\u3002\u8fd9\u4e2a\u9519\u8bef\u53f7\u548c\u4e4b\u524d errno \u4e0d\u592a\u4e00\u6837\u3002\u83b7\u53d6\u9519\u8bef\u53f7\u7684\u4fe1\u606f\uff1a char * strerror(int errnum); #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> int val = 10; void* myWork(void* arg) { printf(\"child thread...\\n\"); printf(\"num = %d\\n\", *(int*)arg); printf(\"child thread id : %ld\\n\", pthread_self()); val++; pthread_exit((void*)&val); // \u7b49\u4ef7\u4e8ereturn (void*)&val; } int main() { printf(\"init val : %d\\n\", val); // \u521b\u5efa\u5b50\u7ebf\u7a0b pthread_t tid; int num = 10; int ret = pthread_create(&tid, NULL, myWork, (void*)&num); if (ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } printf(\"tid : %ld, main thread id : %ld\\n\", tid ,pthread_self()); for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } // \u4e3b\u7ebf\u7a0b\u8c03\u7528pthread_join()\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90 int * thread_retval; ret = pthread_join(tid, (void **)&thread_retval); if(ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } printf(\"exit data : %d\\n\", *thread_retval); printf(\"\u56de\u6536\u5b50\u7ebf\u7a0b\u8d44\u6e90\u6210\u529f\uff01\\n\"); // \u8ba9\u4e3b\u7ebf\u7a0b\u9000\u51fa\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u6b63\u5e38\u8fd0\u884c\u7684\u7ebf\u7a0b pthread_exit(NULL); // \u4e0b\u9762\u7a0b\u5e8f\u5df2\u7ecf\u4e0d\u80fd\u88ab\u6267\u884c printf(\"test message\\n\"); return 0; } \u7ebf\u7a0b\u5206\u79bb int pthread_detach(pthread_t thread); \u901a\u8fc7 man 3 pthread_detach \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5206\u79bb\u4e00\u4e2a\u7ebf\u7a0b\u3002\u88ab\u5206\u79bb\u7684\u7ebf\u7a0b\u5728\u7ec8\u6b62\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u8fd4\u56de\u7ed9\u7cfb\u7edf \u4e0d\u80fd\u591a\u6b21\u5206\u79bb\uff0c\u4f1a\u4ea7\u751f\u4e0d\u53ef\u9884\u6599\u7684\u884c\u4e3a \u4e0d\u80fd\u53bb\u8fde\u63a5\u4e00\u4e2a\u5df2\u7ecf\u5206\u79bb\u7684\u7ebf\u7a0b\uff0c\u4f1a\u62a5\u9519 \u53c2\u6570\uff1a\u9700\u8981\u5206\u79bb\u7684\u7ebf\u7a0b\u7684ID \u8fd4\u56de\u503c \u6210\u529f\uff1a0 \u5931\u8d25\uff1a\u8fd4\u56de\u9519\u8bef\u53f7\u3002\u8fd9\u4e2a\u9519\u8bef\u53f7\u548c\u4e4b\u524d errno \u4e0d\u592a\u4e00\u6837\u3002\u83b7\u53d6\u9519\u8bef\u53f7\u7684\u4fe1\u606f\uff1a char * strerror(int errnum); #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void * arg) { printf(\"chid thread id : %ld\\n\", pthread_self()); return NULL; } int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid; int ret = pthread_create(&tid, NULL, myWork, NULL); if(ret != 0) { char * errstr = strerror(ret); printf(\"error1 : %s\\n\", errstr); } // \u8f93\u51fa\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684id printf(\"tid : %ld, main thread id : %ld\\n\", tid, pthread_self()); // \u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u5206\u79bb,\u5b50\u7ebf\u7a0b\u5206\u79bb\u540e\uff0c\u5b50\u7ebf\u7a0b\u7ed3\u675f\u65f6\u5bf9\u5e94\u7684\u8d44\u6e90\u5c31\u4e0d\u9700\u8981\u4e3b\u7ebf\u7a0b\u91ca\u653e ret = pthread_detach(tid); if(ret != 0) { char * errstr = strerror(ret); printf(\"error2 : %s\\n\", errstr); } // \u8bbe\u7f6e\u5206\u79bb\u540e\uff0c\u5bf9\u5206\u79bb\u7684\u5b50\u7ebf\u7a0b\u8fdb\u884c\u8fde\u63a5 pthread_join() // ret = pthread_join(tid, NULL); // if(ret != 0) { // char * errstr = strerror(ret); // printf(\"error3 : %s\\n\", errstr); // } pthread_exit(NULL); return 0; } \u7ebf\u7a0b\u53d6\u6d88 int pthread_cancel(pthread_t thread); \u901a\u8fc7 man 3 pthread_cancel \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u53d6\u6d88\u7ebf\u7a0b\uff08\u8ba9\u7ebf\u7a0b\u7ec8\u6b62\uff09\u3002\u53d6\u6d88\u67d0\u4e2a\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u7ec8\u6b62\u67d0\u4e2a\u7ebf\u7a0b\u7684\u8fd0\u884c\uff0c \u4f46\u662f\u5e76\u4e0d\u662f\u7acb\u9a6c\u7ec8\u6b62\uff0c\u800c\u662f\u5f53\u5b50\u7ebf\u7a0b\u6267\u884c\u5230\u4e00\u4e2a \u53d6\u6d88\u70b9 \uff0c\u7ebf\u7a0b\u624d\u4f1a\u7ec8\u6b62 \u53d6\u6d88\u70b9 \uff1a\u7cfb\u7edf\u89c4\u5b9a\u597d\u7684\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u7c97\u7565\u7684\u7406\u89e3\u4e3a\u4ece\u7528\u6237\u533a\u5230\u5185\u6838\u533a\u5207\u6362\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7 man pthreads \u67e5\u770b\u53d6\u6d88\u70b9 #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void * arg) { printf(\"chid thread id : %ld\\n\", pthread_self()); for (int i = 0; i < 20; i++) { printf(\"child: %d\\n\", i); } return NULL; } int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid; int ret = pthread_create(&tid, NULL, myWork, NULL); if(ret != 0) { char * errstr = strerror(ret); printf(\"error1 : %s\\n\", errstr); } // \u7ebf\u7a0b\u53d6\u6d88 pthread_cancel(tid); for (int i = 0; i < 20; i++) { printf(\"main: %d\\n\", i); } // \u8f93\u51fa\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684id printf(\"tid : %ld, main thread id : %ld\\n\", tid, pthread_self()); pthread_exit(NULL); return 0; } \u4ee5\u4e0a\u4ee3\u7801\u5728\u4e0d\u540c\u673a\u5668\u53ef\u80fd\u65e0\u6cd5\u89e6\u53d1\u7ebf\u7a0b\u53d6\u6d88\uff0c\u6bcf\u6b21\u6267\u884c\u7ed3\u679c\u4e5f\u4e0d\u4e00\u5b9a\u76f8\u540c=>==\u731c\u6d4b\u7531\u4e8e\u901f\u5ea6\u8fc7\u5feb== \u865a\u62df\u673a \u5b9e\u4f53\u673a \u7ebf\u7a0b\u5c5e\u6027 \u5e38\u7528API \u7ebf\u7a0b\u5c5e\u6027\u7c7b\u578b\uff1a pthread_attr_t \u521d\u59cb\u5316\u7ebf\u7a0b\u5c5e\u6027\u53d8\u91cf\uff1a int pthread_attr_init(pthread_attr_t *attr); \u91ca\u653e\u7ebf\u7a0b\u5c5e\u6027\u7684\u8d44\u6e90\uff1a int pthread_attr_destroy(pthread_attr_t *attr); \u83b7\u53d6\u7ebf\u7a0b\u5206\u79bb\u7684\u72b6\u6001\u5c5e\u6027\uff1a int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate); \u8bbe\u7f6e\u7ebf\u7a0b\u5206\u79bb\u7684\u72b6\u6001\u5c5e\u6027\uff1a int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate); \u8bbe\u7f6e\u6b65\u9aa4 \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5c5e\u6027\u53d8\u91cf \u521d\u59cb\u5316\u5c5e\u6027\u53d8\u91cf \u8bbe\u7f6e\u5c5e\u6027 \u91ca\u653e\u7ebf\u7a0b\u5c5e\u6027\u8d44\u6e90 \u5b9e\u4f8b\uff1a\u901a\u8fc7\u8bbe\u7f6e\u7ebf\u7a0b\u5c5e\u6027\u5b9e\u73b0\u7ebf\u7a0b\u5206\u79bb #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void * arg) { printf(\"chid thread id : %ld\\n\", pthread_self()); for (int i = 0; i < 5; i++) { printf(\"child: %d\\n\", i); } return NULL; } int main() { // 1. \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5c5e\u6027\u53d8\u91cf pthread_attr_t attr; // 2. \u521d\u59cb\u5316\u5c5e\u6027\u53d8\u91cf pthread_attr_init(&attr); // 3. \u8bbe\u7f6e\u5c5e\u6027-\u7ebf\u7a0b\u5206\u79bb pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED); // \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid; int ret = pthread_create(&tid, NULL, myWork, NULL); if(ret != 0) { char * errstr = strerror(ret); printf(\"error1 : %s\\n\", errstr); } // \u83b7\u53d6\u7ebf\u7a0b\u7684\u6808\u7684\u5927\u5c0f size_t size; pthread_attr_getstacksize(&attr, &size); printf(\"thread stack size : %ld\\n\", size); // \u8f93\u51fa\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684id printf(\"tid : %ld, main thread id : %ld\\n\", tid, pthread_self()); // 4. \u91ca\u653e\u7ebf\u7a0b\u5c5e\u6027\u8d44\u6e90 pthread_attr_destroy(&attr); pthread_exit(NULL); return 0; } \u7ebf\u7a0b\u540c\u6b65 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/03Linux\u591a\u7ebf\u7a0b\u5f00\u53d1/02 \u7ebf\u7a0b\u540c\u6b65 ==\u7591\u95ee== \u4ec0\u4e48\u65f6\u5019\u52a0\u9501\u5408\u9002\uff1f\u4e0d\u540c\u65f6\u673a\u52a0\u9501\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u4e00\u6837\u7684\u7ed3\u679c \u51fa\u73b0\u7684\u539f\u56e0 \u5047\u8bbe\u6211\u6709100\u5f20\u7968\uff0c\u6709\u4e09\u4e2a\u7a97\u53e3\u540c\u65f6\u5728\u552e\u5356\uff0c\u90a3\u4e48 \u5982\u679c ticket \u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7a97\u53e3\u90fd\u662f\u4ece100\u5f00\u59cb\u552e\u5356=>\u6267\u884c test1() \u5982\u679c ticket \u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u90a3\u4e48\u4e0d\u540c\u7a97\u53e3\u53ef\u80fd\u56e0\u4e3a\u62a2\u5360\u8d44\u6e90\u800c\u540c\u65f6\u5f00\u59cb\u552e\u5356\uff0c\u5bfc\u81f4\u51fa\u73b0\u540c\u65f6\u5728\u5356\u540c\u4e00\u5f20\u7968\uff08\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\u7968\uff09=>\u6267\u884c test2() #include <stdio.h> #include <pthread.h> void* selltickets1(void* arg) { int tickets = 10; while (tickets > 0) { printf(\"\u7ebf\u7a0b%ld \u6b63\u5728\u552e\u5356\u7b2c%d\u5f20\u7968\\n\", pthread_self(), tickets); tickets--; } return NULL; } void test1() { // \u521b\u5efa\u4e09\u4e2a\u7ebf\u7a0b pthread_t tid1; pthread_t tid2; pthread_t tid3; pthread_create(&tid1, NULL, selltickets1, NULL); pthread_create(&tid2, NULL, selltickets1, NULL); pthread_create(&tid3, NULL, selltickets1, NULL); // \u7ebf\u7a0b\u8fde\u63a5\uff0c\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); } int total_tickets = 10; void* selltickets2(void* arg) { while (total_tickets > 0) { printf(\"\u7ebf\u7a0b%ld \u6b63\u5728\u552e\u5356\u7b2c%d\u5f20\u7968\\n\", pthread_self(), total_tickets); total_tickets--; } return NULL; } void test2() { // \u521b\u5efa\u4e09\u4e2a\u7ebf\u7a0b pthread_t tid1; pthread_t tid2; pthread_t tid3; pthread_create(&tid1, NULL, selltickets2, NULL); pthread_create(&tid2, NULL, selltickets2, NULL); pthread_create(&tid3, NULL, selltickets2, NULL); // \u7ebf\u7a0b\u8fde\u63a5\uff0c\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); } int main() { test2(); pthread_exit(NULL); // \u9000\u51famain\u8fdb\u7a0b return 0; } \u6267\u884c test1 \u6267\u884c test2 \u7ebf\u7a0b\u540c\u6b65\u6982\u5ff5 \u7ebf\u7a0b\u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff0c \u80fd\u591f\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u6765\u5171\u4eab\u4fe1\u606f \u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u4fbf\u6377\u7684\u5171\u4eab\u662f\u6709\u4ee3\u4ef7\u7684\uff1a\u5fc5\u987b\u786e\u4fdd\u591a\u4e2a\u7ebf\u7a0b\u4e0d\u4f1a\u540c\u65f6\u4fee\u6539\u540c\u4e00\u53d8\u91cf\uff0c\u6216\u8005\u67d0\u4e00\u7ebf\u7a0b\u4e0d\u4f1a\u8bfb\u53d6\u6b63\u5728\u7531\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539\u7684\u53d8\u91cf \u4e34\u754c\u533a \u662f\u6307\u8bbf\u95ee\u67d0\u4e00\u5171\u4eab\u8d44\u6e90\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u4e14\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u5e94\u4e3a \u539f\u5b50\u64cd\u4f5c \uff0c\u4e5f\u5c31\u662f\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u5171\u4eab\u8d44\u6e90\u7684\u5176\u4ed6\u7ebf\u7a0b\u4e0d\u5e94\u7ec8\u7aef\u8be5\u7247\u6bb5\u7684\u6267\u884c \u7ebf\u7a0b\u540c\u6b65 \uff1a\u5373 \u5f53\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u5bf9\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f4\u5230\u8be5\u7ebf\u7a0b\u5b8c\u6210\u64cd\u4f5c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u5bf9\u8be5\u5185\u5b58\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5176\u4ed6\u7ebf\u7a0b\u5219\u5904\u4e8e\u7b49\u5f85\u72b6\u6001 \u4e92\u65a5\u91cf/\u4e92\u65a5\u9501 \u57fa\u672c\u6982\u5ff5 \u4e3a\u907f\u514d\u7ebf\u7a0b\u66f4\u65b0\u5171\u4eab\u53d8\u91cf\u65f6\u51fa\u73b0\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 \u4e92\u65a5\u91cf\uff08mutex \u662f mutual exclusion\u7684\u7f29\u5199\uff09 \u6765\u786e\u4fdd\u540c\u65f6\u4ec5\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u67d0\u9879\u5171\u4eab\u8d44\u6e90\u3002\u4f7f\u7528 \u4e92\u65a5\u91cf\u80fd\u4fdd\u8bc1\u5bf9\u4efb\u610f\u5171\u4eab\u8d44\u6e90\u7684\u539f\u5b50\u8bbf\u95ee \u4e92\u65a5\u91cf\u6709\u4e24\u79cd\u72b6\u6001\uff1a \u5df2\u9501\u5b9a\uff08locked\uff09 \u548c \u672a\u9501\u5b9a\uff08unlocked\uff09 \u3002\u4efb\u4f55\u65f6\u5019\uff0c \u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u9501\u5b9a\u8be5\u4e92\u65a5\u91cf \u3002\u8bd5\u56fe\u5bf9\u5df2\u7ecf\u9501\u5b9a\u7684\u67d0\u4e00\u4e92\u65a5\u91cf\u518d\u6b21\u52a0\u9501\uff0c\u5c06\u53ef\u80fd\u963b\u585e\u7ebf\u7a0b\u6216\u8005\u62a5\u9519\u5931\u8d25\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u52a0\u9501\u65f6\u4f7f\u7528\u7684\u65b9\u6cd5 \u4e00\u65e6\u7ebf\u7a0b\u9501\u5b9a\u4e92\u65a5\u91cf\uff0c\u968f\u5373\u6210\u4e3a\u8be5\u4e92\u65a5\u91cf\u7684\u6240\u6709\u8005\uff0c \u53ea\u6709\u6240\u6709\u8005\u624d\u80fd\u7ed9\u4e92\u65a5\u91cf\u89e3\u9501 \u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5bf9\u6bcf\u4e00\u5171\u4eab\u8d44\u6e90\uff08\u53ef\u80fd\u7531\u591a\u4e2a\u76f8\u5173\u53d8\u91cf\u7ec4\u6210\uff09\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u4e92\u65a5\u91cf\uff0c\u6bcf\u4e00\u7ebf\u7a0b\u5728\u8bbf\u95ee\u540c\u4e00\u8d44\u6e90\u65f6\u5c06\u91c7\u7528\u5982\u4e0b\u534f\u8bae \u9488\u5bf9\u5171\u4eab\u8d44\u6e90\u9501\u5b9a\u4e92\u65a5\u91cf \u8bbf\u95ee\u5171\u4eab\u8d44\u6e90 \u5bf9\u4e92\u65a5\u91cf\u89e3\u9501 \u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u8bd5\u56fe\u6267\u884c\u8fd9\u4e00\u5757\u4ee3\u7801\uff08\u4e00\u4e2a\u4e34\u754c\u533a\uff09\uff0c\u4e8b\u5b9e\u4e0a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6301\u6709\u8be5\u4e92\u65a5\u91cf\uff08\u5176\u4ed6\u7ebf\u7a0b\u5c06\u906d\u5230\u963b\u585e\uff09\uff0c\u5373\u540c\u65f6\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8fdb\u5165\u8fd9\u6bb5\u4ee3\u7801\u533a\u57df\uff0c\u5982\u4e0b \u4e92\u65a5\u91cf\u76f8\u5173\u64cd\u4f5c\u51fd\u6570 \u4e92\u65a5\u91cf\u7684\u7c7b\u578b\uff1a pthread_mutex_t \u521d\u59cb\u5316\u4e92\u65a5\u91cf\uff1a int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr); \u53c2\u6570 mutex \uff1a \u9700\u8981\u521d\u59cb\u5316\u7684\u4e92\u65a5\u91cf\u53d8\u91cf attr \uff1a \u4e92\u65a5\u91cf\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u8bbe\u7f6e\u4e3aNULL\uff0c\u7531\u5185\u6838\u6307\u5b9a restrict : C\u8bed\u8a00\u7684\u4fee\u9970\u7b26\uff0c\u88ab\u4fee\u9970\u7684\u6307\u9488\uff0c\u4e0d\u80fd\u7531\u53e6\u5916\u7684\u4e00\u4e2a\u6307\u9488\u8fdb\u884c\u64cd\u4f5c \u91ca\u653e\u4e92\u65a5\u91cf\u7684\u8d44\u6e90\uff1a int pthread_mutex_destroy(pthread_mutex_t *mutex); \u52a0\u9501\uff1a int pthread_mutex_lock(pthread_mutex_t *mutex); \u5c1d\u8bd5\u52a0\u9501\uff1a int pthread_mutex_trylock(pthread_mutex_t *mutex); \u89e3\u9501\uff1a int pthread_mutex_unlock(pthread_mutex_t *mutex); \u5b9e\u4f8b\uff1a\u4e92\u65a5\u9501\u5b9e\u73b0\u8fdb\u7a0b\u540c\u6b65\u552e\u7968 #include <stdio.h> #include <pthread.h> // \u5168\u5c40\u53d8\u91cf\u521b\u5efa\u4e92\u65a5\u91cf\uff0c\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u90fd\u80fd\u8bbf\u95ee pthread_mutex_t mutex; int total_tickets = 100; void* selltickets(void* arg) { while (1) { // \u52a0\u9501 pthread_mutex_lock(&mutex); if (total_tickets > 0) { // \u8bbf\u95ee\u5171\u4eab\u53d8\u91cf printf(\"\u7ebf\u7a0b%ld \u6b63\u5728\u552e\u5356\u7b2c%d\u5f20\u7968\\n\", pthread_self(), total_tickets); total_tickets--; } else { // \u89e3\u9501 pthread_mutex_unlock(&mutex); break; } // \u89e3\u9501 pthread_mutex_unlock(&mutex); } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex, NULL); // \u521b\u5efa\u4e09\u4e2a\u7ebf\u7a0b pthread_t tid1; pthread_t tid2; pthread_t tid3; pthread_create(&tid1, NULL, selltickets, NULL); pthread_create(&tid2, NULL, selltickets, NULL); pthread_create(&tid3, NULL, selltickets, NULL); // \u7ebf\u7a0b\u8fde\u63a5\uff0c\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); pthread_exit(NULL); // \u9000\u51famain\u8fdb\u7a0b // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex); return 0; } \u6b7b\u9501 \u57fa\u672c\u6982\u5ff5 \u4e00\u4e2a\u7ebf\u7a0b\u9700\u8981\u540c\u65f6\u8bbf\u95ee\u4e24\u4e2a\u6216\u66f4\u591a\u4e0d\u540c\u7684\u5171\u4eab\u8d44\u6e90\uff0c\u800c\u6bcf\u4e2a\u8d44\u6e90\u53c8\u90fd\u7531\u4e0d\u540c\u7684\u4e92\u65a5\u91cf\u7ba1\u7406\u3002\u5f53\u8d85\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u52a0\u9501\u540c\u4e00\u7ec4\u4e92\u65a5\u91cf\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u53d1\u751f \u6b7b\u9501 \u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e89\u593a\u5171\u4eab\u8d44\u6e90\u800c\u9020\u6210\u7684\u4e00\u79cd\u4e92\u76f8\u7b49\u5f85\u7684\u73b0\u8c61\uff0c\u82e5\u65e0\u5916\u529b\u4f5c\u7528\uff0c\u5b83\u4eec\u90fd\u5c06\u65e0\u6cd5\u63a8\u8fdb\u4e0b\u53bb\u3002\u6b64\u65f6\u79f0\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u6216\u7cfb\u7edf\u4ea7\u751f\u4e86\u6b7b\u9501 \u6b7b\u9501\u7684\u51e0\u79cd\u573a\u666f \u5fd8\u8bb0\u91ca\u653e\u9501 #include <stdio.h> #include <pthread.h> #include <unistd.h> // \u5168\u5c40\u53d8\u91cf\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u5171\u4eab\u8fd9\u4e00\u4efd\u8d44\u6e90\u3002 int tickets = 1000; // \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u91cf pthread_mutex_t mutex; void * sellticket(void * arg) { // \u5356\u7968 while(1) { // \u52a0\u9501 pthread_mutex_lock(&mutex); if(tickets > 0) { usleep(6000); printf(\"%ld \u6b63\u5728\u5356\u7b2c %d \u5f20\u95e8\u7968\\n\", pthread_self(), tickets); tickets--; }else { // \u89e3\u9501 pthread_mutex_unlock(&mutex); break; } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex, NULL); // \u521b\u5efa3\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid1, tid2, tid3; pthread_create(&tid1, NULL, sellticket, NULL); pthread_create(&tid2, NULL, sellticket, NULL); pthread_create(&tid3, NULL, sellticket, NULL); // \u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90,\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); pthread_exit(NULL); // \u9000\u51fa\u4e3b\u7ebf\u7a0b // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex); return 0; } \u91cd\u590d\u52a0\u9501 #include <stdio.h> #include <pthread.h> #include <unistd.h> // \u5168\u5c40\u53d8\u91cf\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u5171\u4eab\u8fd9\u4e00\u4efd\u8d44\u6e90\u3002 int tickets = 1000; // \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u91cf pthread_mutex_t mutex; void * sellticket(void * arg) { // \u5356\u7968 while(1) { // \u52a0\u9501 pthread_mutex_lock(&mutex); pthread_mutex_lock(&mutex); if(tickets > 0) { usleep(6000); printf(\"%ld \u6b63\u5728\u5356\u7b2c %d \u5f20\u95e8\u7968\\n\", pthread_self(), tickets); tickets--; }else { // \u89e3\u9501 pthread_mutex_unlock(&mutex); break; } // \u89e3\u9501 pthread_mutex_unlock(&mutex); pthread_mutex_unlock(&mutex); } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex, NULL); // \u521b\u5efa3\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid1, tid2, tid3; pthread_create(&tid1, NULL, sellticket, NULL); pthread_create(&tid2, NULL, sellticket, NULL); pthread_create(&tid3, NULL, sellticket, NULL); // \u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90,\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); pthread_exit(NULL); // \u9000\u51fa\u4e3b\u7ebf\u7a0b // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex); return 0; } \u591a\u7ebf\u7a0b\u591a\u9501\uff0c\u62a2\u5360\u9501\u8d44\u6e90 #include <stdio.h> #include <pthread.h> #include <unistd.h> // \u521b\u5efa2\u4e2a\u4e92\u65a5\u91cf pthread_mutex_t mutex1, mutex2; void * workA(void * arg) { pthread_mutex_lock(&mutex1); sleep(1); pthread_mutex_lock(&mutex2); printf(\"workA....\\n\"); pthread_mutex_unlock(&mutex2); pthread_mutex_unlock(&mutex1); return NULL; } void * workB(void * arg) { pthread_mutex_lock(&mutex2); sleep(1); pthread_mutex_lock(&mutex1); printf(\"workB....\\n\"); pthread_mutex_unlock(&mutex1); pthread_mutex_unlock(&mutex2); return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex1, NULL); pthread_mutex_init(&mutex2, NULL); // \u521b\u5efa2\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid1, tid2; pthread_create(&tid1, NULL, workA, NULL); pthread_create(&tid2, NULL, workB, NULL); // \u56de\u6536\u5b50\u7ebf\u7a0b\u8d44\u6e90 pthread_join(tid1, NULL); pthread_join(tid2, NULL); // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex1); pthread_mutex_destroy(&mutex2); return 0; } \u8bfb\u5199\u9501 \u57fa\u672c\u6982\u5ff5 \u5f53\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u6301\u6709\u4e92\u65a5\u9501\u65f6\uff0c\u4e92\u65a5\u9501\u5c06\u6240\u6709\u8bd5\u56fe\u8fdb\u5165\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u90fd\u963b\u585e\u4f4f\u3002\u4f46\u662f\u8003\u8651\u4e00\u79cd\u60c5\u5f62\uff0c\u5f53\u524d\u6301\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u53ea\u662f\u8981\u8bfb\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\uff0c\u800c\u540c\u65f6\u6709\u5176\u5b83\u51e0\u4e2a\u7ebf\u7a0b\u4e5f\u60f3\u8bfb\u53d6\u8fd9\u4e2a\u5171\u4eab\u8d44\u6e90\uff0c\u4f46\u662f\u7531\u4e8e\u4e92\u65a5\u9501\u7684\u6392\u5b83\u6027\uff0c\u6240\u6709\u5176\u5b83\u7ebf\u7a0b\u90fd\u65e0\u6cd5\u83b7\u53d6\u9501\uff0c\u4e5f\u5c31\u65e0\u6cd5\u8bfb\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u4e86\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u95ee\u9898 \u5728\u5bf9\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u4e2d\uff0c \u66f4\u591a\u7684\u662f\u8bfb\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u8f83\u5c11 \uff0c\u4f8b\u5982\u5bf9\u6570\u636e\u5e93\u6570\u636e\u7684\u8bfb\u5199\u5e94\u7528\u3002\u4e3a\u4e86\u6ee1\u8db3\u5f53\u524d\u80fd\u591f\u5141\u8bb8\u591a\u4e2a\u8bfb\u51fa\uff0c\u4f46\u53ea\u5141\u8bb8\u4e00\u4e2a\u5199\u5165\u7684\u9700\u6c42\uff0c\u7ebf\u7a0b\u63d0\u4f9b\u4e86\u8bfb\u5199\u9501\u6765\u5b9e\u73b0 \u8bfb\u5199\u9501\u7684\u7279\u70b9 \u5982\u679c\u6709\u5176\u5b83\u7ebf\u7a0b\u8bfb\u6570\u636e\uff0c\u5219\u5141\u8bb8\u5176\u5b83\u7ebf\u7a0b\u6267\u884c\u8bfb\u64cd\u4f5c\uff0c\u4f46\u4e0d\u5141\u8bb8\u5199\u64cd\u4f5c \u5982\u679c\u6709\u5176\u5b83\u7ebf\u7a0b\u5199\u6570\u636e\uff0c\u5219\u5176\u5b83\u7ebf\u7a0b\u90fd\u4e0d\u5141\u8bb8\u8bfb\u3001\u5199\u64cd\u4f5c \u5199\u662f\u72ec\u5360\u7684\uff0c\u5199\u7684\u4f18\u5148\u7ea7\u9ad8 \u8bfb\u5199\u9501\u76f8\u5173\u64cd\u4f5c\u51fd\u6570 \u8bfb\u5199\u9501\u7684\u7c7b\u578b\uff1a pthread_rwlock_t \u521d\u59cb\u5316\u8bfb\u5199\u9501\uff1a int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr); \u91ca\u653e\u4e92\u65a5\u91cf\u7684\u8d44\u6e90\uff1a int pthread_rwlock_destroy(pthread_rwlock_t *rwlock); \u8bfb\u64cd\u4f5c\u52a0\u9501\uff1a int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock); \u8bfb\u64cd\u4f5c\u5c1d\u8bd5\u52a0\u9501\uff1a int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock); \u5199\u64cd\u4f5c\u52a0\u9501\uff1a int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock); \u5199\u64cd\u4f5c\u5c1d\u8bd5\u52a0\u9501\uff1a int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock); \u89e3\u9501\uff1a int pthread_rwlock_unlock(pthread_rwlock_t *rwlock); \u5b9e\u4f8b\uff1a\u8bfb\u5199\u9501\u5b9e\u73b0\u8bfb\u7ebf\u7a0b\u6570\u91cf\u5927\u4e8e\u5199\u7ebf\u7a0b\u6570\u91cf 8\u4e2a\u7ebf\u7a0b\u64cd\u4f5c\u540c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u30023\u4e2a\u7ebf\u7a0b\u4e0d\u5b9a\u65f6\u5199\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c5\u4e2a\u7ebf\u7a0b\u4e0d\u5b9a\u65f6\u7684\u8bfb\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf #include <stdio.h> #include <pthread.h> #include <unistd.h> int num = 0; // \u521b\u5efa\u8bfb\u5199\u9501 pthread_rwlock_t rwlock; void* workA(void* arg) { while (1) { // \u52a0\u5199\u9501 pthread_rwlock_wrlock(&rwlock); num++; printf(\"++write, tid : %ld, num : %d\\n\", pthread_self(), num); // \u89e3\u9501 pthread_rwlock_unlock(&rwlock); usleep(100); } return NULL; } void* workB(void* arg) { while (1) { // \u52a0\u8bfb\u9501 pthread_rwlock_rdlock(&rwlock); printf(\"===read, tid : %ld, num : %d\\n\", pthread_self(), num); // \u89e3\u9501 pthread_rwlock_unlock(&rwlock); usleep(100); } return NULL; } int main() { // \u521d\u59cb\u5316\u8bfb\u5199\u9501 pthread_rwlock_init(&rwlock, NULL); // \u521b\u5efa8\u4e2a\u7ebf\u7a0b\uff0c3\u4e2a\u5199\u7ebf\u7a0b\uff0c5\u4e2a\u8bfb\u7ebf\u7a0b pthread_t wtids[3], rtids[5]; for (int i = 0; i < 3; i++) { pthread_create(&wtids[i], NULL, workA, NULL); } for (int i = 0; i < 5; i++) { pthread_create(&rtids[i], NULL, workB, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u8d44\u6e90 for (int i = 0; i < 3; i++) { pthread_detach(wtids[i]); } for (int i = 0; i < 5; i++) { pthread_detach(rtids[i]); } // \u56de\u6536\u8bfb\u5199\u9501 pthread_rwlock_destroy(&rwlock); // \u56de\u6536\u4e3b\u7ebf\u7a0b pthread_exit(NULL); } \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005 \u5173\u7cfb\u6a21\u578b \u5b58\u5728\u95ee\u9898 \u5f53\u5bb9\u5668\u6ee1\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u751f\u4ea7 \u5f53\u5bb9\u5668\u7a7a\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u6d88\u8d39 \u591a\u4e2a\u751f\u4ea7\u8005\u6216\u6d88\u8d39\u8005\u65f6\uff0c\u4f1a\u51fa\u73b0\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u5b9e\u4f8b\uff1a\u7b80\u6613\u7248\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005\uff08\u4e92\u65a5\u91cf\uff0c==\u5b58\u5728\u672a\u89e3\u51b3\u95ee\u9898==\uff09 \u8bf4\u660e \u5f53\u5728\u5220\u9664\u8282\u70b9\u65f6\uff0c\u52a0\u9501\u65f6\u673a\u4e0d\u540c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6bb5\u9519\u8bef \u4ea7\u751f\u9519\u8bef\u7248\u5728\u865a\u62df\u673a\u4e0b\u65e0\u6cd5\u4ea7\u751f core \u6587\u4ef6\uff0c\u4ee5\u4e0b\u622a\u56fe\u6765\u81ea\u670d\u52a1\u5668\uff0c\u662f\u5426\u4f7f\u7528 -g \u53c2\u6570\u90fd\u80fd\u751f\u6210 core \u6587\u4ef6\uff0c==\u53ef\u80fd\u662f\u7ebf\u7a0b\u51fd\u6570\u81ea\u5e26\u80fd\u591f\u751f\u6210\uff1f== \u865a\u62df\u673a\u7248\u5728 \u91ca\u653e\u4e92\u65a5\u9501\u524d\u6dfb\u52a0while\u6b7b\u5faa\u73af \u5373\u53ef\u6b63\u5e38\u751f\u6210 core \u6587\u4ef6\uff0c\u6240\u4ee5\u4e0d\u4ea7\u751f core \u6587\u4ef6\u7684\u539f\u56e0\u53ef\u80fd\u662f==\u7ebf\u7a0b\u8fd8\u5728\u8fd0\u884c\u800c\u4e92\u65a5\u9501\u63d0\u524d\u88ab\u91ca\u653e\u4e86== \u6b63\u5e38\u6267\u884c\u7248 ```c #include #include #include #include // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void producter(void arg) { while (1) { pthread_mutex_lock(&mutex); struct Node newNode = (struct Node )malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); pthread_mutex_unlock(&mutex); usleep(100); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void consumer(void arg) { while (1) { pthread_mutex_lock(&mutex); struct Node* tmp = head; // \u5f53\u94fe\u8868\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u624d\u80fd\u5220\u9664 if (head != NULL) { head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); pthread_mutex_unlock(&mutex); usleep(100); } else { pthread_mutex_unlock(&mutex); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; } ``` \u4ea7\u751f\u9519\u8bef\u7248\uff08==\u539f\u56e0\u8fd8\u4e0d\u6e05\u6670\uff0c\u540e\u7eed\u518d\u770b==\uff09 ```c #include #include #include #include // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void producter(void arg) { while (1) { pthread_mutex_lock(&mutex); struct Node newNode = (struct Node )malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); pthread_mutex_unlock(&mutex); usleep(100); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void consumer(void arg) { while (1) { // \u5982\u679c\u53ea\u5728\u5934\u7ed3\u70b9\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e92\u65a5\u9501\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef\uff0c\u6682\u672a\u627e\u5230\u539f\u56e0 if (head != NULL) { pthread_mutex_lock(&mutex); struct Node* tmp = head; head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); tmp = NULL; pthread_mutex_unlock(&mutex); usleep(100); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } // \u52a0while\u5faa\u73af\u5373\u53ef\u5728\u865a\u62df\u673a\u4e2d\u751f\u6210core\u6587\u4ef6 // while (1) { // sleep(10); // } // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; } ``` \u670d\u52a1\u5668 \u865a\u62df\u673a \u6761\u4ef6\u53d8\u91cf \u6761\u4ef6\u53d8\u91cf\u76f8\u5173\u64cd\u4f5c\u51fd\u6570 \u5f53\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u624d\u6267\u884c\uff0c\u4e0d\u662f\u9501\uff0c\u914d\u5408\u4e92\u65a5\u91cf\u4f7f\u7528 \u6761\u4ef6\u53d8\u91cf\u7684\u7c7b\u578b\uff1a pthread_cond_t \u521d\u59cb\u5316\uff1a int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr); \u56de\u6536\uff1a int pthread_cond_destroy(pthread_cond_t *cond); \u7b49\u5f85\uff0c\u8c03\u7528\u4e86\u8be5\u51fd\u6570\uff0c\u7ebf\u7a0b\u4f1a\u963b\u585e\uff1a int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex); \u7b49\u5f85\u591a\u957f\u65f6\u95f4\uff0c\u8c03\u7528\u4e86\u8fd9\u4e2a\u51fd\u6570\uff0c\u7ebf\u7a0b\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u6307\u5b9a\u7684\u65f6\u95f4\u7ed3\u675f\uff1a int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime); \u5524\u9192\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\uff1a int pthread_cond_signal(pthread_cond_t *cond); \u5524\u9192\u6240\u6709\u7684\u7b49\u5f85\u7684\u7ebf\u7a0b\uff1a int pthread_cond_broadcast(pthread_cond_t *cond); \u5b9e\u4f8b\uff1a\u6761\u4ef6\u53d8\u91cf\u4e0b\u7684\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005 \u5f53\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u65f6\uff0c\u901a\u77e5\u6d88\u8d39\u8005\u6d88\u8d39\uff0c\u5426\u5219\u7b49\u5f85 #include <stdio.h> #include <pthread.h> #include <stdlib.h> #include <unistd.h> // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u6761\u4ef6\u53d8\u91cf pthread_cond_t cond; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void* producter(void* arg) { while (1) { pthread_mutex_lock(&mutex); struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); // \u53ea\u8981\u751f\u4ea7\u4e86\u4e00\u4e2a\uff0c\u5c31\u901a\u77e5\u6d88\u8d39\u8005\u6d88\u8d39 pthread_cond_signal(&cond); pthread_mutex_unlock(&mutex); usleep(100); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void* consumer(void* arg) { while (1) { pthread_mutex_lock(&mutex); struct Node* tmp = head; // \u5f53\u94fe\u8868\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u624d\u80fd\u5220\u9664 if (head != NULL) { head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); pthread_mutex_unlock(&mutex); usleep(100); } else { // \u6ca1\u6709\u6570\u636e\uff0c\u9700\u8981\u7b49\u5f85 // \u5f53\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u963b\u585e\u7684\u65f6\u5019\uff0c\u4f1a\u5bf9\u4e92\u65a5\u9501\u8fdb\u884c\u89e3\u9501\uff0c\u5f53\u4e0d\u963b\u585e\u7684\uff0c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\uff0c\u4f1a\u91cd\u65b0\u52a0\u9501\u3002 pthread_cond_wait(&cond, &mutex); pthread_mutex_unlock(&mutex); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf pthread_cond_init(&cond, NULL); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } while (1) { sleep(10); } // \u56de\u6536\u6761\u4ef6\u53d8\u91cf pthread_cond_destroy(&cond); // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; } \u4fe1\u53f7\u91cf \u4fe1\u53f7\u91cf\u76f8\u5173\u64cd\u4f5c\u51fd\u6570 \u4fe1\u53f7\u91cf\u7684\u7c7b\u578b\uff1a sem_t int sem_init(sem_t *sem, int pshared, unsigned int value); \u529f\u80fd\uff1a\u521d\u59cb\u5316\u4fe1\u53f7\u91cf \u53c2\u6570 sem \uff1a\u4fe1\u53f7\u91cf\u53d8\u91cf\u7684\u5730\u5740 pshared \uff1a0 \u7528\u5728\u7ebf\u7a0b\u95f4 \uff0c\u975e0 \u7528\u5728\u8fdb\u7a0b\u95f4 value \uff1a\u4fe1\u53f7\u91cf\u4e2d\u7684\u503c\uff0c\u4ee3\u8868\u5bb9\u5668\u5927\u5c0f int sem_destroy(sem_t *sem); \u529f\u80fd\uff1a\u91ca\u653e\u8d44\u6e90 int sem_wait(sem_t *sem); \u529f\u80fd\uff1a\u5bf9\u4fe1\u53f7\u91cf\u52a0\u9501\uff0c\u8c03\u7528\u4e00\u6b21\u5bf9\u4fe1\u53f7\u91cf\u7684\u503c-1\uff0c\u5982\u679c\u503c\u4e3a0\uff0c\u5c31\u963b\u585e int sem_trywait(sem_t *sem); int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout); int sem_post(sem_t *sem); \u529f\u80fd\uff1a\u5bf9\u4fe1\u53f7\u91cf\u89e3\u9501\uff0c\u8c03\u7528\u4e00\u6b21\u5bf9\u4fe1\u53f7\u91cf\u7684\u503c+1 int sem_getvalue(sem_t *sem, int *sval); \u5b9e\u4f8b\uff1a\u4fe1\u53f7\u91cf\u4e0b\u7684\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005 \u4e0d\u9700\u8981\u5355\u72ec\u5224\u65ad \u5bb9\u5668 \u4e3a\u7a7a\u7684\u60c5\u51b5 #include <stdio.h> #include <pthread.h> #include <stdlib.h> #include <unistd.h> #include <semaphore.h> // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u4fe1\u53f7\u91cf sem_t psem; sem_t csem; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void* producter(void* arg) { while (1) { sem_wait(&psem); pthread_mutex_lock(&mutex); struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); pthread_mutex_unlock(&mutex); sem_post(&csem); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void* consumer(void* arg) { while (1) { sem_wait(&csem); pthread_mutex_lock(&mutex); struct Node* tmp = head; // \u5f53\u94fe\u8868\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u624d\u80fd\u5220\u9664 if (head != NULL) { head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); pthread_mutex_unlock(&mutex); sem_post(&psem); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521d\u59cb\u5316\u4fe1\u53f7\u91cf // \u6700\u591a\u751f\u4ea78\u4e2a sem_init(&psem, 0, 8); // \u521d\u59cb\u6ca1\u6709\u4e1c\u897f\u53ef\u4ee5\u6d88\u8d39 sem_init(&csem, 0, 0); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } while (1) { sleep(10); } // \u56de\u6536\u4fe1\u53f7\u91cf sem_destroy(&csem); sem_destroy(&psem); // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; }","title":"\u7ebf\u7a0b\u57fa\u7840"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_1","text":"","title":"\u7ebf\u7a0b\u57fa\u7840"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_2","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/03Linux\u591a\u7ebf\u7a0b\u5f00\u53d1/01 \u7ebf\u7a0b\u57fa\u7840","title":"\u8bf4\u660e"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_3","text":"","title":"\u7ebf\u7a0b\u6982\u8ff0"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_4","text":"\u4e0e \u8fdb\u7a0b\uff08process\uff09 \u7c7b\u4f3c\uff0c \u7ebf\u7a0b\uff08thread\uff09 \u662f\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f \u5e76\u53d1\u6267\u884c\u591a\u4e2a\u4efb\u52a1 \u7684\u4e00\u79cd\u673a\u5236 \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b \u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u5747\u4f1a\u72ec\u7acb\u6267\u884c\u76f8\u540c\u7a0b\u5e8f\uff0c\u4e14\u5171\u4eab\u540c\u4e00\u4efd\u5168\u5c40\u5185\u5b58\u533a\u57df\uff0c\u5176\u4e2d\u5305\u62ec\u521d\u59cb\u5316\u6570\u636e\u6bb5\u3001\u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff0c\u4ee5\u53ca\u5806\u5185\u5b58\u6bb5\u3002\uff08\u4f20\u7edf\u610f\u4e49\u4e0a\u7684 UNIX \u8fdb\u7a0b\u53ea\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u8be5\u8fdb\u7a0b\u53ea\u5305\u542b\u4e00\u4e2a\u7ebf\u7a0b\uff09 \u8fdb\u7a0b\u662f CPU \u5206\u914d\u8d44\u6e90\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u6267\u884c\u7684\u6700\u5c0f\u5355\u4f4d \u7ebf\u7a0b\u662f\u8f7b\u91cf\u7ea7\u7684\u8fdb\u7a0b\uff08 LWP\uff1aLight Weight Process \uff09\uff0c\u5728 Linux \u73af\u5883\u4e0b\u7ebf\u7a0b\u7684\u672c\u8d28\u4ecd\u662f\u8fdb\u7a0b \u67e5\u770b\u6307\u5b9a\u8fdb\u7a0b\u7684 LWP \u53f7\uff1a ps \u2013Lf pid \uff0c\u5176\u4e2d pid \u53ef\u4ee5\u7531 ps aux \u5f97\u5230 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c main\u51fd\u6570 \u6240\u5728\u7684\u7ebf\u7a0b\u6211\u4eec\u79f0\u4e4b\u4e3a \u4e3b\u7ebf\u7a0b\uff08main\u7ebf\u7a0b\uff09 \uff0c\u5176\u4f59\u521b\u5efa\u7684\u7ebf\u7a0b\u79f0\u4e3a \u5b50\u7ebf\u7a0b \u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\uff0c fork() \u51fd\u6570\u8c03\u7528\uff0c2\u8fdb\u7a0b\uff08\u7236\u5b50\u8fdb\u7a0b\uff09 \u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c pthread_create() \u51fd\u6570\u8c03\u7528\uff0c2\u4e2a\u7ebf\u7a0b\uff08\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\uff09","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_5","text":"\u8fdb\u7a0b\u95f4\u7684\u4fe1\u606f\u96be\u4ee5\u5171\u4eab \u3002\u7531\u4e8e\u9664\u53bb\u53ea\u8bfb\u4ee3\u7801\u6bb5\u5916\uff0c\u7236\u5b50\u8fdb\u7a0b\u5e76\u672a\u5171\u4eab\u5185\u5b58\uff0c\u56e0\u6b64\u5fc5\u987b\u91c7\u7528\u4e00\u4e9b\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u5728\u8fdb\u7a0b\u95f4\u8fdb\u884c\u4fe1\u606f\u4ea4\u6362 \u8c03\u7528 fork() \u6765\u521b\u5efa\u8fdb\u7a0b\u7684\u4ee3\u4ef7\u76f8\u5bf9\u8f83\u9ad8\uff0c\u5373\u4fbf\u5229\u7528\u5199\u65f6\u590d\u5236\u6280\u672f\uff0c\u4ecd\u7136\u9700\u8981\u590d\u5236\u8bf8\u5982\u5185\u5b58\u9875\u8868\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\u4e4b\u7c7b\u7684\u591a\u79cd\u8fdb\u7a0b\u5c5e\u6027\uff0c\u8fd9\u610f\u5473\u7740 fork() \u8c03\u7528\u5728\u65f6\u95f4\u4e0a\u7684\u5f00\u9500\u4f9d\u7136\u4e0d\u83f2 \u7ebf\u7a0b\u4e4b\u95f4\u80fd\u591f\u65b9\u4fbf\u3001\u5feb\u901f\u5730\u5171\u4eab\u4fe1\u606f\u3002\u53ea\u9700 \u5c06\u6570\u636e\u590d\u5236\u5230\u5171\u4eab\uff08\u5168\u5c40\u6216\u5806\uff09\u53d8\u91cf \u4e2d\u5373\u53ef \u521b\u5efa\u7ebf\u7a0b\u6bd4\u521b\u5efa\u8fdb\u7a0b\u901a\u5e38\u8981\u5feb 10 \u500d\u751a\u81f3\u66f4\u591a\u3002\u7ebf\u7a0b\u95f4\u662f\u5171\u4eab\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\uff0c\u65e0\u9700\u91c7\u7528\u5199\u65f6\u590d\u5236\u6765\u590d\u5236\u5185\u5b58\uff0c\u4e5f\u65e0\u9700\u590d\u5236\u9875\u8868","title":"\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u533a\u522b"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_6","text":"","title":"\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u548c\u975e\u5171\u4eab\u8d44\u6e90"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_7","text":"\u8fdb\u7a0b ID \u548c\u7236\u8fdb\u7a0b ID \u8fdb\u7a0b\u7ec4 ID \u548c\u4f1a\u8bdd ID \u7528\u6237 ID \u548c \u7528\u6237\u7ec4 ID \u6587\u4ef6\u63cf\u8ff0\u7b26\u8868 \u4fe1\u53f7\u5904\u7f6e \u6587\u4ef6\u7cfb\u7edf\u7684\u76f8\u5173\u4fe1\u606f\uff1a\u6587\u4ef6\u6743\u9650\u63a9\u7801\uff08 umask \uff09\u3001\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 \u865a\u62df\u5730\u5740\u7a7a\u95f4\uff08 \u9664\u6808\u3001.text \uff09","title":"\u5171\u4eab\u8d44\u6e90"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_8","text":"\u7ebf\u7a0b ID \u4fe1\u53f7\u63a9\u7801 \u7ebf\u7a0b\u7279\u6709\u6570\u636e error \u53d8\u91cf \u5b9e\u65f6\u8c03\u5ea6\u7b56\u7565\u548c\u4f18\u5148\u7ea7 \u6808\uff0c\u672c\u5730\u53d8\u91cf\u548c\u51fd\u6570\u7684\u8c03\u7528\u94fe\u63a5\u4fe1\u606f","title":"\u975e\u5171\u4eab\u8d44\u6e90"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#nptl","text":"\u5f53 Linux \u6700\u521d\u5f00\u53d1\u65f6\uff0c\u5728\u5185\u6838\u4e2d\u5e76\u4e0d\u80fd\u771f\u6b63\u652f\u6301\u7ebf\u7a0b\u3002\u4f46\u662f\u5b83\u7684\u786e\u53ef\u4ee5\u901a\u8fc7 clone() \u7cfb\u7edf\u8c03\u7528\u5c06\u8fdb\u7a0b\u4f5c\u4e3a\u53ef\u8c03\u5ea6\u7684\u5b9e\u4f53\u3002\u8fd9\u4e2a\u8c03\u7528\u521b\u5efa\u4e86\u8c03\u7528\u8fdb\u7a0b\uff08calling process\uff09\u7684\u4e00\u4e2a\u62f7\u8d1d\uff0c\u8fd9\u4e2a\u62f7\u8d1d\u4e0e\u8c03\u7528\u8fdb\u7a0b\u5171\u4eab\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u3002 LinuxThreads \u9879\u76ee\u4f7f\u7528\u8fd9\u4e2a\u8c03\u7528\u6765\u5b8c\u6210\u5728\u7528\u6237\u7a7a\u95f4\u6a21\u62df\u5bf9\u7ebf\u7a0b\u7684\u652f\u6301\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e9b\u7f3a\u70b9\uff0c\u5c24\u5176\u662f\u5728\u4fe1\u53f7\u5904\u7406\u3001\u8c03\u5ea6\u548c\u8fdb\u7a0b\u95f4\u540c\u6b65\u7b49\u65b9\u9762\u90fd\u5b58\u5728\u95ee\u9898\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u6a21\u578b\u4e5f\u4e0d\u7b26\u5408 POSIX \u7684\u8981\u6c42 \u8981\u6539\u8fdb LinuxThreads \uff0c\u9700\u8981\u5185\u6838\u7684\u652f\u6301\uff0c\u5e76\u4e14\u91cd\u5199\u7ebf\u7a0b\u5e93\u3002\u6709\u4e24\u4e2a\u76f8\u4e92\u7ade\u4e89\u7684\u9879\u76ee\u5f00\u59cb\u6765\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42 \u4e00\u4e2a\u5305\u62ec IBM \u7684\u5f00\u53d1\u4eba\u5458\u7684\u56e2\u961f\u5f00\u5c55\u4e86 NGPT\uff08Next-Generation POSIX Threads\uff09 \u9879\u76ee \u540c\u65f6\uff0cRed Hat \u7684\u4e00\u4e9b\u5f00\u53d1\u4eba\u5458\u5f00\u5c55\u4e86 NPTL \u9879\u76ee NGPT \u5728 2003 \u5e74\u4e2d\u671f\u88ab\u653e\u5f03\u4e86\uff0c\u628a\u8fd9\u4e2a\u9886\u57df\u5b8c\u5168\u7559\u7ed9\u4e86 NPTL NPTL \uff0c\u6216\u79f0\u4e3a Native POSIX Thread Library \uff0c\u662f Linux \u7ebf\u7a0b\u7684\u4e00\u4e2a\u65b0\u5b9e\u73b0\uff0c\u5b83\u514b\u670d\u4e86 LinuxThreads \u7684\u7f3a\u70b9\uff0c\u540c\u65f6\u4e5f\u7b26\u5408 POSIX \u7684\u9700\u6c42\u3002\u4e0e LinuxThreads \u76f8\u6bd4\uff0c\u5b83\u5728\u6027\u80fd\u548c\u7a33\u5b9a\u6027\u65b9\u9762\u90fd\u63d0\u4f9b\u4e86\u91cd\u5927\u7684\u6539\u8fdb \u67e5\u770b\u5f53\u524d pthread \u5e93\u7248\u672c\uff1a getconf GNU_LIBPTHREAD_VERSION","title":"NPTL"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_9","text":"\u7531\u4e8e pthread \u5c5e\u4e8e\u7b2c\u4e09\u65b9\u5e93\uff0c\u6240\u4ee5\u5728\u7f16\u8bd1\u65f6\u9700\u8981\u52a0\u4e0a\u53c2\u6570 -pthread \u6216 -lpthread \u5373\u6307\u5b9a\u5305\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u52a0\u62a5\u4ee5\u4e0b\u9519\u8bef\uff08\u6267\u884c\u7a0b\u5e8f\u4e3a\u7ebf\u7a0b\u521b\u5efa\uff09","title":"\u6ce8\u610f"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_10","text":"\u83b7\u53d6\u5f53\u524d\u7684\u7ebf\u7a0b\u7684\u7ebf\u7a0bID\uff1a pthread_t pthread_self(void); \u6bd4\u8f83\u4e24\u4e2a\u7ebf\u7a0bID\u662f\u5426\u76f8\u7b49\uff1a int pthread_equal(pthread_t t1, pthread_t t2); \u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c pthread_t \u7c7b\u578b\u7684\u5b9e\u73b0\u4e0d\u4e00\u6837\uff0c\u6709\u7684\u662f\u65e0\u7b26\u53f7\u7684\u957f\u6574\u578b\uff0c\u6709\u7684\u662f\u4f7f\u7528\u7ed3\u6784\u4f53\u53bb\u5b9e\u73b0\u7684 \u7ebf\u7a0b\u521b\u5efa\uff1a int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); \u7ebf\u7a0b\u7ec8\u6b62\uff1a void pthread_exit(void *retval);","title":"\u7ebf\u7a0b\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_11","text":"int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg); \u901a\u8fc7 man 3 pthread_create \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b \u53c2\u6570 thread \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u7ebf\u7a0b\u521b\u5efa\u6210\u529f\u540e\uff0c\u5b50\u7ebf\u7a0b\u7684\u7ebf\u7a0bID\u88ab\u5199\u5230\u8be5\u53d8\u91cf\u4e2d attr : \u8bbe\u7f6e\u7ebf\u7a0b\u7684\u5c5e\u6027\uff0c\u4e00\u822c\u4f7f\u7528\u9ed8\u8ba4\u503c\uff0cNULL start_routine : \u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u5b50\u7ebf\u7a0b\u9700\u8981\u5904\u7406\u7684\u903b\u8f91\u4ee3\u7801 arg : \u7ed9\u7b2c\u4e09\u4e2a\u53c2\u6570( start_routine )\u4f7f\u7528\uff0c\u4f20\u53c2 \u8fd4\u56de\u503c \u6210\u529f\uff1a0 \u5931\u8d25\uff1a\u8fd4\u56de\u9519\u8bef\u53f7\u3002\u8fd9\u4e2a\u9519\u8bef\u53f7\u548c\u4e4b\u524d errno \u4e0d\u592a\u4e00\u6837\u3002\u83b7\u53d6\u9519\u8bef\u53f7\u7684\u4fe1\u606f\uff1a char * strerror(int errnum); #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void* arg) { printf(\"child thread...\\n\"); printf(\"num = %d\\n\", *(int*)arg); return NULL; } int main() { // \u521b\u5efa\u5b50\u7ebf\u7a0b pthread_t tid; int num = 10; int ret = pthread_create(&tid, NULL, myWork, (void*)&num); if (ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } // \u9632\u6b62\u5b50\u7ebf\u7a0b\u6ca1\u6709\u62a2\u5360\u5230CPU\u4e14\u6b64\u65f6\u4e3b\u7ebf\u7a0b\u5df2\u7ecf\u6267\u884c\u5b8c\u5e76\u9000\u51fa sleep(1); return 0; }","title":"\u7ebf\u7a0b\u521b\u5efa"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_12","text":"void pthread_exit(void *retval); \u901a\u8fc7 man 3 pthread_exit \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u7ec8\u6b62\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5728\u54ea\u4e2a\u7ebf\u7a0b\u4e2d\u8c03\u7528\uff0c\u5c31\u8868\u793a\u7ec8\u6b62\u54ea\u4e2a\u7ebf\u7a0b \u53c2\u6570\uff1a retval \uff0c\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u5728 pthread_join() \u4e2d\u83b7\u53d6\u5230 #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void* arg) { printf(\"child thread...\\n\"); printf(\"num = %d\\n\", *(int*)arg); printf(\"child thread id : %ld\\n\", pthread_self()); return NULL; } int main() { // \u521b\u5efa\u5b50\u7ebf\u7a0b pthread_t tid; int num = 10; int ret = pthread_create(&tid, NULL, myWork, (void*)&num); if (ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } printf(\"tid : %ld, main thread id : %ld\\n\", tid ,pthread_self()); for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } // \u8ba9\u4e3b\u7ebf\u7a0b\u9000\u51fa\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u6b63\u5e38\u8fd0\u884c\u7684\u7ebf\u7a0b pthread_exit(NULL); // \u4e0b\u9762\u7a0b\u5e8f\u5df2\u7ecf\u4e0d\u80fd\u88ab\u6267\u884c printf(\"test message\\n\"); return 0; }","title":"\u7ebf\u7a0b\u7ec8\u6b62"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_13","text":"int pthread_join(pthread_t thread, void **retval); \u901a\u8fc7 man 3 pthread_join \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u548c\u4e00\u4e2a\u5df2\u7ecf\u7ec8\u6b62\u7684\u7ebf\u7a0b\u8fdb\u884c\u8fde\u63a5\u3002\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u963b\u585e\u51fd\u6570\uff0c\u8c03\u7528\u4e00\u6b21\u53ea\u80fd\u56de\u6536\u4e00\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u4e00\u822c\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u4f7f\u7528 \u53c2\u6570 thread \uff1a\u9700\u8981\u56de\u6536\u7684\u5b50\u7ebf\u7a0b\u7684ID retval \uff1a\u63a5\u6536\u5b50\u7ebf\u7a0b\u9000\u51fa\u65f6\u7684\u8fd4\u56de\u503c \u8fd4\u56de\u503c \u6210\u529f\uff1a0 \u5931\u8d25\uff1a\u8fd4\u56de\u9519\u8bef\u53f7\u3002\u8fd9\u4e2a\u9519\u8bef\u53f7\u548c\u4e4b\u524d errno \u4e0d\u592a\u4e00\u6837\u3002\u83b7\u53d6\u9519\u8bef\u53f7\u7684\u4fe1\u606f\uff1a char * strerror(int errnum); #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> int val = 10; void* myWork(void* arg) { printf(\"child thread...\\n\"); printf(\"num = %d\\n\", *(int*)arg); printf(\"child thread id : %ld\\n\", pthread_self()); val++; pthread_exit((void*)&val); // \u7b49\u4ef7\u4e8ereturn (void*)&val; } int main() { printf(\"init val : %d\\n\", val); // \u521b\u5efa\u5b50\u7ebf\u7a0b pthread_t tid; int num = 10; int ret = pthread_create(&tid, NULL, myWork, (void*)&num); if (ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } printf(\"tid : %ld, main thread id : %ld\\n\", tid ,pthread_self()); for (int i = 0; i < 5; i++) { printf(\"%d\\n\", i); } // \u4e3b\u7ebf\u7a0b\u8c03\u7528pthread_join()\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90 int * thread_retval; ret = pthread_join(tid, (void **)&thread_retval); if(ret != 0) { char * errstr = strerror(ret); printf(\"error : %s\\n\", errstr); } printf(\"exit data : %d\\n\", *thread_retval); printf(\"\u56de\u6536\u5b50\u7ebf\u7a0b\u8d44\u6e90\u6210\u529f\uff01\\n\"); // \u8ba9\u4e3b\u7ebf\u7a0b\u9000\u51fa\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u65f6\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u6b63\u5e38\u8fd0\u884c\u7684\u7ebf\u7a0b pthread_exit(NULL); // \u4e0b\u9762\u7a0b\u5e8f\u5df2\u7ecf\u4e0d\u80fd\u88ab\u6267\u884c printf(\"test message\\n\"); return 0; }","title":"\u7ebf\u7a0b\u8fde\u63a5"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_14","text":"int pthread_detach(pthread_t thread); \u901a\u8fc7 man 3 pthread_detach \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5206\u79bb\u4e00\u4e2a\u7ebf\u7a0b\u3002\u88ab\u5206\u79bb\u7684\u7ebf\u7a0b\u5728\u7ec8\u6b62\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u8fd4\u56de\u7ed9\u7cfb\u7edf \u4e0d\u80fd\u591a\u6b21\u5206\u79bb\uff0c\u4f1a\u4ea7\u751f\u4e0d\u53ef\u9884\u6599\u7684\u884c\u4e3a \u4e0d\u80fd\u53bb\u8fde\u63a5\u4e00\u4e2a\u5df2\u7ecf\u5206\u79bb\u7684\u7ebf\u7a0b\uff0c\u4f1a\u62a5\u9519 \u53c2\u6570\uff1a\u9700\u8981\u5206\u79bb\u7684\u7ebf\u7a0b\u7684ID \u8fd4\u56de\u503c \u6210\u529f\uff1a0 \u5931\u8d25\uff1a\u8fd4\u56de\u9519\u8bef\u53f7\u3002\u8fd9\u4e2a\u9519\u8bef\u53f7\u548c\u4e4b\u524d errno \u4e0d\u592a\u4e00\u6837\u3002\u83b7\u53d6\u9519\u8bef\u53f7\u7684\u4fe1\u606f\uff1a char * strerror(int errnum); #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void * arg) { printf(\"chid thread id : %ld\\n\", pthread_self()); return NULL; } int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid; int ret = pthread_create(&tid, NULL, myWork, NULL); if(ret != 0) { char * errstr = strerror(ret); printf(\"error1 : %s\\n\", errstr); } // \u8f93\u51fa\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684id printf(\"tid : %ld, main thread id : %ld\\n\", tid, pthread_self()); // \u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u5206\u79bb,\u5b50\u7ebf\u7a0b\u5206\u79bb\u540e\uff0c\u5b50\u7ebf\u7a0b\u7ed3\u675f\u65f6\u5bf9\u5e94\u7684\u8d44\u6e90\u5c31\u4e0d\u9700\u8981\u4e3b\u7ebf\u7a0b\u91ca\u653e ret = pthread_detach(tid); if(ret != 0) { char * errstr = strerror(ret); printf(\"error2 : %s\\n\", errstr); } // \u8bbe\u7f6e\u5206\u79bb\u540e\uff0c\u5bf9\u5206\u79bb\u7684\u5b50\u7ebf\u7a0b\u8fdb\u884c\u8fde\u63a5 pthread_join() // ret = pthread_join(tid, NULL); // if(ret != 0) { // char * errstr = strerror(ret); // printf(\"error3 : %s\\n\", errstr); // } pthread_exit(NULL); return 0; }","title":"\u7ebf\u7a0b\u5206\u79bb"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_15","text":"int pthread_cancel(pthread_t thread); \u901a\u8fc7 man 3 pthread_cancel \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u53d6\u6d88\u7ebf\u7a0b\uff08\u8ba9\u7ebf\u7a0b\u7ec8\u6b62\uff09\u3002\u53d6\u6d88\u67d0\u4e2a\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u7ec8\u6b62\u67d0\u4e2a\u7ebf\u7a0b\u7684\u8fd0\u884c\uff0c \u4f46\u662f\u5e76\u4e0d\u662f\u7acb\u9a6c\u7ec8\u6b62\uff0c\u800c\u662f\u5f53\u5b50\u7ebf\u7a0b\u6267\u884c\u5230\u4e00\u4e2a \u53d6\u6d88\u70b9 \uff0c\u7ebf\u7a0b\u624d\u4f1a\u7ec8\u6b62 \u53d6\u6d88\u70b9 \uff1a\u7cfb\u7edf\u89c4\u5b9a\u597d\u7684\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u7c97\u7565\u7684\u7406\u89e3\u4e3a\u4ece\u7528\u6237\u533a\u5230\u5185\u6838\u533a\u5207\u6362\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7 man pthreads \u67e5\u770b\u53d6\u6d88\u70b9 #include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void * arg) { printf(\"chid thread id : %ld\\n\", pthread_self()); for (int i = 0; i < 20; i++) { printf(\"child: %d\\n\", i); } return NULL; } int main() { // \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid; int ret = pthread_create(&tid, NULL, myWork, NULL); if(ret != 0) { char * errstr = strerror(ret); printf(\"error1 : %s\\n\", errstr); } // \u7ebf\u7a0b\u53d6\u6d88 pthread_cancel(tid); for (int i = 0; i < 20; i++) { printf(\"main: %d\\n\", i); } // \u8f93\u51fa\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684id printf(\"tid : %ld, main thread id : %ld\\n\", tid, pthread_self()); pthread_exit(NULL); return 0; } \u4ee5\u4e0a\u4ee3\u7801\u5728\u4e0d\u540c\u673a\u5668\u53ef\u80fd\u65e0\u6cd5\u89e6\u53d1\u7ebf\u7a0b\u53d6\u6d88\uff0c\u6bcf\u6b21\u6267\u884c\u7ed3\u679c\u4e5f\u4e0d\u4e00\u5b9a\u76f8\u540c=>==\u731c\u6d4b\u7531\u4e8e\u901f\u5ea6\u8fc7\u5feb== \u865a\u62df\u673a \u5b9e\u4f53\u673a","title":"\u7ebf\u7a0b\u53d6\u6d88"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_16","text":"","title":"\u7ebf\u7a0b\u5c5e\u6027"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#api","text":"\u7ebf\u7a0b\u5c5e\u6027\u7c7b\u578b\uff1a pthread_attr_t \u521d\u59cb\u5316\u7ebf\u7a0b\u5c5e\u6027\u53d8\u91cf\uff1a int pthread_attr_init(pthread_attr_t *attr); \u91ca\u653e\u7ebf\u7a0b\u5c5e\u6027\u7684\u8d44\u6e90\uff1a int pthread_attr_destroy(pthread_attr_t *attr); \u83b7\u53d6\u7ebf\u7a0b\u5206\u79bb\u7684\u72b6\u6001\u5c5e\u6027\uff1a int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate); \u8bbe\u7f6e\u7ebf\u7a0b\u5206\u79bb\u7684\u72b6\u6001\u5c5e\u6027\uff1a int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);","title":"\u5e38\u7528API"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_17","text":"\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5c5e\u6027\u53d8\u91cf \u521d\u59cb\u5316\u5c5e\u6027\u53d8\u91cf \u8bbe\u7f6e\u5c5e\u6027 \u91ca\u653e\u7ebf\u7a0b\u5c5e\u6027\u8d44\u6e90","title":"\u8bbe\u7f6e\u6b65\u9aa4"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_18","text":"#include <stdio.h> #include <pthread.h> #include <string.h> #include <unistd.h> void* myWork(void * arg) { printf(\"chid thread id : %ld\\n\", pthread_self()); for (int i = 0; i < 5; i++) { printf(\"child: %d\\n\", i); } return NULL; } int main() { // 1. \u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u5c5e\u6027\u53d8\u91cf pthread_attr_t attr; // 2. \u521d\u59cb\u5316\u5c5e\u6027\u53d8\u91cf pthread_attr_init(&attr); // 3. \u8bbe\u7f6e\u5c5e\u6027-\u7ebf\u7a0b\u5206\u79bb pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED); // \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid; int ret = pthread_create(&tid, NULL, myWork, NULL); if(ret != 0) { char * errstr = strerror(ret); printf(\"error1 : %s\\n\", errstr); } // \u83b7\u53d6\u7ebf\u7a0b\u7684\u6808\u7684\u5927\u5c0f size_t size; pthread_attr_getstacksize(&attr, &size); printf(\"thread stack size : %ld\\n\", size); // \u8f93\u51fa\u4e3b\u7ebf\u7a0b\u548c\u5b50\u7ebf\u7a0b\u7684id printf(\"tid : %ld, main thread id : %ld\\n\", tid, pthread_self()); // 4. \u91ca\u653e\u7ebf\u7a0b\u5c5e\u6027\u8d44\u6e90 pthread_attr_destroy(&attr); pthread_exit(NULL); return 0; }","title":"\u5b9e\u4f8b\uff1a\u901a\u8fc7\u8bbe\u7f6e\u7ebf\u7a0b\u5c5e\u6027\u5b9e\u73b0\u7ebf\u7a0b\u5206\u79bb"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_19","text":"","title":"\u7ebf\u7a0b\u540c\u6b65"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_20","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/03Linux\u591a\u7ebf\u7a0b\u5f00\u53d1/02 \u7ebf\u7a0b\u540c\u6b65","title":"\u8bf4\u660e"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_21","text":"\u4ec0\u4e48\u65f6\u5019\u52a0\u9501\u5408\u9002\uff1f\u4e0d\u540c\u65f6\u673a\u52a0\u9501\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u4e00\u6837\u7684\u7ed3\u679c","title":"==\u7591\u95ee=="},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_22","text":"\u5047\u8bbe\u6211\u6709100\u5f20\u7968\uff0c\u6709\u4e09\u4e2a\u7a97\u53e3\u540c\u65f6\u5728\u552e\u5356\uff0c\u90a3\u4e48 \u5982\u679c ticket \u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7a97\u53e3\u90fd\u662f\u4ece100\u5f00\u59cb\u552e\u5356=>\u6267\u884c test1() \u5982\u679c ticket \u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u90a3\u4e48\u4e0d\u540c\u7a97\u53e3\u53ef\u80fd\u56e0\u4e3a\u62a2\u5360\u8d44\u6e90\u800c\u540c\u65f6\u5f00\u59cb\u552e\u5356\uff0c\u5bfc\u81f4\u51fa\u73b0\u540c\u65f6\u5728\u5356\u540c\u4e00\u5f20\u7968\uff08\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\u7968\uff09=>\u6267\u884c test2() #include <stdio.h> #include <pthread.h> void* selltickets1(void* arg) { int tickets = 10; while (tickets > 0) { printf(\"\u7ebf\u7a0b%ld \u6b63\u5728\u552e\u5356\u7b2c%d\u5f20\u7968\\n\", pthread_self(), tickets); tickets--; } return NULL; } void test1() { // \u521b\u5efa\u4e09\u4e2a\u7ebf\u7a0b pthread_t tid1; pthread_t tid2; pthread_t tid3; pthread_create(&tid1, NULL, selltickets1, NULL); pthread_create(&tid2, NULL, selltickets1, NULL); pthread_create(&tid3, NULL, selltickets1, NULL); // \u7ebf\u7a0b\u8fde\u63a5\uff0c\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); } int total_tickets = 10; void* selltickets2(void* arg) { while (total_tickets > 0) { printf(\"\u7ebf\u7a0b%ld \u6b63\u5728\u552e\u5356\u7b2c%d\u5f20\u7968\\n\", pthread_self(), total_tickets); total_tickets--; } return NULL; } void test2() { // \u521b\u5efa\u4e09\u4e2a\u7ebf\u7a0b pthread_t tid1; pthread_t tid2; pthread_t tid3; pthread_create(&tid1, NULL, selltickets2, NULL); pthread_create(&tid2, NULL, selltickets2, NULL); pthread_create(&tid3, NULL, selltickets2, NULL); // \u7ebf\u7a0b\u8fde\u63a5\uff0c\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); } int main() { test2(); pthread_exit(NULL); // \u9000\u51famain\u8fdb\u7a0b return 0; } \u6267\u884c test1 \u6267\u884c test2","title":"\u51fa\u73b0\u7684\u539f\u56e0"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_23","text":"\u7ebf\u7a0b\u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff0c \u80fd\u591f\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u6765\u5171\u4eab\u4fe1\u606f \u3002\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u4fbf\u6377\u7684\u5171\u4eab\u662f\u6709\u4ee3\u4ef7\u7684\uff1a\u5fc5\u987b\u786e\u4fdd\u591a\u4e2a\u7ebf\u7a0b\u4e0d\u4f1a\u540c\u65f6\u4fee\u6539\u540c\u4e00\u53d8\u91cf\uff0c\u6216\u8005\u67d0\u4e00\u7ebf\u7a0b\u4e0d\u4f1a\u8bfb\u53d6\u6b63\u5728\u7531\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539\u7684\u53d8\u91cf \u4e34\u754c\u533a \u662f\u6307\u8bbf\u95ee\u67d0\u4e00\u5171\u4eab\u8d44\u6e90\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u4e14\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u5e94\u4e3a \u539f\u5b50\u64cd\u4f5c \uff0c\u4e5f\u5c31\u662f\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u5171\u4eab\u8d44\u6e90\u7684\u5176\u4ed6\u7ebf\u7a0b\u4e0d\u5e94\u7ec8\u7aef\u8be5\u7247\u6bb5\u7684\u6267\u884c \u7ebf\u7a0b\u540c\u6b65 \uff1a\u5373 \u5f53\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u5bf9\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5176\u4ed6\u7ebf\u7a0b\u90fd\u4e0d\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f4\u5230\u8be5\u7ebf\u7a0b\u5b8c\u6210\u64cd\u4f5c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u5bf9\u8be5\u5185\u5b58\u5730\u5740\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5176\u4ed6\u7ebf\u7a0b\u5219\u5904\u4e8e\u7b49\u5f85\u72b6\u6001","title":"\u7ebf\u7a0b\u540c\u6b65\u6982\u5ff5"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_24","text":"","title":"\u4e92\u65a5\u91cf/\u4e92\u65a5\u9501"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_25","text":"\u4e3a\u907f\u514d\u7ebf\u7a0b\u66f4\u65b0\u5171\u4eab\u53d8\u91cf\u65f6\u51fa\u73b0\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 \u4e92\u65a5\u91cf\uff08mutex \u662f mutual exclusion\u7684\u7f29\u5199\uff09 \u6765\u786e\u4fdd\u540c\u65f6\u4ec5\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u67d0\u9879\u5171\u4eab\u8d44\u6e90\u3002\u4f7f\u7528 \u4e92\u65a5\u91cf\u80fd\u4fdd\u8bc1\u5bf9\u4efb\u610f\u5171\u4eab\u8d44\u6e90\u7684\u539f\u5b50\u8bbf\u95ee \u4e92\u65a5\u91cf\u6709\u4e24\u79cd\u72b6\u6001\uff1a \u5df2\u9501\u5b9a\uff08locked\uff09 \u548c \u672a\u9501\u5b9a\uff08unlocked\uff09 \u3002\u4efb\u4f55\u65f6\u5019\uff0c \u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u9501\u5b9a\u8be5\u4e92\u65a5\u91cf \u3002\u8bd5\u56fe\u5bf9\u5df2\u7ecf\u9501\u5b9a\u7684\u67d0\u4e00\u4e92\u65a5\u91cf\u518d\u6b21\u52a0\u9501\uff0c\u5c06\u53ef\u80fd\u963b\u585e\u7ebf\u7a0b\u6216\u8005\u62a5\u9519\u5931\u8d25\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u52a0\u9501\u65f6\u4f7f\u7528\u7684\u65b9\u6cd5 \u4e00\u65e6\u7ebf\u7a0b\u9501\u5b9a\u4e92\u65a5\u91cf\uff0c\u968f\u5373\u6210\u4e3a\u8be5\u4e92\u65a5\u91cf\u7684\u6240\u6709\u8005\uff0c \u53ea\u6709\u6240\u6709\u8005\u624d\u80fd\u7ed9\u4e92\u65a5\u91cf\u89e3\u9501 \u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5bf9\u6bcf\u4e00\u5171\u4eab\u8d44\u6e90\uff08\u53ef\u80fd\u7531\u591a\u4e2a\u76f8\u5173\u53d8\u91cf\u7ec4\u6210\uff09\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u4e92\u65a5\u91cf\uff0c\u6bcf\u4e00\u7ebf\u7a0b\u5728\u8bbf\u95ee\u540c\u4e00\u8d44\u6e90\u65f6\u5c06\u91c7\u7528\u5982\u4e0b\u534f\u8bae \u9488\u5bf9\u5171\u4eab\u8d44\u6e90\u9501\u5b9a\u4e92\u65a5\u91cf \u8bbf\u95ee\u5171\u4eab\u8d44\u6e90 \u5bf9\u4e92\u65a5\u91cf\u89e3\u9501 \u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u8bd5\u56fe\u6267\u884c\u8fd9\u4e00\u5757\u4ee3\u7801\uff08\u4e00\u4e2a\u4e34\u754c\u533a\uff09\uff0c\u4e8b\u5b9e\u4e0a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6301\u6709\u8be5\u4e92\u65a5\u91cf\uff08\u5176\u4ed6\u7ebf\u7a0b\u5c06\u906d\u5230\u963b\u585e\uff09\uff0c\u5373\u540c\u65f6\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8fdb\u5165\u8fd9\u6bb5\u4ee3\u7801\u533a\u57df\uff0c\u5982\u4e0b","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_26","text":"\u4e92\u65a5\u91cf\u7684\u7c7b\u578b\uff1a pthread_mutex_t \u521d\u59cb\u5316\u4e92\u65a5\u91cf\uff1a int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr); \u53c2\u6570 mutex \uff1a \u9700\u8981\u521d\u59cb\u5316\u7684\u4e92\u65a5\u91cf\u53d8\u91cf attr \uff1a \u4e92\u65a5\u91cf\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u8bbe\u7f6e\u4e3aNULL\uff0c\u7531\u5185\u6838\u6307\u5b9a restrict : C\u8bed\u8a00\u7684\u4fee\u9970\u7b26\uff0c\u88ab\u4fee\u9970\u7684\u6307\u9488\uff0c\u4e0d\u80fd\u7531\u53e6\u5916\u7684\u4e00\u4e2a\u6307\u9488\u8fdb\u884c\u64cd\u4f5c \u91ca\u653e\u4e92\u65a5\u91cf\u7684\u8d44\u6e90\uff1a int pthread_mutex_destroy(pthread_mutex_t *mutex); \u52a0\u9501\uff1a int pthread_mutex_lock(pthread_mutex_t *mutex); \u5c1d\u8bd5\u52a0\u9501\uff1a int pthread_mutex_trylock(pthread_mutex_t *mutex); \u89e3\u9501\uff1a int pthread_mutex_unlock(pthread_mutex_t *mutex);","title":"\u4e92\u65a5\u91cf\u76f8\u5173\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_27","text":"#include <stdio.h> #include <pthread.h> // \u5168\u5c40\u53d8\u91cf\u521b\u5efa\u4e92\u65a5\u91cf\uff0c\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u90fd\u80fd\u8bbf\u95ee pthread_mutex_t mutex; int total_tickets = 100; void* selltickets(void* arg) { while (1) { // \u52a0\u9501 pthread_mutex_lock(&mutex); if (total_tickets > 0) { // \u8bbf\u95ee\u5171\u4eab\u53d8\u91cf printf(\"\u7ebf\u7a0b%ld \u6b63\u5728\u552e\u5356\u7b2c%d\u5f20\u7968\\n\", pthread_self(), total_tickets); total_tickets--; } else { // \u89e3\u9501 pthread_mutex_unlock(&mutex); break; } // \u89e3\u9501 pthread_mutex_unlock(&mutex); } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex, NULL); // \u521b\u5efa\u4e09\u4e2a\u7ebf\u7a0b pthread_t tid1; pthread_t tid2; pthread_t tid3; pthread_create(&tid1, NULL, selltickets, NULL); pthread_create(&tid2, NULL, selltickets, NULL); pthread_create(&tid3, NULL, selltickets, NULL); // \u7ebf\u7a0b\u8fde\u63a5\uff0c\u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90\uff0c\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); pthread_exit(NULL); // \u9000\u51famain\u8fdb\u7a0b // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex); return 0; }","title":"\u5b9e\u4f8b\uff1a\u4e92\u65a5\u9501\u5b9e\u73b0\u8fdb\u7a0b\u540c\u6b65\u552e\u7968"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_28","text":"","title":"\u6b7b\u9501"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_29","text":"\u4e00\u4e2a\u7ebf\u7a0b\u9700\u8981\u540c\u65f6\u8bbf\u95ee\u4e24\u4e2a\u6216\u66f4\u591a\u4e0d\u540c\u7684\u5171\u4eab\u8d44\u6e90\uff0c\u800c\u6bcf\u4e2a\u8d44\u6e90\u53c8\u90fd\u7531\u4e0d\u540c\u7684\u4e92\u65a5\u91cf\u7ba1\u7406\u3002\u5f53\u8d85\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u52a0\u9501\u540c\u4e00\u7ec4\u4e92\u65a5\u91cf\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u53d1\u751f \u6b7b\u9501 \u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e89\u593a\u5171\u4eab\u8d44\u6e90\u800c\u9020\u6210\u7684\u4e00\u79cd\u4e92\u76f8\u7b49\u5f85\u7684\u73b0\u8c61\uff0c\u82e5\u65e0\u5916\u529b\u4f5c\u7528\uff0c\u5b83\u4eec\u90fd\u5c06\u65e0\u6cd5\u63a8\u8fdb\u4e0b\u53bb\u3002\u6b64\u65f6\u79f0\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u6216\u7cfb\u7edf\u4ea7\u751f\u4e86\u6b7b\u9501","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_30","text":"","title":"\u6b7b\u9501\u7684\u51e0\u79cd\u573a\u666f"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_31","text":"#include <stdio.h> #include <pthread.h> #include <unistd.h> // \u5168\u5c40\u53d8\u91cf\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u5171\u4eab\u8fd9\u4e00\u4efd\u8d44\u6e90\u3002 int tickets = 1000; // \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u91cf pthread_mutex_t mutex; void * sellticket(void * arg) { // \u5356\u7968 while(1) { // \u52a0\u9501 pthread_mutex_lock(&mutex); if(tickets > 0) { usleep(6000); printf(\"%ld \u6b63\u5728\u5356\u7b2c %d \u5f20\u95e8\u7968\\n\", pthread_self(), tickets); tickets--; }else { // \u89e3\u9501 pthread_mutex_unlock(&mutex); break; } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex, NULL); // \u521b\u5efa3\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid1, tid2, tid3; pthread_create(&tid1, NULL, sellticket, NULL); pthread_create(&tid2, NULL, sellticket, NULL); pthread_create(&tid3, NULL, sellticket, NULL); // \u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90,\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); pthread_exit(NULL); // \u9000\u51fa\u4e3b\u7ebf\u7a0b // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex); return 0; }","title":"\u5fd8\u8bb0\u91ca\u653e\u9501"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_32","text":"#include <stdio.h> #include <pthread.h> #include <unistd.h> // \u5168\u5c40\u53d8\u91cf\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u5171\u4eab\u8fd9\u4e00\u4efd\u8d44\u6e90\u3002 int tickets = 1000; // \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u91cf pthread_mutex_t mutex; void * sellticket(void * arg) { // \u5356\u7968 while(1) { // \u52a0\u9501 pthread_mutex_lock(&mutex); pthread_mutex_lock(&mutex); if(tickets > 0) { usleep(6000); printf(\"%ld \u6b63\u5728\u5356\u7b2c %d \u5f20\u95e8\u7968\\n\", pthread_self(), tickets); tickets--; }else { // \u89e3\u9501 pthread_mutex_unlock(&mutex); break; } // \u89e3\u9501 pthread_mutex_unlock(&mutex); pthread_mutex_unlock(&mutex); } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex, NULL); // \u521b\u5efa3\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid1, tid2, tid3; pthread_create(&tid1, NULL, sellticket, NULL); pthread_create(&tid2, NULL, sellticket, NULL); pthread_create(&tid3, NULL, sellticket, NULL); // \u56de\u6536\u5b50\u7ebf\u7a0b\u7684\u8d44\u6e90,\u963b\u585e pthread_join(tid1, NULL); pthread_join(tid2, NULL); pthread_join(tid3, NULL); pthread_exit(NULL); // \u9000\u51fa\u4e3b\u7ebf\u7a0b // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex); return 0; }","title":"\u91cd\u590d\u52a0\u9501"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_33","text":"#include <stdio.h> #include <pthread.h> #include <unistd.h> // \u521b\u5efa2\u4e2a\u4e92\u65a5\u91cf pthread_mutex_t mutex1, mutex2; void * workA(void * arg) { pthread_mutex_lock(&mutex1); sleep(1); pthread_mutex_lock(&mutex2); printf(\"workA....\\n\"); pthread_mutex_unlock(&mutex2); pthread_mutex_unlock(&mutex1); return NULL; } void * workB(void * arg) { pthread_mutex_lock(&mutex2); sleep(1); pthread_mutex_lock(&mutex1); printf(\"workB....\\n\"); pthread_mutex_unlock(&mutex1); pthread_mutex_unlock(&mutex2); return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u91cf pthread_mutex_init(&mutex1, NULL); pthread_mutex_init(&mutex2, NULL); // \u521b\u5efa2\u4e2a\u5b50\u7ebf\u7a0b pthread_t tid1, tid2; pthread_create(&tid1, NULL, workA, NULL); pthread_create(&tid2, NULL, workB, NULL); // \u56de\u6536\u5b50\u7ebf\u7a0b\u8d44\u6e90 pthread_join(tid1, NULL); pthread_join(tid2, NULL); // \u91ca\u653e\u4e92\u65a5\u91cf\u8d44\u6e90 pthread_mutex_destroy(&mutex1); pthread_mutex_destroy(&mutex2); return 0; }","title":"\u591a\u7ebf\u7a0b\u591a\u9501\uff0c\u62a2\u5360\u9501\u8d44\u6e90"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_34","text":"","title":"\u8bfb\u5199\u9501"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_35","text":"\u5f53\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u6301\u6709\u4e92\u65a5\u9501\u65f6\uff0c\u4e92\u65a5\u9501\u5c06\u6240\u6709\u8bd5\u56fe\u8fdb\u5165\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u90fd\u963b\u585e\u4f4f\u3002\u4f46\u662f\u8003\u8651\u4e00\u79cd\u60c5\u5f62\uff0c\u5f53\u524d\u6301\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u53ea\u662f\u8981\u8bfb\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\uff0c\u800c\u540c\u65f6\u6709\u5176\u5b83\u51e0\u4e2a\u7ebf\u7a0b\u4e5f\u60f3\u8bfb\u53d6\u8fd9\u4e2a\u5171\u4eab\u8d44\u6e90\uff0c\u4f46\u662f\u7531\u4e8e\u4e92\u65a5\u9501\u7684\u6392\u5b83\u6027\uff0c\u6240\u6709\u5176\u5b83\u7ebf\u7a0b\u90fd\u65e0\u6cd5\u83b7\u53d6\u9501\uff0c\u4e5f\u5c31\u65e0\u6cd5\u8bfb\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u4e86\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u95ee\u9898 \u5728\u5bf9\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u4e2d\uff0c \u66f4\u591a\u7684\u662f\u8bfb\u64cd\u4f5c\uff0c\u5199\u64cd\u4f5c\u8f83\u5c11 \uff0c\u4f8b\u5982\u5bf9\u6570\u636e\u5e93\u6570\u636e\u7684\u8bfb\u5199\u5e94\u7528\u3002\u4e3a\u4e86\u6ee1\u8db3\u5f53\u524d\u80fd\u591f\u5141\u8bb8\u591a\u4e2a\u8bfb\u51fa\uff0c\u4f46\u53ea\u5141\u8bb8\u4e00\u4e2a\u5199\u5165\u7684\u9700\u6c42\uff0c\u7ebf\u7a0b\u63d0\u4f9b\u4e86\u8bfb\u5199\u9501\u6765\u5b9e\u73b0 \u8bfb\u5199\u9501\u7684\u7279\u70b9 \u5982\u679c\u6709\u5176\u5b83\u7ebf\u7a0b\u8bfb\u6570\u636e\uff0c\u5219\u5141\u8bb8\u5176\u5b83\u7ebf\u7a0b\u6267\u884c\u8bfb\u64cd\u4f5c\uff0c\u4f46\u4e0d\u5141\u8bb8\u5199\u64cd\u4f5c \u5982\u679c\u6709\u5176\u5b83\u7ebf\u7a0b\u5199\u6570\u636e\uff0c\u5219\u5176\u5b83\u7ebf\u7a0b\u90fd\u4e0d\u5141\u8bb8\u8bfb\u3001\u5199\u64cd\u4f5c \u5199\u662f\u72ec\u5360\u7684\uff0c\u5199\u7684\u4f18\u5148\u7ea7\u9ad8","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_36","text":"\u8bfb\u5199\u9501\u7684\u7c7b\u578b\uff1a pthread_rwlock_t \u521d\u59cb\u5316\u8bfb\u5199\u9501\uff1a int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr); \u91ca\u653e\u4e92\u65a5\u91cf\u7684\u8d44\u6e90\uff1a int pthread_rwlock_destroy(pthread_rwlock_t *rwlock); \u8bfb\u64cd\u4f5c\u52a0\u9501\uff1a int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock); \u8bfb\u64cd\u4f5c\u5c1d\u8bd5\u52a0\u9501\uff1a int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock); \u5199\u64cd\u4f5c\u52a0\u9501\uff1a int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock); \u5199\u64cd\u4f5c\u5c1d\u8bd5\u52a0\u9501\uff1a int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock); \u89e3\u9501\uff1a int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);","title":"\u8bfb\u5199\u9501\u76f8\u5173\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_37","text":"8\u4e2a\u7ebf\u7a0b\u64cd\u4f5c\u540c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u30023\u4e2a\u7ebf\u7a0b\u4e0d\u5b9a\u65f6\u5199\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c5\u4e2a\u7ebf\u7a0b\u4e0d\u5b9a\u65f6\u7684\u8bfb\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf #include <stdio.h> #include <pthread.h> #include <unistd.h> int num = 0; // \u521b\u5efa\u8bfb\u5199\u9501 pthread_rwlock_t rwlock; void* workA(void* arg) { while (1) { // \u52a0\u5199\u9501 pthread_rwlock_wrlock(&rwlock); num++; printf(\"++write, tid : %ld, num : %d\\n\", pthread_self(), num); // \u89e3\u9501 pthread_rwlock_unlock(&rwlock); usleep(100); } return NULL; } void* workB(void* arg) { while (1) { // \u52a0\u8bfb\u9501 pthread_rwlock_rdlock(&rwlock); printf(\"===read, tid : %ld, num : %d\\n\", pthread_self(), num); // \u89e3\u9501 pthread_rwlock_unlock(&rwlock); usleep(100); } return NULL; } int main() { // \u521d\u59cb\u5316\u8bfb\u5199\u9501 pthread_rwlock_init(&rwlock, NULL); // \u521b\u5efa8\u4e2a\u7ebf\u7a0b\uff0c3\u4e2a\u5199\u7ebf\u7a0b\uff0c5\u4e2a\u8bfb\u7ebf\u7a0b pthread_t wtids[3], rtids[5]; for (int i = 0; i < 3; i++) { pthread_create(&wtids[i], NULL, workA, NULL); } for (int i = 0; i < 5; i++) { pthread_create(&rtids[i], NULL, workB, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u8d44\u6e90 for (int i = 0; i < 3; i++) { pthread_detach(wtids[i]); } for (int i = 0; i < 5; i++) { pthread_detach(rtids[i]); } // \u56de\u6536\u8bfb\u5199\u9501 pthread_rwlock_destroy(&rwlock); // \u56de\u6536\u4e3b\u7ebf\u7a0b pthread_exit(NULL); }","title":"\u5b9e\u4f8b\uff1a\u8bfb\u5199\u9501\u5b9e\u73b0\u8bfb\u7ebf\u7a0b\u6570\u91cf\u5927\u4e8e\u5199\u7ebf\u7a0b\u6570\u91cf"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_38","text":"","title":"\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_39","text":"","title":"\u5173\u7cfb\u6a21\u578b"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_40","text":"\u5f53\u5bb9\u5668\u6ee1\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u751f\u4ea7 \u5f53\u5bb9\u5668\u7a7a\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u6d88\u8d39 \u591a\u4e2a\u751f\u4ea7\u8005\u6216\u6d88\u8d39\u8005\u65f6\uff0c\u4f1a\u51fa\u73b0\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898","title":"\u5b58\u5728\u95ee\u9898"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_41","text":"\u8bf4\u660e \u5f53\u5728\u5220\u9664\u8282\u70b9\u65f6\uff0c\u52a0\u9501\u65f6\u673a\u4e0d\u540c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6bb5\u9519\u8bef \u4ea7\u751f\u9519\u8bef\u7248\u5728\u865a\u62df\u673a\u4e0b\u65e0\u6cd5\u4ea7\u751f core \u6587\u4ef6\uff0c\u4ee5\u4e0b\u622a\u56fe\u6765\u81ea\u670d\u52a1\u5668\uff0c\u662f\u5426\u4f7f\u7528 -g \u53c2\u6570\u90fd\u80fd\u751f\u6210 core \u6587\u4ef6\uff0c==\u53ef\u80fd\u662f\u7ebf\u7a0b\u51fd\u6570\u81ea\u5e26\u80fd\u591f\u751f\u6210\uff1f== \u865a\u62df\u673a\u7248\u5728 \u91ca\u653e\u4e92\u65a5\u9501\u524d\u6dfb\u52a0while\u6b7b\u5faa\u73af \u5373\u53ef\u6b63\u5e38\u751f\u6210 core \u6587\u4ef6\uff0c\u6240\u4ee5\u4e0d\u4ea7\u751f core \u6587\u4ef6\u7684\u539f\u56e0\u53ef\u80fd\u662f==\u7ebf\u7a0b\u8fd8\u5728\u8fd0\u884c\u800c\u4e92\u65a5\u9501\u63d0\u524d\u88ab\u91ca\u653e\u4e86== \u6b63\u5e38\u6267\u884c\u7248 ```c #include #include #include #include // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void producter(void arg) { while (1) { pthread_mutex_lock(&mutex); struct Node newNode = (struct Node )malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); pthread_mutex_unlock(&mutex); usleep(100); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void consumer(void arg) { while (1) { pthread_mutex_lock(&mutex); struct Node* tmp = head; // \u5f53\u94fe\u8868\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u624d\u80fd\u5220\u9664 if (head != NULL) { head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); pthread_mutex_unlock(&mutex); usleep(100); } else { pthread_mutex_unlock(&mutex); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; } ``` \u4ea7\u751f\u9519\u8bef\u7248\uff08==\u539f\u56e0\u8fd8\u4e0d\u6e05\u6670\uff0c\u540e\u7eed\u518d\u770b==\uff09 ```c #include #include #include #include // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void producter(void arg) { while (1) { pthread_mutex_lock(&mutex); struct Node newNode = (struct Node )malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); pthread_mutex_unlock(&mutex); usleep(100); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void consumer(void arg) { while (1) { // \u5982\u679c\u53ea\u5728\u5934\u7ed3\u70b9\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e92\u65a5\u9501\u4f1a\u4ea7\u751f\u6bb5\u9519\u8bef\uff0c\u6682\u672a\u627e\u5230\u539f\u56e0 if (head != NULL) { pthread_mutex_lock(&mutex); struct Node* tmp = head; head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); tmp = NULL; pthread_mutex_unlock(&mutex); usleep(100); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } // \u52a0while\u5faa\u73af\u5373\u53ef\u5728\u865a\u62df\u673a\u4e2d\u751f\u6210core\u6587\u4ef6 // while (1) { // sleep(10); // } // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; } ``` \u670d\u52a1\u5668 \u865a\u62df\u673a","title":"\u5b9e\u4f8b\uff1a\u7b80\u6613\u7248\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005\uff08\u4e92\u65a5\u91cf\uff0c==\u5b58\u5728\u672a\u89e3\u51b3\u95ee\u9898==\uff09"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_42","text":"","title":"\u6761\u4ef6\u53d8\u91cf"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_43","text":"\u5f53\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u624d\u6267\u884c\uff0c\u4e0d\u662f\u9501\uff0c\u914d\u5408\u4e92\u65a5\u91cf\u4f7f\u7528 \u6761\u4ef6\u53d8\u91cf\u7684\u7c7b\u578b\uff1a pthread_cond_t \u521d\u59cb\u5316\uff1a int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr); \u56de\u6536\uff1a int pthread_cond_destroy(pthread_cond_t *cond); \u7b49\u5f85\uff0c\u8c03\u7528\u4e86\u8be5\u51fd\u6570\uff0c\u7ebf\u7a0b\u4f1a\u963b\u585e\uff1a int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex); \u7b49\u5f85\u591a\u957f\u65f6\u95f4\uff0c\u8c03\u7528\u4e86\u8fd9\u4e2a\u51fd\u6570\uff0c\u7ebf\u7a0b\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u6307\u5b9a\u7684\u65f6\u95f4\u7ed3\u675f\uff1a int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime); \u5524\u9192\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\uff1a int pthread_cond_signal(pthread_cond_t *cond); \u5524\u9192\u6240\u6709\u7684\u7b49\u5f85\u7684\u7ebf\u7a0b\uff1a int pthread_cond_broadcast(pthread_cond_t *cond);","title":"\u6761\u4ef6\u53d8\u91cf\u76f8\u5173\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_44","text":"\u5f53\u6709\u751f\u4ea7\u8005\u751f\u4ea7\u65f6\uff0c\u901a\u77e5\u6d88\u8d39\u8005\u6d88\u8d39\uff0c\u5426\u5219\u7b49\u5f85 #include <stdio.h> #include <pthread.h> #include <stdlib.h> #include <unistd.h> // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u6761\u4ef6\u53d8\u91cf pthread_cond_t cond; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void* producter(void* arg) { while (1) { pthread_mutex_lock(&mutex); struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); // \u53ea\u8981\u751f\u4ea7\u4e86\u4e00\u4e2a\uff0c\u5c31\u901a\u77e5\u6d88\u8d39\u8005\u6d88\u8d39 pthread_cond_signal(&cond); pthread_mutex_unlock(&mutex); usleep(100); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void* consumer(void* arg) { while (1) { pthread_mutex_lock(&mutex); struct Node* tmp = head; // \u5f53\u94fe\u8868\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u624d\u80fd\u5220\u9664 if (head != NULL) { head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); pthread_mutex_unlock(&mutex); usleep(100); } else { // \u6ca1\u6709\u6570\u636e\uff0c\u9700\u8981\u7b49\u5f85 // \u5f53\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u963b\u585e\u7684\u65f6\u5019\uff0c\u4f1a\u5bf9\u4e92\u65a5\u9501\u8fdb\u884c\u89e3\u9501\uff0c\u5f53\u4e0d\u963b\u585e\u7684\uff0c\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\uff0c\u4f1a\u91cd\u65b0\u52a0\u9501\u3002 pthread_cond_wait(&cond, &mutex); pthread_mutex_unlock(&mutex); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf pthread_cond_init(&cond, NULL); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } while (1) { sleep(10); } // \u56de\u6536\u6761\u4ef6\u53d8\u91cf pthread_cond_destroy(&cond); // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; }","title":"\u5b9e\u4f8b\uff1a\u6761\u4ef6\u53d8\u91cf\u4e0b\u7684\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_45","text":"","title":"\u4fe1\u53f7\u91cf"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_46","text":"\u4fe1\u53f7\u91cf\u7684\u7c7b\u578b\uff1a sem_t int sem_init(sem_t *sem, int pshared, unsigned int value); \u529f\u80fd\uff1a\u521d\u59cb\u5316\u4fe1\u53f7\u91cf \u53c2\u6570 sem \uff1a\u4fe1\u53f7\u91cf\u53d8\u91cf\u7684\u5730\u5740 pshared \uff1a0 \u7528\u5728\u7ebf\u7a0b\u95f4 \uff0c\u975e0 \u7528\u5728\u8fdb\u7a0b\u95f4 value \uff1a\u4fe1\u53f7\u91cf\u4e2d\u7684\u503c\uff0c\u4ee3\u8868\u5bb9\u5668\u5927\u5c0f int sem_destroy(sem_t *sem); \u529f\u80fd\uff1a\u91ca\u653e\u8d44\u6e90 int sem_wait(sem_t *sem); \u529f\u80fd\uff1a\u5bf9\u4fe1\u53f7\u91cf\u52a0\u9501\uff0c\u8c03\u7528\u4e00\u6b21\u5bf9\u4fe1\u53f7\u91cf\u7684\u503c-1\uff0c\u5982\u679c\u503c\u4e3a0\uff0c\u5c31\u963b\u585e int sem_trywait(sem_t *sem); int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout); int sem_post(sem_t *sem); \u529f\u80fd\uff1a\u5bf9\u4fe1\u53f7\u91cf\u89e3\u9501\uff0c\u8c03\u7528\u4e00\u6b21\u5bf9\u4fe1\u53f7\u91cf\u7684\u503c+1 int sem_getvalue(sem_t *sem, int *sval);","title":"\u4fe1\u53f7\u91cf\u76f8\u5173\u64cd\u4f5c\u51fd\u6570"},{"location":"Linux504/03Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%8F%91/#_47","text":"\u4e0d\u9700\u8981\u5355\u72ec\u5224\u65ad \u5bb9\u5668 \u4e3a\u7a7a\u7684\u60c5\u51b5 #include <stdio.h> #include <pthread.h> #include <stdlib.h> #include <unistd.h> #include <semaphore.h> // \u94fe\u8868\u4f5c\u4e3a\u5bb9\u5668 struct Node{ int val; struct Node* next; }; // \u5934\u7ed3\u70b9 struct Node* head = NULL; // \u4e92\u65a5\u91cf pthread_mutex_t mutex; // \u4fe1\u53f7\u91cf sem_t psem; sem_t csem; // \u5934\u63d2\u6cd5\u589e\u52a0\u5143\u7d20 void* producter(void* arg) { while (1) { sem_wait(&psem); pthread_mutex_lock(&mutex); struct Node* newNode = (struct Node*)malloc(sizeof(struct Node)); newNode->val = rand() % 1000; newNode->next = head; head = newNode; printf(\"add node, num : %d, tid : %ld\\n\", newNode->val, pthread_self()); pthread_mutex_unlock(&mutex); sem_post(&csem); } return NULL; } // \u5934\u5220\u6cd5\u51cf\u5c11\u5143\u7d20 void* consumer(void* arg) { while (1) { sem_wait(&csem); pthread_mutex_lock(&mutex); struct Node* tmp = head; // \u5f53\u94fe\u8868\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u624d\u80fd\u5220\u9664 if (head != NULL) { head = head->next; printf(\"del node, num : %d, tid : %ld\\n\", tmp->val, pthread_self()); free(tmp); pthread_mutex_unlock(&mutex); sem_post(&psem); } } return NULL; } int main() { // \u521d\u59cb\u5316\u4e92\u65a5\u9501 pthread_mutex_init(&mutex, NULL); // \u521d\u59cb\u5316\u4fe1\u53f7\u91cf // \u6700\u591a\u751f\u4ea78\u4e2a sem_init(&psem, 0, 8); // \u521d\u59cb\u6ca1\u6709\u4e1c\u897f\u53ef\u4ee5\u6d88\u8d39 sem_init(&csem, 0, 0); // \u521b\u5efa5\u4e2a\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u548c5\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b pthread_t products[5], consumes[5]; for (int i = 0; i < 5; i++) { pthread_create(&products[i], NULL, producter, NULL); pthread_create(&consumes[i], NULL, consumer, NULL); } // \u5206\u79bb\uff0c\u56de\u6536\u7ebf\u7a0b\u8d44\u6e90 for (int i = 0; i < 5; i++) { pthread_detach(products[i]); pthread_detach(consumes[i]); } while (1) { sleep(10); } // \u56de\u6536\u4fe1\u53f7\u91cf sem_destroy(&csem); sem_destroy(&psem); // \u56de\u6536\u4e92\u65a5\u9501 pthread_mutex_destroy(&mutex); pthread_exit(NULL); // \u56de\u6536\u4e3b\u7ebf\u7a0b return 0; }","title":"\u5b9e\u4f8b\uff1a\u4fe1\u53f7\u91cf\u4e0b\u7684\u591a\u751f\u4ea7\u8005\u591a\u6d88\u8d39\u8005"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","text":"\u7f51\u7edc\u57fa\u7840 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/01 \u7f51\u7edc\u57fa\u7840 \u7f51\u7edc\u7ed3\u6784\u6a21\u5f0f C/S\u7ed3\u6784 \u7b80\u4ecb \u670d\u52a1\u5668 - \u5ba2\u6237\u673a\uff0c\u5373 Client - Server\uff08C/S\uff09 \u7ed3\u6784\u3002C/S \u7ed3\u6784\u901a\u5e38\u91c7\u53d6\u4e24\u5c42\u7ed3\u6784\u3002\u670d\u52a1\u5668\u8d1f\u8d23\u6570\u636e\u7684\u7ba1\u7406\uff0c\u5ba2\u6237\u673a\u8d1f\u8d23\u5b8c\u6210\u4e0e\u7528\u6237\u7684\u4ea4\u4e92\u4efb\u52a1\u3002\u5ba2\u6237\u673a\u662f\u56e0\u7279\u7f51\u4e0a\u8bbf\u95ee\u522b\u4eba\u4fe1\u606f\u7684\u673a\u5668\uff0c\u670d\u52a1\u5668\u5219\u662f\u63d0\u4f9b\u4fe1\u606f\u4f9b\u4eba\u8bbf\u95ee\u7684\u8ba1\u7b97\u673a\u3002 \u5ba2\u6237\u673a\u901a\u8fc7\u5c40\u57df\u7f51\u4e0e\u670d\u52a1\u5668\u76f8\u8fde\uff0c\u63a5\u53d7\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u5e76\u901a\u8fc7\u7f51\u7edc\u5411\u670d\u52a1\u5668\u63d0\u51fa\u8bf7\u6c42\uff0c\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u3002\u670d\u52a1\u5668\u63a5\u53d7\u5ba2\u6237\u673a\u7684\u8bf7\u6c42\uff0c\u5c06\u6570\u636e\u63d0\u4ea4\u7ed9\u5ba2\u6237\u673a\uff0c\u5ba2\u6237\u673a\u5c06\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5e76\u5c06\u7ed3\u679c\u5448\u73b0\u7ed9\u7528\u6237\u3002\u670d\u52a1\u5668\u8fd8\u8981\u63d0\u4f9b\u5b8c\u5584\u5b89\u5168\u4fdd\u62a4\u53ca\u5bf9\u6570\u636e\u5b8c\u6574\u6027\u7684\u5904\u7406\u7b49\u64cd\u4f5c\uff0c\u5e76\u5141\u8bb8\u591a\u4e2a\u5ba2\u6237\u673a\u540c\u65f6\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u8fd9\u5c31\u5bf9\u670d\u52a1\u5668\u7684\u786c\u4ef6\u5904\u7406\u6570\u636e\u80fd\u529b\u63d0\u51fa\u4e86\u5f88\u9ad8\u7684\u8981\u6c42\u3002 \u5728C/S\u7ed3\u6784\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u670d\u52a1\u5668\u90e8\u5206\u548c\u5ba2\u6237\u673a\u90e8\u5206\u3002\u670d\u52a1\u5668\u90e8\u5206\u662f\u591a\u4e2a\u7528\u6237\u5171\u4eab\u7684\u4fe1\u606f\u4e0e\u529f\u80fd\uff0c\u6267\u884c\u540e\u53f0\u670d\u52a1\uff0c\u5982\u63a7\u5236\u5171\u4eab\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u7b49\uff1b\u5ba2\u6237\u673a\u90e8\u5206\u4e3a\u7528\u6237\u6240\u4e13\u6709\uff0c\u8d1f\u8d23\u6267\u884c\u524d\u53f0\u529f\u80fd\uff0c\u5728\u51fa\u9519\u63d0\u793a\u3001\u5728\u7ebf\u5e2e\u52a9\u7b49\u65b9\u9762\u90fd\u6709\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5b50\u7a0b\u5e8f\u95f4\u81ea\u7531\u5207\u6362\u3002 \u4f18\u70b9 \u80fd\u5145\u5206\u53d1\u6325\u5ba2\u6237\u7aef PC \u7684\u5904\u7406\u80fd\u529b\uff0c\u5f88\u591a\u5de5\u4f5c\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u5904\u7406\u540e\u518d\u63d0\u4ea4\u7ed9\u670d\u52a1\u5668\uff0c\u6240\u4ee5 C/S \u7ed3\u6784\u5ba2\u6237\u7aef\u54cd\u5e94\u901f\u5ea6\u5feb \u64cd\u4f5c\u754c\u9762\u6f02\u4eae\u3001\u5f62\u5f0f\u591a\u6837\uff0c\u53ef\u4ee5\u5145\u5206\u6ee1\u8db3\u5ba2\u6237\u81ea\u8eab\u7684\u4e2a\u6027\u5316\u8981\u6c42 C/S \u7ed3\u6784\u7684\u7ba1\u7406\u4fe1\u606f\u7cfb\u7edf\u5177\u6709\u8f83\u5f3a\u7684\u4e8b\u52a1\u5904\u7406\u80fd\u529b\uff0c\u80fd\u5b9e\u73b0\u590d\u6742\u7684\u4e1a\u52a1\u6d41\u7a0b \u5b89\u5168\u6027\u8f83\u9ad8\uff0cC/S \u4e00\u822c\u9762\u5411\u76f8\u5bf9\u56fa\u5b9a\u7684\u7528\u6237\u7fa4\uff0c\u7a0b\u5e8f\u66f4\u52a0\u6ce8\u91cd\u6d41\u7a0b\uff0c\u5b83\u53ef\u4ee5\u5bf9\u6743\u9650\u8fdb\u884c\u591a\u5c42\u6b21\u6821\u9a8c\uff0c\u63d0\u4f9b\u4e86\u66f4\u5b89\u5168\u7684\u5b58\u53d6\u6a21\u5f0f\uff0c\u5bf9\u4fe1\u606f\u5b89\u5168\u7684\u63a7\u5236\u80fd\u529b\u5f88\u5f3a\uff0c\u4e00\u822c\u9ad8\u5ea6\u673a\u5bc6\u7684\u4fe1\u606f\u7cfb\u7edf\u91c7\u7528 C/S \u7ed3\u6784\u9002\u5b9c \u7f3a\u70b9 \u5ba2\u6237\u7aef\u9700\u8981\u5b89\u88c5\u4e13\u7528\u7684\u5ba2\u6237\u7aef\u8f6f\u4ef6\u3002\u9996\u5148\u6d89\u53ca\u5230\u5b89\u88c5\u7684\u5de5\u4f5c\u91cf\uff0c\u5176\u6b21\u4efb\u4f55\u4e00\u53f0\u7535\u8111\u51fa\u95ee\u9898\uff0c\u5982\u75c5\u6bd2\u3001\u786c\u4ef6\u635f\u574f\uff0c\u90fd\u9700\u8981\u8fdb\u884c\u5b89\u88c5\u6216\u7ef4\u62a4\u3002\u7cfb\u7edf\u8f6f\u4ef6\u5347\u7ea7\u65f6\uff0c\u6bcf\u4e00\u53f0\u5ba2\u6237\u673a\u9700\u8981\u91cd\u65b0\u5b89\u88c5\uff0c\u5176\u7ef4\u62a4\u548c\u5347\u7ea7\u6210\u672c\u975e\u5e38\u9ad8 \u5bf9\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e00\u822c\u4e5f\u4f1a\u6709\u9650\u5236\uff0c\u4e0d\u80fd\u591f\u8de8\u5e73\u53f0 B/S\u7ed3\u6784 \u7b80\u4ecb B/S \u7ed3\u6784\uff08Browser/Server\uff0c\u6d4f\u89c8\u5668/\u670d\u52a1\u5668\u6a21\u5f0f\uff09 \uff0c\u662f WEB \u5174\u8d77\u540e\u7684\u4e00\u79cd\u7f51\u7edc\u7ed3\u6784\u6a21\u5f0f\uff0cWEB\u6d4f\u89c8\u5668\u662f\u5ba2\u6237\u7aef\u6700\u4e3b\u8981\u7684\u5e94\u7528\u8f6f\u4ef6\u3002\u8fd9\u79cd\u6a21\u5f0f\u7edf\u4e00\u4e86\u5ba2\u6237\u7aef\uff0c\u5c06\u7cfb\u7edf\u529f\u80fd\u5b9e\u73b0\u7684\u6838\u5fc3\u90e8\u5206\u96c6\u4e2d\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u7b80\u5316\u4e86\u7cfb\u7edf\u7684\u5f00\u53d1\u3001\u7ef4\u62a4\u548c\u4f7f\u7528\u3002 \u5ba2\u6237\u673a\u4e0a\u53ea\u8981\u5b89\u88c5\u4e00\u4e2a\u6d4f\u89c8\u5668\uff0c\u5982 Firefox \u6216 InternetExplorer\uff0c\u670d\u52a1\u5668\u5b89\u88c5 SQL Server\u3001Oracle\u3001MySQL \u7b49\u6570\u636e\u5e93\u3002\u6d4f\u89c8\u5668\u901a\u8fc7 Web Server \u540c\u6570\u636e\u5e93\u8fdb\u884c\u6570\u636e\u4ea4\u4e92 \u4f18\u70b9 B/S \u67b6\u6784\u6700\u5927\u7684\u4f18\u70b9\u662f\u603b\u4f53\u62e5\u6709\u6210\u672c\u4f4e\u3001\u7ef4\u62a4\u65b9\u4fbf\u3001 \u5206\u5e03\u6027\u5f3a\u3001\u5f00\u53d1\u7b80\u5355\uff0c\u53ef\u4ee5\u4e0d\u7528\u5b89\u88c5\u4efb\u4f55\u4e13\u95e8\u7684\u8f6f\u4ef6\u5c31\u80fd\u5b9e\u73b0\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u5ba2\u6237\u7aef\u96f6\u7ef4\u62a4\uff0c\u7cfb\u7edf\u7684\u6269\u5c55\u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u8981\u6709\u4e00\u53f0\u80fd\u4e0a\u7f51\u7684\u7535\u8111\u5c31\u80fd\u4f7f\u7528 \u7f3a\u70b9 \u901a\u4fe1\u5f00\u9500\u5927\u3001\u7cfb\u7edf\u548c\u6570\u636e\u7684\u5b89\u5168\u6027\u8f83\u96be\u4fdd\u969c \u4e2a\u6027\u7279\u70b9\u660e\u663e\u964d\u4f4e\uff0c\u65e0\u6cd5\u5b9e\u73b0\u5177\u6709\u4e2a\u6027\u5316\u7684\u529f\u80fd\u8981\u6c42 \u534f\u8bae\u4e00\u822c\u662f\u56fa\u5b9a\u7684\uff1ahttp/https \u5ba2\u6237\u7aef\u670d\u52a1\u5668\u7aef\u7684\u4ea4\u4e92\u662f\u8bf7\u6c42-\u54cd\u5e94\u6a21\u5f0f\uff0c\u901a\u5e38\u52a8\u6001\u5237\u65b0\u9875\u9762\uff0c\u54cd\u5e94\u901f\u5ea6\u660e\u663e\u964d\u4f4e MAC\u5730\u5740 \u7f51\u5361 \u7f51\u5361 \u662f\u4e00\u5757\u88ab\u8bbe\u8ba1\u7528\u6765\u5141\u8bb8\u8ba1\u7b97\u673a\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u8fdb\u884c\u901a\u8baf\u7684\u8ba1\u7b97\u673a\u786c\u4ef6\uff0c\u53c8\u79f0\u4e3a \u7f51\u7edc\u9002\u914d\u5668 \u6216 \u7f51\u7edc\u63a5\u53e3\u5361NIC \u3002\u5176\u62e5\u6709 MAC \u5730\u5740\uff0c\u5c5e\u4e8e OSI \u6a21\u578b\u7684\u7b2c 2 \u5c42\uff0c\u5b83\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7535\u7f06\u6216\u65e0\u7ebf\u76f8\u4e92\u8fde\u63a5\u3002 \u6bcf\u4e00\u4e2a\u7f51\u5361\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a MAC \u5730\u5740\u7684\u72ec\u4e00\u65e0\u4e8c\u7684 48 \u4f4d\u4e32\u884c\u53f7 \u7f51\u5361\u7684\u4e3b\u8981\u529f\u80fd\uff1a1.\u6570\u636e\u7684\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5\u30012.\u94fe\u8def\u7ba1\u7406\u30013.\u6570\u636e\u7f16\u7801\u4e0e\u8bd1\u7801 MAC\u5730\u5740 MAC \u5730\u5740\uff08Media Access Control Address\uff09 \uff0c\u76f4\u8bd1\u4e3a\u5a92\u4f53\u5b58\u53d6\u63a7\u5236\u4f4d\u5740\uff0c\u4e5f\u79f0\u4e3a\u5c40\u57df\u7f51\u5730\u5740\u3001\u4ee5\u592a\u7f51\u5730\u5740\u3001\u7269\u7406\u5730\u5740\u6216\u786c\u4ef6\u5730\u5740\uff0c\u5b83\u662f\u4e00\u4e2a\u7528\u6765\u786e\u8ba4\u7f51\u7edc\u8bbe\u5907\u4f4d\u7f6e\u7684\u4f4d\u5740\uff0c\u7531\u7f51\u7edc\u8bbe\u5907\u5236\u9020\u5546\u751f\u4ea7\u65f6\u70e7\u5f55\u5728\u7f51\u5361\u4e2d \u5728 OSI \u6a21\u578b\u4e2d\uff0c \u7b2c\u4e09\u5c42\u7f51\u7edc\u5c42\u8d1f\u8d23 IP \u5730\u5740 \uff0c \u7b2c\u4e8c\u5c42\u6570\u636e\u94fe\u8def\u5c42\u5219\u8d1f\u8d23 MAC\u4f4d\u5740 MAC \u5730\u5740\u7528\u4e8e\u5728\u7f51\u7edc\u4e2d\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u7f51\u5361\uff0c\u4e00\u53f0\u8bbe\u5907\u82e5\u6709\u4e00\u6216\u591a\u4e2a\u7f51\u5361\uff0c\u5219\u6bcf\u4e2a\u7f51\u5361\u90fd\u9700\u8981\u5e76\u4f1a\u6709\u4e00\u4e2a\u552f\u4e00\u7684 MAC \u5730\u5740 IP\u5730\u5740 \u7b80\u4ecb IP \u534f\u8bae \u662f\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u76f8\u4e92\u8fde\u63a5\u8fdb\u884c\u901a\u4fe1\u800c\u8bbe\u8ba1\u7684\u534f\u8bae\u3002\u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u5b83\u662f \u80fd\u4f7f\u8fde\u63a5\u5230\u7f51\u4e0a\u7684\u6240\u6709\u8ba1\u7b97\u673a\u7f51\u7edc\u5b9e\u73b0\u76f8\u4e92\u901a\u4fe1\u7684\u4e00\u5957\u89c4\u5219\uff0c\u89c4\u5b9a\u4e86\u8ba1\u7b97\u673a\u5728\u56e0\u7279\u7f51\u4e0a\u8fdb\u884c\u901a\u4fe1\u65f6\u5e94\u5f53\u9075\u5b88\u7684\u89c4\u5219 \u3002\u4efb\u4f55\u5382\u5bb6\u751f\u4ea7\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u53ea\u8981\u9075\u5b88 IP \u534f\u8bae \u5c31\u53ef\u4ee5\u4e0e\u56e0\u7279\u7f51\u4e92\u8fde\u4e92\u901a\u3002\u5404\u4e2a\u5382\u5bb6\u751f\u4ea7\u7684\u7f51\u7edc\u7cfb\u7edf\u548c\u8bbe\u5907\uff0c\u5982\u4ee5\u592a\u7f51\u3001\u5206\u7ec4\u4ea4\u6362\u7f51\u7b49\uff0c\u5b83\u4eec\u76f8\u4e92\u4e4b\u95f4\u4e0d\u80fd\u4e92\u901a\uff0c \u4e0d\u80fd\u4e92\u901a\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\u5b83\u4eec\u6240\u4f20\u9001\u6570\u636e\u7684\u57fa\u672c\u5355\u5143\uff08\u6280\u672f\u4e0a\u79f0\u4e4b\u4e3a\u201c\u5e27\u201d\uff09\u7684\u683c\u5f0f\u4e0d\u540c IP \u534f\u8bae \u5b9e\u9645\u4e0a\u662f\u4e00\u5957\u7531\u8f6f\u4ef6\u7a0b\u5e8f\u7ec4\u6210\u7684\u534f\u8bae\u8f6f\u4ef6\uff0c\u5b83\u628a\u5404\u79cd\u4e0d\u540c\u201c\u5e27\u201d\u7edf\u4e00\u8f6c\u6362\u6210 IP \u6570\u636e\u62a5 \u683c\u5f0f\uff0c\u8fd9\u79cd\u8f6c\u6362\u662f\u56e0\u7279\u7f51\u7684\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u7279\u70b9\uff0c\u4f7f\u6240\u6709\u5404\u79cd\u8ba1\u7b97\u673a\u90fd\u80fd\u5728\u56e0\u7279\u7f51\u4e0a\u5b9e\u73b0\u4e92\u901a\uff0c\u5373\u5177\u6709\u201c\u5f00\u653e\u6027\u201d\u7684\u7279\u70b9\u3002\u6b63\u662f\u56e0\u4e3a\u6709\u4e86 IP \u534f\u8bae\uff0c\u56e0\u7279\u7f51\u624d\u5f97\u4ee5\u8fc5\u901f\u53d1\u5c55\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u7684\u3001\u5f00\u653e\u7684\u8ba1\u7b97\u673a\u901a\u4fe1\u7f51\u7edc\u3002\u56e0\u6b64\uff0cIP \u534f\u8bae\u4e5f\u53ef\u4ee5\u53eb\u505a\u201c\u56e0\u7279\u7f51\u534f\u8bae\u201d IP \u5730\u5740\uff08Internet Protocol Address\uff09\u662f\u6307\u4e92\u8054\u7f51\u534f\u8bae\u5730\u5740\uff0c\u53c8\u8bd1\u4e3a\u7f51\u9645\u534f\u8bae\u5730\u5740\u3002 IP \u5730\u5740\u662f IP\u534f\u8bae\u63d0\u4f9b\u7684\u4e00\u79cd\u7edf\u4e00\u7684\u5730\u5740\u683c\u5f0f\uff0c\u5b83\u4e3a\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7f51\u7edc\u548c\u6bcf\u4e00\u53f0\u4e3b\u673a\u5206\u914d\u4e00\u4e2a\u903b\u8f91\u5730\u5740\uff0c\u4ee5\u6b64\u6765\u5c4f\u853d\u7269\u7406\u5730\u5740\u7684\u5dee\u5f02 IP \u5730\u5740\u662f\u4e00\u4e2a 32 \u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u901a\u5e38\u88ab\u5206\u5272\u4e3a 4 \u4e2a\u201c 8 \u4f4d\u4e8c\u8fdb\u5236\u6570\u201d\uff08\u4e5f\u5c31\u662f 4 \u4e2a\u5b57\u8282\uff09 IP \u5730\u5740\u901a\u5e38\u7528 \u70b9\u5206\u5341\u8fdb\u5236 \u8868\u793a\u6210\uff08 a.b.c.d \uff09\u7684\u5f62\u5f0f\uff0c\u5176\u4e2d\uff0ca,b,c,d\u90fd\u662f 0~255 \u4e4b\u95f4\u7684\u5341\u8fdb\u5236\u6574\u6570\u3002\u4f8b\uff1a\u70b9\u5206\u5341\u8fdbIP\u5730\u5740\uff08100.4.5.6\uff09\uff0c\u5b9e\u9645\u4e0a\u662f 32 \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0801100100.00000100.00000101.00000110\uff09 IP \u5730\u5740\u7f16\u5740\u65b9\u5f0f \u6700\u521d\u8bbe\u8ba1\u4e92\u8054\u7f51\u7edc\u65f6\uff0c \u4e3a\u4e86\u4fbf\u4e8e\u5bfb\u5740\u4ee5\u53ca\u5c42\u6b21\u5316\u6784\u9020\u7f51\u7edc\uff0c\u6bcf\u4e2a IP \u5730\u5740\u5305\u62ec\u4e24\u4e2a\u6807\u8bc6\u7801\uff08ID\uff09 \uff0c\u5373 \u7f51\u7edcID \u548c \u4e3b\u673a ID \u3002\u540c\u4e00\u4e2a\u7269\u7406\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u4e3b\u673a\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a\u7f51\u7edc ID\uff0c\u7f51\u7edc\u4e0a\u7684\u4e00\u4e2a\u4e3b\u673a\uff08\u5305\u62ec\u7f51\u7edc\u4e0a\u5de5\u4f5c\u7ad9\uff0c\u670d\u52a1\u5668\u548c\u8def\u7531\u5668\u7b49\uff09\u6709\u4e00\u4e2a\u4e3b\u673a ID \u4e0e\u5176\u5bf9\u5e94 Internet \u59d4\u5458\u4f1a\u5b9a\u4e49\u4e86 5 \u79cd IP \u5730\u5740\u7c7b\u578b\u4ee5\u9002\u5408\u4e0d\u540c\u5bb9\u91cf\u7684\u7f51\u7edc\uff0c\u5373 A \u7c7b~ E \u7c7b \u5176\u4e2d A\u3001B\u3001C 3\u7c7b\uff08\u5982\u4e0b\u8868\u683c\uff09\u7531 InternetNIC \u5728\u5168\u7403\u8303\u56f4\u5185\u7edf\u4e00\u5206\u914d\uff0cD\u3001E \u7c7b\u4e3a\u7279\u6b8a\u5730\u5740 A\u7c7b\u6700\u9ad8\u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u6240\u4ee5\u662f$2^7$ \u4e3b\u673a\u6570\u8981\u51cf\u53bb2\u662f\u56e0\u4e3a\u53bb\u6389 x.x.x.0 \u548c x.x.x.255 \u8fd9\u4e24\u4e2a\u7279\u6b8a\u7684\u5730\u5740 \u7c7b\u522b \u6700\u5927\u7f51\u7edc\u6570 IP\u5730\u5740\u8303\u56f4 \u5355\u4e2a\u7f51\u6bb5\u6700\u5927\u4e3b\u673a\u6570 \u79c1\u6709IP\u5730\u5740\u8303\u56f4 A 126($2^7-1$) 1.0.0.1~126.255.255.254 16777214($2^{24}-2$) 10.0.0.0~10.255.255.255 B 16384($2^{14}$) 128.0.0.1~191.255.255.254 65534($2^{16}-2$) 172.16.0.0~172.31.255.255 C 2097152($2^{21}$) 192.0.0.1~223.255.255.254 254($2^8-2$) 192.168.0.0~192.168.255.255 A\u7c7bIP\u5730\u5740 \u4e00\u4e2a A \u7c7b IP \u5730\u5740\u662f\u6307\uff0c \u5728 IP \u5730\u5740\u7684\u56db\u6bb5\u53f7\u7801\u4e2d\uff0c \u7b2c\u4e00\u6bb5\u53f7\u7801\u4e3a\u7f51\u7edc\u53f7\u7801\uff0c\u5269\u4e0b\u7684\u4e09\u6bb5\u53f7\u7801\u4e3a\u672c\u5730\u8ba1\u7b97\u673a\u7684\u53f7\u7801 \u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a IP \u5730\u5740\u7684\u8bdd\uff0cA \u7c7b IP \u5730\u5740\u5c31\u7531 1 \u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c 3 \u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c \u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 0 A \u7c7b IP \u5730\u5740\u4e2d\u7f51\u7edc\u7684\u6807\u8bc6\u957f\u5ea6\u4e3a 8 \u4f4d\uff0c\u4e3b\u673a\u6807\u8bc6\u7684\u957f\u5ea6\u4e3a 24 \u4f4d\uff0cA\u7c7b\u7f51\u7edc\u5730\u5740\u6570\u91cf\u8f83\u5c11\uff0c\u6709 126 \u4e2a\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u53ef\u4ee5\u5bb9\u7eb3\u4e3b\u673a\u6570\u8fbe 1600 \u591a\u4e07\u53f0 A \u7c7b IP \u5730\u5740 \u5730\u5740\u8303\u56f4 1.0.0.1 - 126.255.255.254 \uff08\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a 00000001 00000000 00000000 00000001 - 01111111 11111111 11111111 11111110 \uff09\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u5e7f\u64ad\u5730\u5740 A \u7c7b IP \u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u4e3a 255.0.0.0\uff0c\u6bcf\u4e2a\u7f51\u7edc\u652f\u6301\u7684\u6700\u5927\u4e3b\u673a\u6570\u4e3a$2^{24}-2$ B\u7c7bIP\u5730\u5740 \u4e00\u4e2a B \u7c7b IP \u5730\u5740\u662f\u6307\uff0c\u5728 IP \u5730\u5740\u7684\u56db\u6bb5\u53f7\u7801\u4e2d\uff0c \u524d\u4e24\u6bb5\u53f7\u7801\u4e3a\u7f51\u7edc\u53f7\u7801\uff0c\u5269\u4e0b\u7684\u4e24\u6bb5\u53f7\u7801\u4e3a\u672c\u5730\u8ba1\u7b97\u673a\u7684\u53f7\u7801 \u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a IP \u5730\u5740\u7684\u8bdd\uff0cB \u7c7b IP \u5730\u5740\u5c31\u7531 2 \u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c 2 \u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c \u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 10 B \u7c7b IP\u5730\u5740\u4e2d\u7f51\u7edc\u7684\u6807\u8bc6\u957f\u5ea6\u4e3a 16 \u4f4d\uff0c\u4e3b\u673a\u6807\u8bc6\u7684\u957f\u5ea6\u4e3a 16 \u4f4d\uff0cB \u7c7b\u7f51\u7edc\u5730\u5740\u9002\u7528\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7684\u7f51\u7edc\uff0c\u670916384 \u4e2a\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u6240\u80fd\u5bb9\u7eb3\u7684\u8ba1\u7b97\u673a\u6570\u4e3a 6 \u4e07\u591a\u53f0 B \u7c7b IP \u5730\u5740\u5730\u5740\u8303\u56f4 128.0.0.1 - 191.255.255.254 \uff08\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a 10000000 00000000 00000000 00000001 - 10111111 11111111 11111111 11111110 \uff09\uff0c \u6700\u540e\u4e00\u4e2a\u662f\u5e7f\u64ad\u5730\u5740 B \u7c7b IP \u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u4e3a 255.255.0.0\uff0c\u6bcf\u4e2a\u7f51\u7edc\u652f\u6301\u7684\u6700\u5927\u4e3b\u673a\u6570\u4e3a$2^{16}-2$ C\u7c7bIP\u5730\u5740 \u4e00\u4e2a C \u7c7b IP \u5730\u5740\u662f\u6307\uff0c\u5728 IP \u5730\u5740\u7684\u56db\u6bb5\u53f7\u7801\u4e2d\uff0c \u524d\u4e09\u6bb5\u53f7\u7801\u4e3a\u7f51\u7edc\u53f7\u7801\uff0c\u5269\u4e0b\u7684\u4e00\u6bb5\u53f7\u7801\u4e3a\u672c\u5730\u8ba1\u7b97\u673a\u7684\u53f7\u7801 \u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a IP \u5730\u5740\u7684\u8bdd\uff0cC \u7c7b IP \u5730\u5740\u5c31\u7531 3 \u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c 1 \u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c \u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 110 C \u7c7b IP \u5730\u5740\u4e2d\u7f51\u7edc\u7684\u6807\u8bc6\u957f\u5ea6\u4e3a 24 \u4f4d\uff0c\u4e3b\u673a\u6807\u8bc6\u7684\u957f\u5ea6\u4e3a 8 \u4f4d\uff0cC \u7c7b\u7f51\u7edc\u5730\u5740\u6570\u91cf\u8f83\u591a\uff0c\u6709 209 \u4e07\u4f59\u4e2a\u7f51\u7edc\u3002\u9002\u7528\u4e8e\u5c0f\u89c4\u6a21\u7684\u5c40\u57df\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u6700\u591a\u53ea\u80fd\u5305\u542b254\u53f0\u8ba1\u7b97\u673a C \u7c7b IP \u5730\u5740\u8303\u56f4 192.0.0.1-223.255.255.254 \uff08\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a: 11000000 00000000 00000000 00000001 - 11011111 11111111 11111111 11111110 \uff09\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u5e7f\u64ad\u5730\u5740 C\u7c7bIP\u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u4e3a 255.255.255.0\uff0c\u6bcf\u4e2a\u7f51\u7edc\u652f\u6301\u7684\u6700\u5927\u4e3b\u673a\u6570\u4e3a$2^8-2$ D\u7c7bIP\u5730\u5740 D \u7c7b IP \u5730\u5740\u5728\u5386\u53f2\u4e0a\u88ab\u53eb\u505a \u591a\u64ad\u5730\u5740\uff08multicast address\uff09 \uff0c\u5373 \u7ec4\u64ad\u5730\u5740 \u5728\u4ee5\u592a\u7f51\u4e2d\uff0c\u591a\u64ad\u5730\u5740\u547d\u540d\u4e86\u4e00\u7ec4\u5e94\u8be5\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u5e94\u7528\u63a5\u6536\u5230\u4e00\u4e2a\u5206\u7ec4\u7684\u7ad9\u70b9\u3002\u591a\u64ad\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 1110 \uff0c\u8303\u56f4\u4ece 224.0.0.0 - 239.255.255.255 \u5212\u5206 IP\u5730\u5740 \u8bf4\u660e 224.0.0.0~224.0.0.255 \u5c40\u90e8\u94fe\u63a5\u591a\u64ad\u5730\u5740\uff1a\u662f\u4e3a\u8def\u7531\u534f\u8bae\u548c\u5176\u5b83\u7528\u9014\u4fdd\u7559\u7684\u5730\u5740\uff0c\u8def\u7531\u5668\u5e76\u4e0d\u8f6c\u53d1\u5c5e\u4e8e\u6b64\u8303\u56f4\u7684IP\u5305 224.0.1.0~224.0.1.255 \u9884\u7559\u591a\u64ad\u5730\u5740\uff1a\u516c\u7528\u7ec4\u64ad\u5730\u5740\uff0c\u53ef\u7528\u4e8eInternet\uff1b\u4f7f\u7528\u524d\u9700\u8981\u7533\u8bf7 224.0.2.0~238.255.255.255 \u9884\u7559\u591a\u64ad\u5730\u5740\uff1a\u7528\u6237\u53ef\u7528\u7ec4\u64ad\u5730\u5740(\u4e34\u65f6\u7ec4\u5730\u5740)\uff0c\u5168\u7f51\u8303\u56f4\u5185\u6709\u6548 239.0.0.0~239.255.255.255 \u672c\u5730\u7ba1\u7406\u7ec4\u64ad\u5730\u5740\uff0c\u53ef\u4f9b\u7ec4\u7ec7\u5185\u90e8\u4f7f\u7528\uff0c\u7c7b\u4f3c\u4e8e\u79c1\u6709 IP \u5730\u5740\uff0c\u4e0d\u80fd\u7528\u4e8e Internet\uff0c\u53ef\u9650\u5236\u591a\u64ad\u8303\u56f4 \u7279\u6b8a\u7684\u7f51\u5740 \u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u4e3a 0 \u7684\u5730\u5740\uff08 0.0.0.0 \uff09\u5bf9\u5e94\u4e8e \u5f53\u524d\u4e3b\u673a IP \u5730\u5740\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u4e3a 1 \u7684 IP \u5730\u5740\uff08 255.255.255.255 \uff09\u662f \u5f53\u524d\u5b50\u7f51\u7684\u5e7f\u64ad\u5730\u5740 IP \u5730\u5740\u4e2d\u51e1\u662f\u4ee5 11110 \u5f00\u5934\u7684 E \u7c7b IP \u5730\u5740\u90fd\u4fdd\u7559\u7528\u4e8e\u5c06\u6765\u548c\u5b9e\u9a8c\u4f7f\u7528 IP\u5730\u5740\u4e2d \u4e0d\u80fd\u4ee5\u5341\u8fdb\u5236 127 \u4f5c\u4e3a\u5f00\u5934 \uff0c\u8be5\u7c7b\u5730\u5740\u4e2d\u6570\u5b57 127.0.0.1 ~ 127.255.255.255 \u7528\u4e8e\u56de\u8def\u6d4b\u8bd5\uff0c\u5982\uff1a 127.0.0.1 \u53ef\u4ee5\u4ee3\u8868 \u672c\u673aIP\u5730\u5740 \u5b50\u7f51\u63a9\u7801 \u5b50\u7f51\u63a9\u7801\uff08subnet mask\uff09 \u53c8\u53eb\u7f51\u7edc\u63a9\u7801\u3001\u5730\u5740\u63a9\u7801\u3001\u5b50\u7f51\u7edc\u906e\u7f69\uff0c\u5b83\u662f\u4e00\u79cd\u7528\u6765\u6307\u660e\u4e00\u4e2a IP \u5730\u5740\u7684\u54ea\u4e9b\u4f4d\u6807\u8bc6\u7684\u662f\u4e3b\u673a\u6240\u5728\u7684\u5b50\u7f51\uff0c\u4ee5\u53ca\u54ea\u4e9b\u4f4d\u6807\u8bc6\u7684\u662f\u4e3b\u673a\u7684\u4f4d\u63a9\u7801 \u5b50\u7f51\u63a9\u7801\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\uff0c\u5b83\u5fc5\u987b\u7ed3\u5408 IP \u5730\u5740\u4e00\u8d77\u4f7f\u7528 \u5b50\u7f51\u63a9\u7801\u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\uff0c\u5c31\u662f\u5c06\u67d0\u4e2a IP \u5730\u5740\u5212\u5206\u6210 \u7f51\u7edc\u5730\u5740 \u548c \u4e3b\u673a\u5730\u5740 \u4e24\u90e8\u5206 \u5b50\u7f51\u63a9\u7801\u662f\u4e00\u4e2a 32 \u4f4d\u5730\u5740 \uff0c\u7528\u4e8e\u5c4f\u853d IP \u5730\u5740\u7684\u4e00\u90e8\u5206\u4ee5\u533a\u522b\u7f51\u7edc\u6807\u8bc6\u548c\u4e3b\u673a\u6807\u8bc6\uff0c\u5e76\u8bf4\u660e\u8be5 IP\u5730\u5740\u662f\u5728\u5c40\u57df\u7f51\u4e0a\uff0c\u8fd8\u662f\u5728\u5e7f\u57df\u7f51\u4e0a \u5b50\u7f51\u63a9\u7801\u662f\u5728 IPv4 \u5730\u5740\u8d44\u6e90\u7d27\u7f3a\u7684\u80cc\u666f\u4e0b\u4e3a\u4e86\u89e3\u51b3 lP \u5730\u5740\u5206\u914d\u800c\u4ea7\u751f\u7684\u865a\u62df lP \u6280\u672f\uff0c\u901a\u8fc7\u5b50\u7f51\u63a9\u7801\u5c06A\u3001B\u3001C \u4e09\u7c7b\u5730\u5740\u5212\u5206\u4e3a\u82e5\u5e72\u5b50\u7f51\uff0c\u4ece\u800c\u663e\u8457\u63d0\u9ad8\u4e86 IP \u5730\u5740\u7684\u5206\u914d\u6548\u7387\uff0c\u6709\u6548\u89e3\u51b3\u4e86 IP \u5730\u5740\u8d44\u6e90\u7d27\u5f20\u7684\u5c40\u9762\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u4f01\u4e1a\u5185\u7f51\u4e2d\u4e3a\u4e86\u66f4\u597d\u5730\u7ba1\u7406\u7f51\u7edc\uff0c\u7f51\u7ba1\u4eba\u5458\u4e5f\u5229\u7528\u5b50\u7f51\u63a9\u7801\u7684\u4f5c\u7528\uff0c\u4eba\u4e3a\u5730\u5c06\u4e00\u4e2a\u8f83\u5927\u7684\u4f01\u4e1a\u5185\u90e8\u7f51\u7edc\u5212\u5206\u4e3a\u66f4\u591a\u4e2a\u5c0f\u89c4\u6a21\u7684\u5b50\u7f51\uff0c\u518d\u5229\u7528\u4e09\u5c42\u4ea4\u6362\u673a\u7684\u8def\u7531\u529f\u80fd\u5b9e\u73b0\u5b50\u7f51\u4e92\u8054\uff0c\u4ece\u800c\u6709\u6548\u89e3\u51b3\u4e86\u7f51\u7edc\u5e7f\u64ad\u98ce\u66b4\u548c\u7f51\u7edc\u75c5\u6bd2\u7b49\u8bf8\u591a\u7f51\u7edc\u7ba1\u7406\u65b9\u9762\u7684\u95ee\u9898 \u5728\u5927\u591a\u6570\u7684\u7f51\u7edc\u6559\u79d1\u4e66\u4e2d\uff0c\u4e00\u822c\u90fd\u5c06\u5b50\u7f51\u63a9\u7801\u7684\u4f5c\u7528\u63cf\u8ff0\u4e3a\u901a\u8fc7\u903b\u8f91\u8fd0\u7b97\uff0c\u5c06 IP \u5730\u5740\u5212\u5206\u4e3a\u7f51\u7edc\u6807\u8bc6(Net.ID) \u548c\u4e3b\u673a\u6807\u8bc6(Host.ID)\uff0c\u53ea\u6709\u7f51\u7edc\u6807\u8bc6\u76f8\u540c\u7684\u4e24\u53f0\u4e3b\u673a\u5728\u65e0\u8def\u7531\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u76f8\u4e92\u901a\u4fe1 \u6839\u636e RFC950 \u5b9a\u4e49\uff0c\u5b50\u7f51\u63a9\u7801\u662f\u4e00\u4e2a 32 \u4f4d\u7684 2 \u8fdb\u5236\u6570\uff0c \u5176\u5bf9\u5e94\u7f51\u7edc\u5730\u5740\u7684\u6240\u6709\u4f4d\u90fd\u7f6e\u4e3a 1\uff0c\u5bf9\u5e94\u4e8e\u4e3b\u673a\u5730\u5740\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u4e3a 0\u3002\u5b50\u7f51\u63a9\u7801\u544a\u77e5\u8def\u7531\u5668\uff0c\u5730\u5740\u7684\u54ea\u4e00\u90e8\u5206\u662f\u7f51\u7edc\u5730\u5740\uff0c\u54ea\u4e00\u90e8\u5206\u662f\u4e3b\u673a\u5730\u5740\uff0c\u4f7f\u8def\u7531\u5668\u6b63\u786e\u5224\u65ad\u4efb\u610f IP \u5730\u5740\u662f\u5426\u662f\u672c\u7f51\u6bb5\u7684\uff0c\u4ece\u800c\u6b63\u786e\u5730\u8fdb\u884c\u8def\u7531\u3002\u7f51\u7edc\u4e0a\uff0c\u6570\u636e\u4ece\u4e00\u4e2a\u5730\u65b9\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\uff0c\u662f\u4f9d\u9760 IP \u5bfb\u5740\u3002\u4ece\u903b\u8f91\u4e0a\u6765\u8bb2\uff0c\u662f\u4e24\u6b65\u7684\u3002\u7b2c\u4e00\u6b65\uff0c\u4ece IP \u4e2d\u627e\u5230\u6240\u5c5e\u7684\u7f51\u7edc\uff0c\u597d\u6bd4\u662f\u53bb\u627e\u8fd9\u4e2a\u4eba\u662f\u54ea\u4e2a\u5c0f\u533a\u7684\uff1b\u7b2c\u4e8c\u6b65\uff0c\u518d\u4ece IP \u4e2d\u627e\u5230\u4e3b\u673a\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u4f4d\u7f6e\uff0c\u597d\u6bd4\u662f\u5728\u5c0f\u533a\u91cc\u9762\u627e\u5230\u8fd9\u4e2a\u4eba \u5b50\u7f51\u63a9\u7801\u7684\u8bbe\u5b9a\u5fc5\u987b\u9075\u5faa\u4e00\u5b9a\u7684\u89c4\u5219\u3002\u4e0e\u4e8c\u8fdb\u5236 IP \u5730\u5740\u76f8\u540c\uff0c\u5b50\u7f51\u63a9\u7801\u7531 1 \u548c 0 \u7ec4\u6210\uff0c\u4e14 1 \u548c 0 \u5206\u522b\u8fde\u7eed\u3002\u5b50\u7f51\u63a9\u7801\u7684\u957f\u5ea6\u4e5f\u662f 32 \u4f4d\uff0c\u5de6\u8fb9\u662f\u7f51\u7edc\u4f4d\uff0c\u7528\u4e8c\u8fdb\u5236\u6570\u5b57 \u201c1\u201d \u8868\u793a\uff0c1 \u7684\u6570\u76ee\u7b49\u4e8e\u7f51\u7edc\u4f4d\u7684\u957f\u5ea6\uff1b\u53f3\u8fb9\u662f\u4e3b\u673a\u4f4d\uff0c\u7528\u4e8c\u8fdb\u5236\u6570\u5b57 \u201c0\u201d \u8868\u793a\uff0c0 \u7684\u6570\u76ee\u7b49\u4e8e\u4e3b\u673a\u4f4d\u7684\u957f\u5ea6\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u63a9\u7801\u4e0e IP \u5730\u5740\u505a\u6309\u4f4d\u4e0e\u8fd0\u7b97\u65f6\u7528 0 \u906e\u4f4f\u539f\u4e3b\u673a\u6570\uff0c\u800c\u4e0d\u6539\u53d8\u539f\u7f51\u7edc\u6bb5\u6570\u5b57\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u901a\u8fc7 0 \u7684\u4f4d\u6570\u786e\u5b9a\u5b50\u7f51\u7684\u4e3b\u673a\u6570\uff08 2 \u7684\u4e3b\u673a\u4f4d\u6570\u6b21\u65b9 - 2\uff0c\u56e0\u4e3a\u4e3b\u673a\u53f7\u5168\u4e3a 1 \u65f6\u8868\u793a\u8be5\u7f51\u7edc\u5e7f\u64ad\u5730\u5740\uff0c\u5168\u4e3a 0 \u65f6\u8868\u793a\u8be5\u7f51\u7edc\u7684\u7f51\u7edc\u53f7\uff0c\u8fd9\u662f\u4e24\u4e2a\u7279\u6b8a\u5730\u5740\uff09\u3002\u901a\u8fc7\u5b50\u7f51\u63a9\u7801\uff0c\u624d\u80fd\u8868\u660e\u4e00\u53f0\u4e3b\u673a\u6240\u5728\u7684\u5b50\u7f51\u4e0e\u5176\u4ed6\u5b50\u7f51\u7684\u5173\u7cfb\uff0c\u4f7f\u7f51\u7edc\u6b63\u5e38\u5de5\u4f5c \u7aef\u53e3 \u7b80\u4ecb \u7aef\u53e3 \u662f\u82f1\u6587 port \u7684\u610f\u8bd1\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u8bbe\u5907\u4e0e\u5916\u754c\u901a\u8baf\u4ea4\u6d41\u7684\u51fa\u53e3 \u7aef\u53e3\u53ef\u5206\u4e3a \u865a\u62df\u7aef\u53e3 \u548c \u7269\u7406\u7aef\u53e3 \u865a\u62df\u7aef\u53e3\u6307\u8ba1\u7b97\u673a\u5185\u90e8\u6216\u4ea4\u6362\u673a\u8def\u7531\u5668\u5185\u7684\u7aef\u53e3\uff0c\u4e0d\u53ef\u89c1\uff0c\u662f\u7279\u6307TCP/IP\u534f\u8bae\u4e2d\u7684\u7aef\u53e3\uff0c\u662f\u903b\u8f91\u610f\u4e49\u4e0a\u7684\u7aef\u53e3\uff0c\u4f8b\u5982\u8ba1\u7b97\u673a\u4e2d\u7684 80 \u7aef\u53e3\u300121 \u7aef\u53e3\u300123 \u7aef\u53e3\u7b49 \u7269\u7406\u7aef\u53e3\u53c8\u79f0\u4e3a\u63a5\u53e3\uff0c\u662f\u53ef\u89c1\u7aef\u53e3\uff0c\u8ba1\u7b97\u673a\u80cc\u677f\u7684 RJ45 \u7f51\u53e3\uff0c\u4ea4\u6362\u673a\u8def\u7531\u5668\u96c6\u7ebf\u5668\u7b49 RJ45 \u7aef\u53e3\u3002\u7535\u8bdd\u4f7f\u7528 RJ11 \u63d2\u53e3\u4e5f\u5c5e\u4e8e\u7269\u7406\u7aef\u53e3\u7684\u8303\u7574 \u7aef\u53e3\u662f\u901a\u8fc7\u7aef\u53e3\u53f7\u6765\u6807\u8bb0\u7684\uff0c\u7aef\u53e3\u53f7\u53ea\u6709\u6574\u6570\uff0c\u8303\u56f4\u662f\u4ece 0 \u523065535\uff08$2^{16}$\uff09 \u7aef\u53e3\u7c7b\u578b \u5468\u77e5\u7aef\u53e3\uff08Well Known Ports\uff09 \u5468\u77e5\u7aef\u53e3\u662f\u4f17\u6240\u5468\u77e5\u7684\u7aef\u53e3\u53f7\uff0c\u4e5f\u53eb\u77e5\u540d\u7aef\u53e3\u3001\u516c\u8ba4\u7aef\u53e3\u6216\u8005\u5e38\u7528\u7aef\u53e3\uff0c \u8303\u56f4\u4ece 0 \u5230 1023 \uff0c\u5b83\u4eec\u7d27\u5bc6\u7ed1\u5b9a\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u670d\u52a1\uff0c\u4f8b\u5982 80 \u7aef\u53e3\u5206\u914d\u7ed9 WWW \u670d\u52a1\uff0c21 \u7aef\u53e3\u5206\u914d\u7ed9 FTP \u670d\u52a1\uff0c23 \u7aef\u53e3\u5206\u914d\u7ed9Telnet\u670d\u52a1\u7b49\u7b49 \u6211\u4eec\u5728 IE \u7684\u5730\u5740\u680f\u91cc\u8f93\u5165\u4e00\u4e2a\u7f51\u5740\u7684\u65f6\u5019\u662f\u4e0d\u5fc5\u6307\u5b9a\u7aef\u53e3\u53f7\u7684\uff0c\u56e0\u4e3a\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0bWWW \u670d\u52a1\u7684\u7aef\u53e3\u662f \u201c80\u201d \u7f51\u7edc\u670d\u52a1\u662f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7aef\u53e3\u53f7\u7684\uff0c\u5982\u679c\u4e0d\u662f\u9ed8\u8ba4\u7684\u7aef\u53e3\u53f7\u5219\u5e94\u8be5\u5728\u5730\u5740\u680f\u4e0a\u6307\u5b9a\u7aef\u53e3\u53f7\uff0c\u65b9\u6cd5\u662f \u5728\u5730\u5740\u540e\u9762\u52a0\u4e0a\u5192\u53f7\u201c:\u201d\uff08\u534a\u89d2\uff09\uff0c\u518d\u52a0\u4e0a\u7aef\u53e3\u53f7 \u3002\u6bd4\u5982\u4f7f\u7528 \u201c8080\u201d \u4f5c\u4e3a WWW\u670d\u52a1\u7684\u7aef\u53e3\uff0c\u5219\u9700\u8981\u5728\u5730\u5740\u680f\u91cc\u8f93\u5165 \u7f51\u5740:8080 \u6709\u4e9b\u7cfb\u7edf\u534f\u8bae\u4f7f\u7528\u56fa\u5b9a\u7684\u7aef\u53e3\u53f7\uff0c\u5b83\u662f\u4e0d\u80fd\u88ab\u6539\u53d8\u7684\uff0c\u6bd4\u5982 139 \u7aef\u53e3\u4e13\u95e8\u7528\u4e8e NetBIOS \u4e0e TCP/IP \u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u4e0d\u80fd\u624b\u52a8\u6539\u53d8 \u6ce8\u518c\u7aef\u53e3\uff08Registered Ports\uff09 \u7aef\u53e3\u53f7\u4ece 1024 \u5230 49151 \uff0c\u5b83\u4eec\u677e\u6563\u5730\u7ed1\u5b9a\u4e8e\u4e00\u4e9b\u670d\u52a1\uff0c\u5206\u914d\u7ed9\u7528\u6237\u8fdb\u7a0b\u6216\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u4e3b\u8981\u662f\u7528\u6237\u9009\u62e9\u5b89\u88c5\u7684\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5df2\u7ecf\u5206\u914d\u597d\u4e86\u516c\u8ba4\u7aef\u53e3\u7684\u5e38\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e9b\u7aef\u53e3\u5728\u6ca1\u6709\u88ab\u670d\u52a1\u5668\u8d44\u6e90\u5360\u7528\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u7528\u6237\u7aef\u52a8\u6001\u9009\u7528\u4e3a\u6e90\u7aef\u53e3 \u52a8\u6001\u7aef\u53e3 / \u79c1\u6709\u7aef\u53e3\uff08Dynamic Ports / Private Ports\uff09 \u52a8\u6001\u7aef\u53e3\u7684\u8303\u56f4\u662f\u4ece 49152 \u5230 65535 \uff0c\u4e4b\u6240\u4ee5\u79f0\u4e3a\u52a8\u6001\u7aef\u53e3\uff0c\u662f\u56e0\u4e3a\u5b83\u4e00\u822c\u4e0d\u56fa\u5b9a\u5206\u914d\u67d0\u79cd\u670d\u52a1\uff0c\u800c\u662f\u52a8\u6001\u5206\u914d \u7f51\u7edc\u6a21\u578b OSI\u4e03\u5c42\u53c2\u8003\u6a21\u578b \u4e03\u5c42\u6a21\u578b\uff0c\u4ea6\u79f0 OSI\uff08Open System Interconnection\uff09\u53c2\u8003\u6a21\u578b \uff0c\u5373 \u5f00\u653e\u5f0f\u7cfb\u7edf\u4e92\u8054 \u3002\u53c2\u8003\u6a21\u578b\u662f\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\uff08ISO\uff09\u5236\u5b9a\u7684\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97\u673a\u6216\u901a\u4fe1\u7cfb\u7edf\u95f4\u4e92\u8054\u7684\u6807\u51c6\u4f53\u7cfb\uff0c\u4e00\u822c\u79f0\u4e3a OSI \u53c2\u8003\u6a21\u578b\u6216\u4e03\u5c42\u6a21\u578b \u5b83\u662f\u4e00\u4e2a\u4e03\u5c42\u7684\u3001\u62bd\u8c61\u7684\u6a21\u578b\u4f53\uff0c\u4e0d\u4ec5\u5305\u62ec\u4e00\u7cfb\u5217\u62bd\u8c61\u7684\u672f\u8bed\u6216\u6982\u5ff5\uff0c\u4e5f\u5305\u62ec\u5177\u4f53\u7684\u534f\u8bae \u7269\u7406\u5c42 \uff1a\u4e3b\u8981\u5b9a\u4e49\u7269\u7406\u8bbe\u5907\u6807\u51c6\uff0c\u5982\u7f51\u7ebf\u7684\u63a5\u53e3\u7c7b\u578b\u3001\u5149\u7ea4\u7684\u63a5\u53e3\u7c7b\u578b\u3001\u5404\u79cd\u4f20\u8f93\u4ecb\u8d28\u7684\u4f20\u8f93\u901f\u7387\u7b49\u3002\u5b83\u7684 \u4e3b\u8981\u4f5c\u7528\u662f\u4f20\u8f93\u6bd4\u7279\u6d41\uff08\u5c31\u662f\u75311\u30010\u8f6c\u5316\u4e3a\u7535\u6d41\u5f3a\u5f31\u6765\u8fdb\u884c\u4f20\u8f93\uff0c\u5230\u8fbe\u76ee\u7684\u5730\u540e\u518d\u8f6c\u5316\u4e3a1\u30010\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u6570\u6a21\u8f6c\u6362\u4e0e\u6a21\u6570\u8f6c\u6362\uff09 \u3002\u8fd9\u4e00\u5c42\u7684\u6570\u636e\u53eb\u505a \u6bd4\u7279 \u6570\u636e\u94fe\u8def\u5c42 \uff1a\u5efa\u7acb \u903b\u8f91\u8fde\u63a5 \u3001\u8fdb\u884c \u786c\u4ef6\u5730\u5740\u5bfb\u5740 \u3001 \u5dee\u9519\u6821\u9a8c \u7b49\u529f\u80fd\u3002\u5b9a\u4e49\u4e86\u5982\u4f55\u8ba9\u683c\u5f0f\u5316\u6570\u636e \u4ee5\u5e27\u4e3a\u5355\u4f4d \u8fdb\u884c\u4f20\u8f93\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba9\u63a7\u5236\u5bf9\u7269\u7406\u4ecb\u8d28\u7684\u8bbf\u95ee\u3002 \u5c06\u6bd4\u7279\u7ec4\u5408\u6210\u5b57\u8282\u8fdb\u800c\u7ec4\u5408\u6210\u5e27\uff0c\u7528MAC\u5730\u5740\u8bbf\u95ee\u4ecb\u8d28 \u7f51\u7edc\u5c42 \uff1a\u8fdb\u884c \u903b\u8f91\u5730\u5740\u5bfb\u5740 \uff0c\u5728\u4f4d\u4e8e\u4e0d\u540c\u5730\u7406\u4f4d\u7f6e\u7684\u7f51\u7edc\u4e2d\u7684\u4e24\u4e2a\u4e3b\u673a\u7cfb\u7edf\u4e4b\u95f4\u63d0\u4f9b\u8fde\u63a5\u548c\u8def\u5f84\u9009\u62e9\u3002Internet\u7684\u53d1\u5c55\u4f7f\u5f97\u4ece\u4e16\u754c\u5404\u7ad9\u70b9\u8bbf\u95ee\u4fe1\u606f\u7684\u7528\u6237\u6570\u5927\u5927\u589e\u52a0\uff0c\u800c\u7f51\u7edc\u5c42\u6b63\u662f\u7ba1\u7406\u8fd9\u79cd\u8fde\u63a5\u7684\u5c42 \u4f20\u8f93\u5c42 \uff1a \u5b9a\u4e49\u4e86\u4e00\u4e9b\u4f20\u8f93\u6570\u636e\u7684\u534f\u8bae\u548c\u7aef\u53e3\u53f7 \uff08 WWW \u7aef\u53e3 80 \u7b49\uff09\uff0c\u5982\uff1a TCP \uff08\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff0c\u4f20\u8f93\u6548\u7387\u4f4e\uff0c\u53ef\u9760\u6027\u5f3a\uff0c\u7528\u4e8e\u4f20\u8f93\u53ef\u9760\u6027\u8981\u6c42\u9ad8\uff0c\u6570\u636e\u91cf\u5927\u7684\u6570\u636e\uff09\uff0c UDP \uff08\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff0c\u4e0eTCP \u7279\u6027\u6070\u6070\u76f8\u53cd\uff0c\u7528\u4e8e\u4f20\u8f93\u53ef\u9760\u6027\u8981\u6c42\u4e0d\u9ad8\uff0c\u6570\u636e\u91cf\u5c0f\u7684\u6570\u636e\uff0c\u5982 QQ \u804a\u5929\u6570\u636e\u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u4f20\u8f93\u7684\uff09\u3002 \u4e3b\u8981\u662f\u5c06\u4ece\u4e0b\u5c42\u63a5\u6536\u7684\u6570\u636e\u8fdb\u884c\u5206\u6bb5\u548c\u4f20\u8f93\uff0c\u5230\u8fbe\u76ee\u7684\u5730\u5740\u540e\u518d\u8fdb\u884c\u91cd\u7ec4\u3002\u5e38\u5e38\u628a\u8fd9\u4e00\u5c42\u6570\u636e\u53eb\u505a\u6bb5 \u4f1a\u8bdd\u5c42 \uff1a\u901a\u8fc7\u4f20\u8f93\u5c42\uff08\u7aef\u53e3\u53f7\uff1a\u4f20\u8f93\u7aef\u53e3\u4e0e\u63a5\u6536\u7aef\u53e3\uff09\u5efa\u7acb\u6570\u636e\u4f20\u8f93\u7684\u901a\u8def\u3002\u4e3b\u8981\u5728\u4f60\u7684\u7cfb\u7edf\u4e4b\u95f4\u53d1\u8d77\u4f1a\u8bdd\u6216\u8005\u63a5\u53d7\u4f1a\u8bdd\u8bf7\u6c42 \u8868\u793a\u5c42 \uff1a\u6570\u636e\u7684\u8868\u793a\u3001\u5b89\u5168\u3001\u538b\u7f29\u3002\u4e3b\u8981\u662f \u8fdb\u884c\u5bf9\u63a5\u6536\u7684\u6570\u636e\u8fdb\u884c\u89e3\u91ca\u3001\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u3001\u538b\u7f29\u4e0e\u89e3\u538b\u7f29 \u7b49\uff08\u4e5f\u5c31\u662f\u628a\u8ba1\u7b97\u673a\u80fd\u591f\u8bc6\u522b\u7684\u4e1c\u897f\u8f6c\u6362\u6210\u4eba\u80fd\u591f\u80fd\u8bc6\u522b\u7684\u4e1c\u897f\uff08\u5982\u56fe\u7247\u3001\u58f0\u97f3\u7b49\uff09 \u5e94\u7528\u5c42 \uff1a\u7f51\u7edc\u670d\u52a1\u4e0e\u6700\u7ec8\u7528\u6237\u7684\u4e00\u4e2a\u63a5\u53e3\u3002\u8fd9\u4e00\u5c42\u4e3a\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u3001\u6587\u4ef6\u4f20\u8f93\u548c\u7ec8\u7aef\u4eff\u771f\uff09\u63d0\u4f9b\u7f51\u7edc\u670d\u52a1 TCP/IP\u56db\u5c42\u6a21\u578b \u7b80\u4ecb\uff08==\u56fe\u53ef\u80fd\u6709\u9519\u8bef==\uff09 \u73b0\u5728 Internet\uff08\u56e0\u7279\u7f51\uff09\u4f7f\u7528\u7684\u4e3b\u6d41\u534f\u8bae\u65cf\u662f TCP/IP \u534f\u8bae\u65cf \uff0c\u5b83\u662f\u4e00\u4e2a\u5206\u5c42\u3001\u591a\u534f\u8bae\u7684\u901a\u4fe1\u4f53\u7cfb\u3002TCP/IP\u534f\u8bae\u65cf\u662f\u4e00\u4e2a\u56db\u5c42\u534f\u8bae\u7cfb\u7edf\uff0c\u81ea\u5e95\u800c\u4e0a\u5206\u522b\u662f \u6570\u636e\u94fe\u8def\u5c42 \u3001 \u7f51\u7edc\u5c42 \u3001 \u4f20\u8f93\u5c42 \u548c \u5e94\u7528\u5c42 \u3002\u6bcf\u4e00\u5c42\u5b8c\u6210\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u4e14\u901a\u8fc7\u82e5\u5e72\u534f\u8bae\u6765\u5b9e\u73b0\uff0c\u4e0a\u5c42\u534f\u8bae\u4f7f\u7528\u4e0b\u5c42\u534f\u8bae\u63d0\u4f9b\u7684\u670d\u52a1 OSI\u4e03\u5c42\u4e0eTCP/IP\u56db\u5c42 \u56db\u5c42\u4ecb\u7ecd \u5e94\u7528\u5c42 \uff1a\u5e94\u7528\u5c42\u662f TCP/IP \u534f\u8bae\u7684\u7b2c\u4e00\u5c42\uff0c\u662f\u76f4\u63a5\u4e3a\u5e94\u7528\u8fdb\u7a0b\u63d0\u4f9b\u670d\u52a1\u7684 \u5bf9\u4e0d\u540c\u79cd\u7c7b\u7684\u5e94\u7528\u7a0b\u5e8f\u5b83\u4eec\u4f1a\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u6765\u4f7f\u7528\u5e94\u7528\u5c42\u7684\u4e0d\u540c\u534f\u8bae\uff0c\u90ae\u4ef6\u4f20\u8f93\u5e94\u7528\u4f7f\u7528\u4e86 SMTP \u534f\u8bae\u3001\u4e07\u7ef4\u7f51\u5e94\u7528\u4f7f\u7528\u4e86 HTTP \u534f\u8bae\u3001\u8fdc\u7a0b\u767b\u5f55\u670d\u52a1\u5e94\u7528\u4f7f\u7528\u4e86\u6709 TELNET \u534f\u8bae \u5e94\u7528\u5c42\u8fd8\u80fd\u52a0\u5bc6\u3001\u89e3\u5bc6\u3001\u683c\u5f0f\u5316\u6570\u636e \u5e94\u7528\u5c42\u53ef\u4ee5\u5efa\u7acb\u6216\u89e3\u9664\u4e0e\u5176\u4ed6\u8282\u70b9\u7684\u8054\u7cfb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5145\u5206\u8282\u7701\u7f51\u7edc\u8d44\u6e90 \u4f20\u8f93\u5c42 \uff1a\u4f5c\u4e3a TCP/IP \u534f\u8bae\u7684\u7b2c\u4e8c\u5c42\uff0c\u8fd0\u8f93\u5c42\u5728\u6574\u4e2a TCP/IP \u534f\u8bae\u4e2d\u8d77\u5230\u4e86\u4e2d\u6d41\u7825\u67f1\u7684\u4f5c\u7528\u3002\u4e14\u5728\u8fd0\u8f93\u5c42\u4e2d\uff0c TCP \u548c UDP \u4e5f\u540c\u6837\u8d77\u5230\u4e86\u4e2d\u6d41\u7825\u67f1\u7684\u4f5c\u7528 \u7f51\u7edc\u5c42 \uff1a\u7f51\u7edc\u5c42\u5728 TCP/IP \u534f\u8bae\u4e2d\u7684\u4f4d\u4e8e\u7b2c\u4e09\u5c42\u3002\u5728 TCP/IP \u534f\u8bae\u4e2d\u7f51\u7edc\u5c42\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8fde\u63a5\u7684\u5efa\u7acb\u548c\u7ec8\u6b62\u4ee5\u53ca IP \u5730\u5740\u7684\u5bfb\u627e\u7b49\u529f\u80fd \u7f51\u7edc\u63a5\u53e3\u5c42 \uff1a\u5728 TCP/IP \u534f\u8bae\u4e2d\uff0c\u7f51\u7edc\u63a5\u53e3\u5c42\u4f4d\u4e8e\u7b2c\u56db\u5c42\u3002\u7531\u4e8e\u7f51\u7edc\u63a5\u53e3\u5c42\u517c\u5e76\u4e86\u7269\u7406\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u6240\u4ee5\uff0c\u7f51\u7edc\u63a5\u53e3\u5c42\u65e2\u662f\u4f20\u8f93\u6570\u636e\u7684\u7269\u7406\u5a92\u4ecb\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u7f51\u7edc\u5c42\u63d0\u4f9b\u4e00\u6761\u51c6\u786e\u65e0\u8bef\u7684\u7ebf\u8def \u534f\u8bae \u7b80\u4ecb \u534f\u8bae\uff0c\u7f51\u7edc\u534f\u8bae\u7684\u7b80\u79f0\uff0c\u7f51\u7edc\u534f\u8bae\u662f\u901a\u4fe1\u8ba1\u7b97\u673a\u53cc\u65b9\u5fc5\u987b\u5171\u540c\u9075\u4ece\u7684\u4e00\u7ec4\u7ea6\u5b9a\u3002\u5982\u600e\u4e48\u6837\u5efa\u7acb\u8fde\u63a5\u3001\u600e\u4e48\u6837\u4e92\u76f8\u8bc6\u522b\u7b49\u3002\u53ea\u6709\u9075\u5b88\u8fd9\u4e2a\u7ea6\u5b9a\uff0c\u8ba1\u7b97\u673a\u4e4b\u95f4\u624d\u80fd\u76f8\u4e92\u901a\u4fe1\u4ea4\u6d41\u3002\u5b83\u7684\u4e09\u8981\u7d20\u662f\uff1a \u8bed\u6cd5 \u3001 \u8bed\u4e49 \u3001 \u65f6\u5e8f \u4e3a\u4e86\u4f7f\u6570\u636e\u5728\u7f51\u7edc\u4e0a\u4ece\u6e90\u5230\u8fbe\u76ee\u7684\uff0c\u7f51\u7edc\u901a\u4fe1\u7684\u53c2\u4e0e\u65b9\u5fc5\u987b\u9075\u5faa\u76f8\u540c\u7684\u89c4\u5219\uff0c\u8fd9\u5957\u89c4\u5219\u79f0\u4e3a \u534f\u8bae\uff08protocol\uff09 \uff0c\u5b83\u6700\u7ec8\u4f53\u73b0\u4e3a\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u6570\u636e\u5305\u7684\u683c\u5f0f \u534f\u8bae\u5f80\u5f80\u5206\u6210\u51e0\u4e2a\u5c42\u6b21\u8fdb\u884c\u5b9a\u4e49\uff0c\u5206\u5c42\u5b9a\u4e49\u662f\u4e3a\u4e86\u4f7f\u67d0\u4e00\u5c42\u534f\u8bae\u7684\u6539\u53d8\u4e0d\u5f71\u54cd\u5176\u4ed6\u5c42\u6b21\u7684\u534f\u8bae \u5e38\u89c1\u534f\u8bae \u5e94\u7528\u5c42\u534f\u8bae FTP\u534f\u8bae\uff08File Transfer Protocol \u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff09 HTTP\u534f\u8bae\uff08Hyper Text Transfer Protocol \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff09 NFS\uff08Network File System \u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff09 \u4f20\u8f93\u5c42\u534f\u8bae TCP\u534f\u8bae\uff08Transmission Control Protocol \u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff09 UDP\u534f\u8bae\uff08User Datagram Protocol \u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09 \u7f51\u7edc\u5c42\u534f\u8bae IP \u534f\u8bae\uff08Internet Protocol \u56e0\u7279\u7f51\u4e92\u8054\u534f\u8bae\uff09 ICMP \u534f\u8bae\uff08Internet Control Message Protocol \u56e0\u7279\u7f51\u63a7\u5236\u62a5\u6587\u534f\u8bae\uff09 IGMP \u534f\u8bae\uff08Internet Group Management Protocol \u56e0\u7279\u7f51\u7ec4\u7ba1\u7406\u534f\u8bae\uff09\u3002 \u7f51\u7edc\u63a5\u53e3\u5c42\u534f\u8bae ARP\u534f\u8bae\uff08Address Resolution Protocol \u5730\u5740\u89e3\u6790\u534f\u8bae\uff09 RARP\u534f\u8bae\uff08Reverse Address Resolution Protocol \u53cd\u5411\u5730\u5740\u89e3\u6790\u534f\u8bae\uff09 UDP\u534f\u8bae \u6e90\u7aef\u53e3\u53f7\uff1a\u53d1\u9001\u65b9\u7aef\u53e3\u53f7 \u76ee\u7684\u7aef\u53e3\u53f7\uff1a\u63a5\u6536\u65b9\u7aef\u53e3\u53f7 \u957f\u5ea6\uff1aUDP\u7528\u6237\u6570\u636e\u62a5\u7684\u957f\u5ea6\uff0c\u6700\u5c0f\u503c\u662f8\uff08\u4ec5\u6709\u9996\u90e8\uff09 \u6821\u9a8c\u548c\uff1a\u68c0\u6d4bUDP\u7528\u6237\u6570\u636e\u62a5\u5728\u4f20\u8f93\u4e2d\u662f\u5426\u6709\u9519\uff0c\u6709\u9519\u5c31\u4e22\u5f03 TCP\u534f\u8bae \u6e90\u7aef\u53e3\u53f7\uff1a\u53d1\u9001\u65b9\u7aef\u53e3\u53f7 \u76ee\u7684\u7aef\u53e3\u53f7\uff1a\u63a5\u6536\u65b9\u7aef\u53e3\u53f7 \u5e8f\u53f7\uff1a\u672c\u62a5\u6587\u6bb5\u7684\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5e8f\u53f7 \u786e\u8ba4\u53f7\uff1a\u671f\u671b\u6536\u5230\u5bf9\u65b9\u4e0b\u4e00\u4e2a\u62a5\u6587\u6bb5\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5b57\u8282\u7684\u5e8f\u53f7 \u5934\u90e8\u957f\u5ea6\uff08\u6570\u636e\u504f\u79fb\uff09\uff1aTCP \u62a5\u6587\u6bb5\u7684\u6570\u636e\u8d77\u59cb\u5904\u8ddd\u79bb TCP \u62a5\u6587\u6bb5\u7684\u8d77\u59cb\u5904\u6709\u591a\u8fdc\uff0c\u5373\u9996\u90e8\u957f\u5ea6\u3002==\u5355\u4f4d\uff1a32\u4f4d\uff0c\u5373\u4ee5 4 \u5b57\u8282\u4e3a\u8ba1\u7b97\u5355\u4f4d==\uff1f\uff1f\uff1f \u4fdd\u7559\uff1a\u5360 6 \u4f4d\uff0c\u4fdd\u7559\u4e3a\u4eca\u540e\u4f7f\u7528\uff0c\u76ee\u524d\u5e94\u7f6e\u4e3a 0 \u7d27\u6025 URG \uff1a\u6b64\u4f4d\u7f6e 1 \uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548\uff0c\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001 \u786e\u8ba4 ACK \uff1a\u4ec5\u5f53 ACK=1 \u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548\uff0cTCP \u89c4\u5b9a\uff0c\u5728\u8fde\u63a5\u5efa\u7acb\u540e\u6240\u6709\u4f20\u8fbe\u7684\u62a5\u6587\u6bb5\u90fd\u5fc5\u987b\u628a ACK \u7f6e1 \u63a8\u9001 PSH \uff1a\u5f53\u4e24\u4e2a\u5e94\u7528\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u7684\u901a\u4fe1\u65f6\uff0c\u6709\u65f6\u5728\u4e00\u7aef\u7684\u5e94\u7528\u8fdb\u7a0b\u5e0c\u671b\u5728\u952e\u5165\u4e00\u4e2a\u547d\u4ee4\u540e\u7acb\u5373\u5c31\u80fd\u591f\u6536\u5230\u5bf9\u65b9\u7684\u54cd\u5e94\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTCP \u5c31\u53ef\u4ee5\u4f7f\u7528\u63a8\u9001\uff08push\uff09\u64cd\u4f5c\uff0c\u8fd9\u65f6\uff0c\u53d1\u9001\u65b9TCP \u628a PSH \u7f6e 1\uff0c\u5e76\u7acb\u5373\u521b\u5efa\u4e00\u4e2a\u62a5\u6587\u6bb5\u53d1\u9001\u51fa\u53bb\uff0c\u63a5\u6536\u65b9\u6536\u5230 PSH = 1 \u7684\u62a5\u6587\u6bb5\uff0c\u5c31\u5c3d\u5feb\u5730\uff08\u5373\u201c\u63a8\u9001\u201d\u5411\u524d\uff09\u4ea4\u4ed8\u7ed9\u63a5\u6536\u5e94\u7528\u8fdb\u7a0b\uff0c\u800c\u4e0d\u518d\u7b49\u5230\u6574\u4e2a\u7f13\u5b58\u90fd\u586b\u6ee1\u540e\u518d\u5411\u4e0a\u4ea4\u4ed8 \u590d\u4f4d RST \uff1a\u7528\u4e8e\u590d\u4f4d\u76f8\u5e94\u7684 TCP \u8fde\u63a5 \u540c\u6b65 SYN \uff1a\u4ec5\u5728\u4e09\u6b21\u63e1\u624b\u5efa\u7acb TCP \u8fde\u63a5\u65f6\u6709\u6548\u3002\u5f53 SYN = 1 \u800c ACK = 0 \u65f6\uff0c\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\u6bb5\uff0c\u5bf9\u65b9\u82e5\u540c\u610f\u5efa\u7acb\u8fde\u63a5\uff0c\u5219\u5e94\u5728\u76f8\u5e94\u7684\u62a5\u6587\u6bb5\u4e2d\u4f7f\u7528 SYN = 1 \u548c ACK = 1\u3002\u56e0\u6b64\uff0cSYN \u7f6e1 \u5c31\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587 \u7ec8\u6b62 FIN \uff1a\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002\u5f53 FIN = 1 \u65f6\uff0c\u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u65b9\u7684\u6570\u636e\u5df2\u7ecf\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5 \u7a97\u53e3\uff1a\u6307\u53d1\u9001\u672c\u62a5\u6587\u6bb5\u7684\u4e00\u65b9\u7684\u63a5\u6536\u7a97\u53e3\uff08\u800c\u4e0d\u662f\u81ea\u5df1\u7684\u53d1\u9001\u7a97\u53e3\uff09 \u6821\u9a8c\u548c\uff1a\u6821\u9a8c\u548c\u5b57\u6bb5\u68c0\u9a8c\u7684\u8303\u56f4\u5305\u62ec\u9996\u90e8\u548c\u6570\u636e\u4e24\u90e8\u5206\uff0c\u5728\u8ba1\u7b97\u6821\u9a8c\u548c\u65f6\u9700\u8981\u52a0\u4e0a 12 \u5b57\u8282\u7684\u4f2a\u5934\u90e8 \u7d27\u6025\u6307\u9488\uff1a\u4ec5\u5728 URG = 1 \u65f6\u624d\u6709\u610f\u4e49\uff0c\u5b83\u6307\u51fa\u672c\u62a5\u6587\u6bb5\u4e2d\u7684\u7d27\u6025\u6570\u636e\u7684\u5b57\u8282\u6570\uff08\u7d27\u6025\u6570\u636e\u7ed3\u675f\u540e\u5c31\u662f\u666e\u901a\u6570\u636e\uff09\uff0c\u5373\u6307\u51fa\u4e86\u7d27\u6025\u6570\u636e\u7684\u672b\u5c3e\u5728\u62a5\u6587\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6ce8\u610f\uff1a\u5373\u4f7f\u7a97\u53e3\u4e3a\u96f6\u65f6\u4e5f\u53ef\u53d1\u9001\u7d27\u6025\u6570\u636e \u9009\u9879\uff1a\u957f\u5ea6\u53ef\u53d8\uff0c\u6700\u957f\u53ef\u8fbe 40 \u5b57\u8282\uff0c\u5f53\u6ca1\u6709\u4f7f\u7528\u9009\u9879\u65f6\uff0cTCP \u9996\u90e8\u957f\u5ea6\u662f 20 \u5b57\u8282 IP\u534f\u8bae \u7248\u672c\u53f7\uff1aIP \u534f\u8bae\u7684\u7248\u672c\u3002\u901a\u4fe1\u53cc\u65b9\u4f7f\u7528\u8fc7\u7684 IP \u534f\u8bae\u7684\u7248\u672c\u5fc5\u987b\u4e00\u81f4\uff0c\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684 IP \u534f\u8bae\u7248\u672c\u53f7\u4e3a 4\uff08\u5373IPv4) \u5934\u90e8\u957f\u5ea6\uff1a\u5355\u4f4d\u662f 32 \u4f4d\uff084 \u5b57\u8282\uff09 \u670d\u52a1\u7c7b\u578b\uff1a\u4e00\u822c\u4e0d\u9002\u7528\uff0c\u53d6\u503c\u4e3a 0 \u603b\u957f\u5ea6\uff1a\u6307\u9996\u90e8\u52a0\u4e0a\u6570\u636e\u7684\u603b\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282 \u6807\u8bc6\uff08identification\uff09\uff1aIP \u8f6f\u4ef6\u5728\u5b58\u50a8\u5668\u4e2d\u7ef4\u6301\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u6bcf\u4ea7\u751f\u4e00\u4e2a\u6570\u636e\u62a5\uff0c\u8ba1\u6570\u5668\u5c31\u52a0 1\uff0c\u5e76\u5c06\u6b64\u503c\u8d4b\u7ed9\u6807\u8bc6\u5b57\u6bb5 \u6807\u5fd7\uff08flag\uff09\uff1a\u76ee\u524d\u53ea\u6709\u4e24\u4f4d\u6709\u610f\u4e49 \u6807\u5fd7\u5b57\u6bb5\u4e2d\u7684\u6700\u4f4e\u4f4d\u8bb0\u4e3a MF\u3002MF = 1 \u5373\u8868\u793a\u540e\u9762\u201c\u8fd8\u6709\u5206\u7247\u201d\u7684\u6570\u636e\u62a5\u3002MF = 0 \u8868\u793a\u8fd9\u5df2\u662f\u82e5\u5e72\u6570\u636e\u62a5\u7247\u4e2d\u7684\u6700\u540e\u4e00\u4e2a \u6807\u5fd7\u5b57\u6bb5\u4e2d\u95f4\u7684\u4e00\u4f4d\u8bb0\u4e3a DF\uff0c\u610f\u601d\u662f\u201c\u4e0d\u80fd\u5206\u7247\u201d\uff0c\u53ea\u6709\u5f53 DF = 0 \u65f6\u624d\u5141\u8bb8\u5206\u7247 \u7247\u504f\u79fb\uff1a\u6307\u51fa\u8f83\u957f\u7684\u5206\u7ec4\u5728\u5206\u7247\u540e\uff0c\u67d0\u7247\u5728\u6e90\u5206\u7ec4\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f8\u5bf9\u4e8e\u7528\u6237\u6570\u636e\u6bb5\u7684\u8d77\u70b9\uff0c\u8be5\u7247\u4ece\u4f55\u5904\u5f00\u59cb\u3002\u7247\u504f\u79fb\u4ee5 8 \u5b57\u8282\u4e3a\u504f\u79fb\u5355\u4f4d \u751f\u5b58\u65f6\u95f4\uff1aTTL\uff0c\u8868\u660e\u662f\u6570\u636e\u62a5\u5728\u7f51\u7edc\u4e2d\u7684\u5bff\u547d\uff0c\u5373\u4e3a \u8df3\u6570\u9650\u5236 \uff0c\u7531\u53d1\u51fa\u6570\u636e\u62a5\u7684\u6e90\u70b9\u8bbe\u7f6e\u8fd9\u4e2a\u5b57\u6bb5\u3002\u8def\u7531\u5668\u5728\u8f6c\u53d1\u6570\u636e\u4e4b\u524d\u5c31\u628a TTL \u503c\u51cf\u4e00\uff0c\u5f53 TTL \u503c\u51cf\u4e3a\u96f6\u65f6\uff0c\u5c31\u4e22\u5f03\u8fd9\u4e2a\u6570\u636e\u62a5\uff0c\u5e38\u89c1\u4e3a 64\u548c128 \u534f\u8bae\uff1a\u6307\u51fa\u6b64\u6570\u636e\u62a5\u643a\u5e26\u7684\u6570\u636e\u65f6\u4f7f\u7528\u4f55\u79cd\u534f\u8bae\uff0c\u4ee5\u4fbf\u4f7f\u76ee\u7684\u4e3b\u673a\u7684 IP \u5c42\u77e5\u9053\u5e94\u5c06\u6570\u636e\u90e8\u5206\u4e0a\u4ea4\u7ed9\u54ea\u4e2a\u5904\u7406\u8fc7\u7a0b\uff0c\u5e38\u7528\u7684 ICMP(1)\uff0cIGMP(2)\uff0cTCP(6)\uff0cUDP(17)\uff0cIPv6\uff0841\uff09 \u9996\u90e8\u6821\u9a8c\u548c\uff1a\u53ea\u6821\u9a8c\u6570\u636e\u62a5\u7684\u9996\u90e8\uff0c\u4e0d\u5305\u62ec\u6570\u636e\u90e8\u5206 \u6e90\u5730\u5740\uff1a\u53d1\u9001\u65b9 IP \u5730\u5740 \u76ee\u7684\u5730\u5740\uff1a\u63a5\u6536\u65b9 IP \u5730\u5740 \u4ee5\u592a\u7f51\u5e27\u534f\u8bae \u7c7b\u578b 0x800\u8868\u793a IP 0x806\u8868\u793a ARP 0x835\u8868\u793a RARP ARP\u534f\u8bae \u786c\u4ef6\u7c7b\u578b\uff1a1 \u8868\u793a MAC \u5730\u5740 \u534f\u8bae\u7c7b\u578b\uff1a0x800 \u8868\u793a IP \u5730\u5740 \u786c\u4ef6\u5730\u5740\u957f\u5ea6\uff1a6 \u534f\u8bae\u5730\u5740\u957f\u5ea6\uff1a4 \u64cd\u4f5c 1 \u8868\u793a ARP \u8bf7\u6c42 2 \u8868\u793a ARP \u5e94\u7b54 3 \u8868\u793a RARP \u8bf7\u6c42 4 \u8868\u793a RARP \u5e94\u7b54 \u7f51\u7edc\u901a\u4fe1\u6d41\u7a0b \u5c01\u88c5\u4e0e\u5206\u7528 \u53d1\u9001\u7aef \u901a\u8fc7TCP/IP\u4e2d\u6bcf\u4e00\u5c42\u65f6\u9700\u8981\u5c06\u6d88\u606f \u5c01\u88c5 \u5bf9\u5e94\u4fe1\u606f\uff0c\u7136\u540e \u63a5\u6536\u7aef \u901a\u8fc7\u8fc7TCP/IP\u4e2d\u6bcf\u4e00\u5c42\u65f6\u9700\u8981\u5c06\u6d88\u606f \u5206\u7528\uff08\u89e3\u5c01\u88c5\uff09 \u5bf9\u5e94\u4fe1\u606f \u5c01\u88c5 \u4e0a\u5c42\u534f\u8bae\u662f\u5982\u4f55\u4f7f\u7528\u4e0b\u5c42\u534f\u8bae\u63d0\u4f9b\u7684\u670d\u52a1\u7684\u5462\uff1f\u5176\u5b9e\u8fd9\u662f\u901a\u8fc7\u5c01\u88c5\uff08encapsulation\uff09\u5b9e\u73b0\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u5728\u53d1\u9001\u5230\u7269\u7406\u7f51\u7edc\u4e0a\u4e4b\u524d\uff0c\u5c06\u6cbf\u7740\u534f\u8bae\u6808\u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u4f20\u9012\u3002\u6bcf\u5c42\u534f\u8bae\u90fd\u5c06\u5728\u4e0a\u5c42\u6570\u636e\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u81ea\u5df1\u7684\u5934\u90e8\u4fe1\u606f\uff08\u6709\u65f6\u8fd8\u5305\u62ec\u5c3e\u90e8\u4fe1\u606f\uff09\uff0c\u4ee5\u5b9e\u73b0\u8be5\u5c42\u7684\u529f\u80fd\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u79f0\u4e3a\u5c01\u88c5 \u5206\u7528 \u5f53\u5e27\u5230\u8fbe\u76ee\u7684\u4e3b\u673a\u65f6\uff0c\u5c06\u6cbf\u7740\u534f\u8bae\u6808\u81ea\u5e95\u5411\u4e0a\u4f9d\u6b21\u4f20\u9012\u3002\u5404\u5c42\u534f\u8bae\u4f9d\u6b21\u5904\u7406\u5e27\u4e2d\u672c\u5c42\u8d1f\u8d23\u7684\u5934\u90e8\u6570\u636e\uff0c\u4ee5\u83b7\u53d6\u6240\u9700\u7684\u4fe1\u606f\uff0c\u5e76\u6700\u7ec8\u5c06\u5904\u7406\u540e\u7684\u5e27\u4ea4\u7ed9\u76ee\u6807\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5206\u7528\uff08demultiplexing\uff09\u3002\u5206\u7528\u662f\u4f9d\u9760\u5934\u90e8\u4fe1\u606f\u4e2d\u7684\u7c7b\u578b\u5b57\u6bb5\u5b9e\u73b0\u7684 \u5b9e\u4f8b\uff1aQQ\u53d1\u9001\u6d88\u606f\u7b80\u6613\u6d41\u7a0b \u5b58\u5728\u7684\u95ee\u9898\uff1a\u5728\u6570\u636e\u94fe\u8def\u5c42\u5c01\u88c5\u4ee5\u592a\u7f51\u5e27\u65f6\uff0c\u600e\u4e48\u77e5\u9053\u76ee\u6807\u673a\u5668\u7684MAC\u5730\u5740\uff1f=>\u901a\u8fc7 arp\u534f\u8bae ARP\u534f\u8bae arp\u534f\u8bae\u901a\u8fc7IP\u5730\u5740\u627e\u5230MAC\u5730\u5740\uff0c\u901a\u8fc7 \u5e7f\u64adarp\u8bf7\u6c42\u627e\u5230 \uff0c\u5c40\u57df\u7f51\u5185\u6839\u636e\u4fe1\u606f\u89e3\u6790\u5f97\u5230 arp\u5e94\u7b54 rarp\u534f\u8bae\u901a\u8fc7MAC\u5730\u5740\u627eIP\u5730\u5740 socket\u901a\u4fe1 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/02 socket\u901a\u4fe1 socket\u4ecb\u7ecd socket\uff08\u5957\u63a5\u5b57\uff09 \uff0c\u5c31\u662f\u5bf9\u7f51\u7edc\u4e2d \u4e0d\u540c\u4e3b\u673a \u4e0a\u7684\u5e94\u7528\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c \u53cc\u5411\u901a\u4fe1 \u7684\u7aef\u70b9\u7684\u62bd\u8c61 \u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u662f\u7f51\u7edc\u4e0a\u8fdb\u7a0b\u901a\u4fe1\u7684\u4e00\u7aef\uff0c\u63d0\u4f9b\u4e86\u5e94\u7528\u5c42\u8fdb\u7a0b\u5229\u7528\u7f51\u7edc\u534f\u8bae\u4ea4\u6362\u6570\u636e\u7684\u673a\u5236\u3002\u4ece\u6240\u5904\u7684\u5730\u4f4d\u6765\u8bb2\uff0c\u5957\u63a5\u5b57\u4e0a\u8054\u5e94\u7528\u8fdb\u7a0b\uff0c\u4e0b\u8054\u7f51\u7edc\u534f\u8bae\u6808\uff0c\u662f\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u7f51\u7edc\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u662f\u5e94\u7528\u7a0b\u5e8f\u4e0e\u7f51\u7edc\u534f\u8bae\u6839\u8fdb\u884c\u4ea4\u4e92\u7684\u63a5\u53e3 socket \u53ef\u4ee5\u770b\u6210\u662f\u4e24\u4e2a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u5404\u81ea\u901a\u4fe1\u8fde\u63a5\u4e2d\u7684\u7aef\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u6982\u5ff5 \u5b83\u662f\u7f51\u7edc\u73af\u5883\u4e2d\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684 API\uff0c\u4e5f\u662f\u53ef\u4ee5\u88ab\u547d\u540d\u548c\u5bfb\u5740\u7684\u901a\u4fe1\u7aef\u70b9\uff0c\u4f7f\u7528\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u5176\u7c7b\u578b\u548c\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u8fde\u8fdb\u7a0b\u3002\u901a\u4fe1\u65f6\u5176\u4e2d\u4e00\u4e2a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5c06\u8981\u4f20\u8f93\u7684\u4e00\u6bb5\u4fe1\u606f\u5199\u5165\u5b83\u6240\u5728\u4e3b\u673a\u7684 socket \u4e2d\uff0c\u8be5 socket \u901a\u8fc7\u4e0e\u7f51\u7edc\u63a5\u53e3\u5361\uff08NIC\uff09\u76f8\u8fde\u7684\u4f20\u8f93\u4ecb\u8d28\u5c06\u8fd9\u6bb5\u4fe1\u606f\u9001\u5230\u53e6\u5916\u4e00\u53f0\u4e3b\u673a\u7684 socket \u4e2d\uff0c\u4f7f\u5bf9\u65b9\u80fd\u591f\u63a5\u6536\u5230\u8fd9\u6bb5\u4fe1\u606f\u3002socket \u662f\u7531 IP \u5730\u5740\u548c\u7aef\u53e3\u7ed3\u5408\u7684\uff0c\u63d0\u4f9b\u5411\u5e94\u7528\u5c42\u8fdb\u7a0b\u4f20\u9001\u6570\u636e\u5305\u7684\u673a\u5236 socket \u672c\u8eab\u6709\u201c\u63d2\u5ea7\u201d\u7684\u610f\u601d\uff0c\u5728 Linux \u73af\u5883\u4e0b\uff0c\u7528\u4e8e\u8868\u793a\u8fdb\u7a0b\u95f4\u7f51\u7edc\u901a\u4fe1\u7684\u7279\u6b8a\u6587\u4ef6\u7c7b\u578b\u3002 \u672c\u8d28\u4e3a\u5185\u6838\u501f\u52a9\u7f13\u51b2\u533a\u5f62\u6210\u7684\u4f2a\u6587\u4ef6 \u65e2\u7136\u662f\u6587\u4ef6\uff0c\u90a3\u4e48\u7406\u6240\u5f53\u7136\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u5f15\u7528\u5957\u63a5\u5b57\u3002\u4e0e\u7ba1\u9053\u7c7b\u4f3c\u7684\uff0cLinux \u7cfb\u7edf\u5c06\u5176\u5c01\u88c5\u6210\u6587\u4ef6\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u7edf\u4e00\u63a5\u53e3\uff0c\u4f7f\u5f97\u8bfb\u5199\u5957\u63a5\u5b57\u548c\u8bfb\u5199\u6587\u4ef6\u7684\u64cd\u4f5c\u4e00\u81f4\u3002\u533a\u522b\u662f\u7ba1\u9053\u4e3b\u8981\u5e94\u7528\u4e8e\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u800c\u5957\u63a5\u5b57\u591a\u5e94\u7528\u4e8e\u7f51\u7edc\u8fdb\u7a0b\u95f4\u6570\u636e\u7684\u4f20\u9012 \u5957\u63a5\u5b57\u901a\u4fe1\u5206\u4e24\u90e8\u5206 \u670d\u52a1\u5668\u7aef\uff1a\u88ab\u52a8\u63a5\u53d7\u8fde\u63a5\uff0c\u4e00\u822c\u4e0d\u4f1a\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5 \u5ba2\u6237\u7aef\uff1a\u4e3b\u52a8\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5 socket\u662f\u4e00\u5957\u901a\u4fe1\u7684\u63a5\u53e3\uff0cLinux \u548c Windows \u90fd\u6709\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u522b \u5b57\u8282\u5e8f \u7b80\u4ecb \u5b57\u8282\u5e8f \uff0c\u987e\u540d\u601d\u4e49\u5b57\u8282\u7684\u987a\u5e8f\uff0c\u5c31\u662f \u5927\u4e8e\u4e00\u4e2a\u5b57\u8282\u7c7b\u578b\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u653e\u987a\u5e8f (\u4e00\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5f53\u7136\u5c31\u65e0\u9700\u8c08\u987a\u5e8f\u7684\u95ee\u9898\u4e86) \u5b57\u8282\u5e8f\u5206\u4e3a \u5927\u7aef\u5b57\u8282\u5e8f\uff08Big-Endian\uff09 \u548c \u5c0f\u7aef\u5b57\u8282\u5e8f\uff08Little-Endian\uff09 \u5927\u7aef\u5b57\u8282\u5e8f \uff1a\u6307\u4e00\u4e2a\u6574\u6570\u7684\u6700\u9ad8\u4f4d\u5b57\u8282\uff0823 ~ 31 bit\uff09\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5904\uff0c\u4f4e\u4f4d\u5b57\u8282\uff080 ~ 7 bit\uff09\u5b58\u50a8\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5904 \u5c0f\u7aef\u5b57\u8282\u5e8f \uff1a\u6307\u6574\u6570\u7684\u9ad8\u4f4d\u5b57\u8282\u5b58\u50a8\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5904\uff0c\u800c\u4f4e\u4f4d\u5b57\u8282\u5219\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5904 \u73b0\u4ee3 CPU \u7684\u7d2f\u52a0\u5668\u4e00\u6b21\u90fd\u80fd\u88c5\u8f7d\uff08\u81f3\u5c11\uff094 \u5b57\u8282\uff08\u8fd9\u91cc\u8003\u8651 32 \u4f4d\u673a\uff09\uff0c\u5373\u4e00\u4e2a\u6574\u6570\u3002\u90a3\u4e48\u8fd9 4\u5b57\u8282\u5728\u5185\u5b58\u4e2d\u6392\u5217\u7684\u987a\u5e8f\u5c06\u5f71\u54cd\u5b83\u88ab\u7d2f\u52a0\u5668\u88c5\u8f7d\u6210\u7684\u6574\u6570\u7684\u503c\uff0c\u8fd9\u5c31\u662f\u5b57\u8282\u5e8f\u95ee\u9898 \u5728\u5404\u79cd\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u5bf9\u4e8e\u5b57\u8282\u3001\u5b57\u7b49\u7684\u5b58\u50a8\u673a\u5236\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u800c\u5f15\u53d1\u4e86\u8ba1\u7b97\u673a\u901a\u4fe1\u9886\u57df\u4e2d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u5373\u901a\u4fe1\u53cc\u65b9\u4ea4\u6d41\u7684\u4fe1\u606f\u5355\u5143\uff08\u6bd4\u7279\u3001\u5b57\u8282\u3001\u5b57\u3001\u53cc\u5b57\u7b49\u7b49\uff09\u5e94\u8be5\u4ee5\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u8fdb\u884c\u4f20\u9001\u3002\u5982\u679c\u4e0d\u8fbe\u6210\u4e00\u81f4\u7684\u89c4\u5219\uff0c\u901a\u4fe1\u53cc\u65b9\u5c06\u65e0\u6cd5\u8fdb\u884c\u6b63\u786e\u7684\u7f16\u7801/\u8bd1\u7801\u4ece\u800c\u5bfc\u81f4\u901a\u4fe1\u5931\u8d25 \u5b57\u8282\u5e8f\u4e3e\u4f8b \u5927\u7aef\u5b57\u8282\u5e8f \u5c0f\u7aef\u5b57\u8282\u5e8f \u67e5\u770b\u673a\u5668\u5b57\u8282\u5e8f #include <stdio.h> int main() { union{ short value; // \u4e24\u5b57\u8282 char bytes[sizeof(short)]; // \u4e24\u5b57\u8282 }test; test.value = 0x0102; if (test.bytes[0] == 1 && test.bytes[1] == 2) { printf(\"\u5927\u7aef\u673a\u5668\\n\"); } else if (test.bytes[0] == 2 && test.bytes[1] == 1) { printf(\"\u5c0f\u7aef\u673a\u5668\\n\"); } else { printf(\"\u672a\u77e5\\n\"); } return 0; } \u5b57\u8282\u5e8f\u8f6c\u6362\u51fd\u6570 \u5f53\u683c\u5f0f\u5316\u7684\u6570\u636e\u5728\u4e24\u53f0\u4f7f\u7528\u4e0d\u540c\u5b57\u8282\u5e8f\u7684\u4e3b\u673a\u4e4b\u95f4\u76f4\u63a5\u4f20\u9012\u65f6\uff0c\u63a5\u6536\u7aef\u5fc5\u7136\u9519\u8bef\u7684\u89e3\u91ca\u4e4b\u3002\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u662f\uff1a \u53d1\u9001\u7aef\u603b\u662f\u628a\u8981\u53d1\u9001\u7684\u6570\u636e\u8f6c\u6362\u6210\u5927\u7aef\u5b57\u8282\u5e8f\u6570\u636e\u540e\u518d\u53d1\u9001 \uff0c\u800c\u63a5\u6536\u7aef\u77e5\u9053\u5bf9\u65b9\u4f20\u9001\u8fc7\u6765\u7684\u6570\u636e\u603b\u662f\u91c7\u7528\u5927\u7aef\u5b57\u8282\u5e8f\uff0c\u6240\u4ee5\u63a5\u6536\u7aef\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u91c7\u7528\u7684\u5b57\u8282\u5e8f\u51b3\u5b9a\u662f\u5426\u5bf9\u63a5\u6536\u5230\u7684\u6570\u636e\u8fdb\u884c\u8f6c\u6362\uff08\u5c0f\u7aef\u673a\u8f6c\u6362\uff0c\u5927\u7aef\u673a\u4e0d\u8f6c\u6362\uff09 \u7f51\u7edc\u5b57\u8282\u987a\u5e8f \u662f TCP/IP \u4e2d\u89c4\u5b9a\u597d\u7684\u4e00\u79cd\u6570\u636e\u8868\u793a\u683c\u5f0f\uff0c\u5b83\u4e0e\u5177\u4f53\u7684 CPU \u7c7b\u578b\u3001\u64cd\u4f5c\u7cfb\u7edf\u7b49\u65e0\u5173\uff0c\u4ece\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u5728\u4e0d\u540c\u4e3b\u673a\u4e4b\u95f4\u4f20\u8f93\u65f6\u80fd\u591f\u88ab\u6b63\u786e\u89e3\u91ca\uff0c\u7f51\u7edc\u5b57\u8282\u987a\u5e8f\u91c7\u7528\u5927\u7aef\u6392\u5e8f\u65b9\u5f0f BSD Socket\u63d0\u4f9b\u4e86\u5c01\u88c5\u597d\u7684\u8f6c\u6362\u63a5\u53e3\uff0c\u65b9\u4fbf\u7a0b\u5e8f\u5458\u4f7f\u7528 \u4ece\u4e3b\u673a\u5b57\u8282\u5e8f\u5230\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u8f6c\u6362\u51fd\u6570\uff1a htons \u3001 htonl \u4ece\u7f51\u7edc\u5b57\u8282\u5e8f\u5230\u4e3b\u673a\u5b57\u8282\u5e8f\u7684\u8f6c\u6362\u51fd\u6570\uff1a ntohs \u3001 ntohl ```c h - host \u4e3b\u673a\uff0c\u4e3b\u673a\u5b57\u8282\u5e8f to - \u8f6c\u6362\u6210\u4ec0\u4e48 n - network \u7f51\u7edc\u5b57\u8282\u5e8f s - short unsigned short l - long unsigned int #include // \u8f6c\u6362\u7aef\u53e3 uint16_t htons(uint16_t hostshort); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f uint16_t ntohs(uint16_t netshort); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f // \u8f6cIP uint32_t htonl(uint32_t hostlong); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f uint32_t ntohl(uint32_t netlong); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f ``` \u5b9e\u4f8b\uff1a\u6a21\u62df\u4e3b\u673a\u4e0e\u7f51\u7edcIP\u53ca\u7aef\u53e3\u8f6c\u6362\uff08\u672c\u673a\u4e3a\u5c0f\u7aef\u673a\u5668\uff09 ```c #include #include int main() { // \u4e3b\u673a\u5b57\u8282\u5e8f\u8f6c\u7f51\u7edc\u5b57\u8282\u5e8f // IP\u8f6c\u6362 char ip1[4] = {192, 168, 1, 1}; int num1 = (int )ip1; int convet1 = htonl(num1); unsigned char p1 = (char )&convet1; for (int i = 0; i < 4; i++) { printf(\"%d \", *(p1 + i)); } printf(\"\\n\"); // \u7aef\u53e3\u8f6c\u6362 unsigned short port1 = 0x0102; unsigned short conv_port1 = htons(port1); printf(\"port1: %x\\n\", port1); printf(\"conv_port1: %x\\n\", conv_port1); printf(\"====================\\n\"); // \u7f51\u7edc\u5b57\u8282\u5e8f\u8f6c\u4e3b\u673a\u5b57\u8282\u5e8f // IP\u8f6c\u6362 char ip2[4] = {2, 1, 168, 192}; int num2 = *(int*)ip2; int convet2 = ntohl(num2); unsigned char *p2 = (char*)&convet2; for (int i = 0; i < 4; i++) { printf(\"%d \", *(p2 + i)); } printf(\"\\n\"); // \u7aef\u53e3\u8f6c\u6362 unsigned short port2 = 0x0201; unsigned short conv_port2 = htons(port2); printf(\"port2: %x\\n\", port2); printf(\"conv_port2: %x\\n\", conv_port2); return 0; } ``` socket\u5730\u5740 \u7b80\u4ecb socket\u5730\u5740\u5176\u5b9e\u662f\u4e00\u4e2a \u7ed3\u6784\u4f53 \uff0c \u5c01\u88c5\u7aef\u53e3\u53f7\u548cIP\u7b49\u4fe1\u606f \u540e\u9762\u7684socket\u76f8\u5173\u7684api\u4e2d\u9700\u8981\u4f7f\u7528\u5230\u8fd9\u4e2a socket\u5730\u5740 \u901a\u7528 socket \u5730\u5740 socket \u7f51\u7edc\u7f16\u7a0b\u63a5\u53e3\u4e2d\u8868\u793a socket \u5730\u5740\u7684\u662f\u7ed3\u6784\u4f53 sockaddr \uff0c\u5176\u5b9a\u4e49\u5982\u4e0b ```c #include struct sockaddr { sa_family_t sa_family; char sa_data[14]; }; typedef unsigned short int sa_family_t; ``` sa_family sa_family \u6210\u5458\u662f\u5730\u5740\u65cf\u7c7b\u578b\uff08 sa_family_t \uff09\u7684\u53d8\u91cf \u5730\u5740\u65cf\u7c7b\u578b \u901a\u5e38\u4e0e \u534f\u8bae\u65cf\u7c7b\u578b \u5bf9\u5e94 \u5b8f PF_* \u548c AF_* \u90fd\u5b9a\u4e49\u5728 bits/socket.h \u5934\u6587\u4ef6\u4e2d\uff0c\u4e14\u540e\u8005\u4e0e\u524d\u8005\u6709\u5b8c\u5168\u76f8\u540c\u7684\u503c\uff0c\u6240\u4ee5\u4e8c\u8005\u901a\u5e38\u6df7\u7528 \u534f\u8bae\u65cf \u5730\u5740\u65cf \u63cf\u8ff0 PF_UNIX AF_UNIX UNIX\u672c\u5730\u57df\u534f\u8bae\u65cf PF_INET AF_INET TCP/IPv4\u534f\u8bae\u65cf PF_INET6 AF_INET6 TCP/IPv6\u534f\u8bae\u65cf sa_data sa_data \u6210\u5458\u7528\u4e8e\u5b58\u653e socket \u5730\u5740\u503c\uff0c\u4e0d\u540c\u7684\u534f\u8bae\u65cf\u7684\u5730\u5740\u503c\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u548c\u957f\u5ea6 \u534f\u8bae\u65cf \u5730\u5740\u503c\u542b\u4e49\u548c\u957f\u5ea6 PF_UNIX \u6587\u4ef6\u7684\u8def\u5f84\u540d\uff0c\u957f\u5ea6\u53ef\u8fbe\u5230108\u5b57\u8282 PF_INET 16 bit \u7aef\u53e3\u53f7\u548c 32 bit IPv4 \u5730\u5740\uff0c\u5171 6 \u5b57\u8282 PF_INET6 16 bit \u7aef\u53e3\u53f7\uff0c32 bit \u6d41\u6807\u8bc6\uff0c128 bit IPv6 \u5730\u5740\uff0c32 bit \u8303\u56f4 ID\uff0c\u5171 26 \u5b57\u8282 \u7531\u4e0a\u8868\u53ef\u77e5\uff0c14 \u5b57\u8282\u7684 sa_data \u6839\u672c\u65e0\u6cd5\u5bb9\u7eb3\u591a\u6570\u534f\u8bae\u65cf\u7684\u5730\u5740\u503c\u3002\u56e0\u6b64\uff0cLinux \u5b9a\u4e49\u4e86\u4e0b\u9762\u8fd9\u4e2a\u65b0\u7684\u901a\u7528\u7684 socket \u5730\u5740\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u8db3\u591f\u5927\u7684\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e\u5730\u5740\u503c\uff0c\u800c\u4e14\u662f\u5185\u5b58\u5bf9\u9f50\u7684 ```c include struct sockaddr_storage { sa_family_t sa_family; unsigned long int __ss_align; char __ss_padding[ 128 - sizeof(__ss_align) ]; }; typedef unsigned short int sa_family_t; ``` \u4e13\u7528socket\u5730\u5740 \u7b80\u4ecb \u5f88\u591a\u7f51\u7edc\u7f16\u7a0b\u51fd\u6570\u8bde\u751f\u65e9\u4e8e IPv4 \u534f\u8bae\uff0c\u90a3\u65f6\u5019\u90fd\u4f7f\u7528\u7684\u662f struct sockaddr \u7ed3\u6784\u4f53\uff0c\u4e3a\u4e86\u5411\u524d\u517c\u5bb9\uff0c\u73b0\u5728 sockaddr \u9000\u5316\u6210\u4e86\uff08void *\uff09\u7684\u4f5c\u7528\uff0c\u4f20\u9012\u4e00\u4e2a\u5730\u5740\u7ed9\u51fd\u6570\uff0c\u81f3\u4e8e\u8fd9\u4e2a\u51fd\u6570\u662f sockaddr_in \u8fd8\u662f sockaddr_in6 \uff0c\u7531\u5730\u5740\u65cf\u786e\u5b9a\uff0c\u7136\u540e\u51fd\u6570\u5185\u90e8\u518d\u5f3a\u5236\u7c7b\u578b\u8f6c\u5316\u4e3a\u6240\u9700\u7684\u5730\u5740\u7c7b\u578b \u4e0d\u540csocket\u5730\u5740\u5bf9\u6bd4\u56fe \u6240\u6709\u4e13\u7528 socket \u5730\u5740\uff08\u4ee5\u53ca sockaddr_storage\uff09\u7c7b\u578b\u7684\u53d8\u91cf\u5728\u5b9e\u9645\u4f7f\u7528\u65f6\u90fd\u9700\u8981\u8f6c\u5316\u4e3a\u901a\u7528 socket \u5730\u5740\u7c7b\u578b sockaddr\uff08\u5f3a\u5236\u8f6c\u5316\u5373\u53ef\uff09\uff0c\u56e0\u4e3a\u6240\u6709 socket \u7f16\u7a0b\u63a5\u53e3\u4f7f\u7528\u7684\u5730\u5740\u53c2\u6570\u7c7b\u578b\u90fd\u662f sockaddr UNIX \u672c\u5730\u57df\u534f\u8bae\u65cf #include <sys/un.h> struct sockaddr_un { sa_family_t sin_family; char sun_path[108]; }; TCP/IP\u534f\u8bae\u65cf // IPV4 #include <netinet/in.h> struct sockaddr_in { sa_family_t sin_family; /* __SOCKADDR_COMMON(sin_) */ in_port_t sin_port; /* Port number. */ struct in_addr sin_addr; /* Internet address. */ /* Pad to size of `struct sockaddr'. */ unsigned char sin_zero[sizeof (struct sockaddr) - __SOCKADDR_COMMON_SIZE - sizeof (in_port_t) - sizeof (struct in_addr)]; }; struct in_addr { in_addr_t s_addr; }; // IPV6 struct sockaddr_in6 { sa_family_t sin6_family; in_port_t sin6_port; /* Transport layer port # */ uint32_t sin6_flowinfo; /* IPv6 flow information */ struct in6_addr sin6_addr; /* IPv6 address */ uint32_t sin6_scope_id; /* IPv6 scope-id */ }; // \u76f8\u5173\u5b9a\u4e49 typedef unsigned short uint16_t; typedef unsigned int uint32_t; typedef uint16_t in_port_t; typedef uint32_t in_addr_t; #define __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int)) IP\u5730\u5740\u8f6c\u6362 \u70b9\u5206\u5341\u8fdb\u5236 IP\u5730\u5740\u4e0e \u7f51\u7edc\u5b57\u8282\u5e8f\u6574\u6570 IP\u5730\u5740\u76f8\u4e92\u8f6c\u6362 \u901a\u5e38\uff0c\u4eba\u4eec\u4e60\u60ef\u7528\u53ef\u8bfb\u6027\u597d\u7684\u5b57\u7b26\u4e32\u6765\u8868\u793a IP \u5730\u5740\uff0c\u6bd4\u5982\u7528\u70b9\u5206\u5341\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a IPv4 \u5730\u5740\uff0c\u4ee5\u53ca\u7528\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a IPv6 \u5730\u5740\u3002\u4f46\u7f16\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u5148\u628a\u5b83\u4eec\u8f6c\u5316\u4e3a\u6574\u6570\uff08\u4e8c\u8fdb\u5236\u6570\uff09\u65b9\u80fd\u4f7f\u7528\u3002\u800c\u8bb0\u5f55\u65e5\u5fd7\u65f6\u5219\u76f8\u53cd\uff0c\u6211\u4eec\u8981\u628a\u6574\u6570\u8868\u793a\u7684 IP \u5730\u5740\u8f6c\u5316\u4e3a\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32 \u65e7\u7248\uff08\u5df2\u5f03\u7528\uff09\uff1a\u53ea\u9002\u7528\u4e8eIPV4\u95f4\u7684\u8f6c\u6362 c #include <arpa/inet.h> in_addr_t inet_addr(const char *cp); int inet_aton(const char *cp, struct in_addr *inp); char *inet_ntoa(struct in_addr in); \u65b0\u7248\uff1a\u540c\u65f6\u9002\u7528\u4e8eIPV4\u548cIPV6 \u5b57\u6bcd\u542b\u4e49 p \uff1a\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32 n \uff1a\u8868\u793anetwork\uff0c\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570 int inet_pton(int af, const char *src, void *dst); \u4f7f\u7528 man inet_pton \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5c06\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5730\u5740\u5b57\u7b26\u4e32\uff0c\u8f6c\u6362\u6210\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570 \u53c2\u6570 af \uff1a\u5730\u5740\u65cf IPV4\uff1a AF_INET IPV6\uff1a AF_INET6(IPV6) src \uff1a\u9700\u8981\u8f6c\u6362\u7684\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32 dst \uff1a\u8f6c\u6362\u540e\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u4e2a\u91cc\u9762 \u8fd4\u56de\u503c 1\uff1a\u6210\u529f 0\uff1a\u6e90IP\u5730\u5740\u6709\u8bef -1\uff1a\u5730\u5740\u65cf\u5305\u542b\u4e0d\u53ef\u7528\u7684\u5730\u5740\u534f\u8bae const char *inet_ntop(int af, const void *src, char *dst, socklen_t size); \u4f7f\u7528 man inet_ntop \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5c06\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570\uff0c\u8f6c\u6362\u6210\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5730\u5740\u5b57\u7b26\u4e32 \u53c2\u6570 af \uff1a\u5730\u5740\u65cf IPV4\uff1a AF_INET IPV6\uff1a AF_INET6(IPV6) src \uff1a\u8981\u8f6c\u6362\u7684ip\u7684\u6574\u6570\u7684\u5730\u5740 dst \uff1a\u8f6c\u6362\u6210IP\u5730\u5740\u5b57\u7b26\u4e32\u4fdd\u5b58\u7684\u5730\u65b9 size \uff1a\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u5927\u5c0f\uff08\u6570\u7ec4\u7684\u5927\u5c0f\uff09 \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u6570\u636e\u7684\u5730\u5740\uff08\u5b57\u7b26\u4e32\uff09\uff0c\u548c dst \u662f\u4e00\u6837\u7684 ```c #include #include int main() { // \u521b\u5efa\u4e00\u4e2aip\u5b57\u7b26\u4e32,\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5730\u5740\u5b57\u7b26\u4e32 char buf[] = \"192.168.1.4\"; unsigned int num = 0; // \u5c06\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570 inet_pton(AF_INET, buf, &num); unsigned char * p = (unsigned char *)&num; printf(\"%d %d %d %d\\n\", *p, *(p+1), *(p+2), *(p+3)); // \u5c06\u7f51\u7edc\u5b57\u8282\u5e8f\u7684IP\u6574\u6570\u8f6c\u6362\u6210\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32 char ip[16] = \"\"; const char * str = inet_ntop(AF_INET, &num, ip, 16); printf(\"str : %s\\n\", str); printf(\"ip : %s\\n\", ip); return 0; } ``` TCP\u4e0eUDP\u533a\u522b \u7b80\u4ecb UDP \uff1a\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff0c\u9762\u5411\u65e0\u8fde\u63a5\uff0c\u53ef\u4ee5\u5355\u64ad\uff0c\u591a\u64ad\uff0c\u5e7f\u64ad\uff0c \u9762\u5411\u6570\u636e\u62a5\uff0c\u4e0d\u53ef\u9760 TCP \uff1a\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff0c\u9762\u5411\u8fde\u63a5\u7684\uff0c\u53ef\u9760\u7684\uff0c\u57fa\u4e8e\u5b57\u8282\u6d41\uff0c\u4ec5\u652f\u6301\u5355\u64ad\u4f20\u8f93 \u5bf9\u6bd4 UDP TCP \u662f\u5426\u521b\u5efa\u8fde\u63a5 \u65e0\u8fde\u63a5 \u9762\u5411\u8fde\u63a5 \u662f\u5426\u53ef\u9760 \u4e0d\u53ef\u9760 \u53ef\u9760\u7684 \u8fde\u63a5\u7684\u5bf9\u8c61\u4e2a\u6570 \u4e00\u5bf9\u4e00\u3001\u4e00\u5bf9\u591a\u3001\u591a\u5bf9\u4e00\u3001\u591a\u5bf9\u591a \u4ec5\u652f\u6301\u4e00\u5bf9\u4e00 \u4f20\u8f93\u7684\u65b9\u5f0f \u9762\u5411\u6570\u636e\u62a5 \u9762\u5411\u5b57\u8282\u6d41 \u9996\u90e8\u5f00\u9500 8\u4e2a\u5b57\u8282 \u6700\u5c1120\u4e2a\u5b57\u8282 \u9002\u7528\u573a\u666f \u5b9e\u65f6\u5e94\u7528\uff08\u89c6\u9891\u4f1a\u8bae\uff0c\u76f4\u64ad\uff09 \u53ef\u9760\u6027\u9ad8\u7684\u5e94\u7528\uff08\u6587\u4ef6\u4f20\u8f93\uff09 TCP\u901a\u4fe1\u6d41\u7a0b \u6d41\u7a0b\u56fe \u670d\u52a1\u5668\u7aef\uff08\u88ab\u52a8\u63a5\u6536\u8fde\u63a5\uff09 \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57 \u76d1\u542c\uff1a\u76d1\u542c\u6709\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 \u5957\u63a5\u5b57\uff1a\u8fd9\u4e2a\u5957\u63a5\u5b57\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5c06\u8fd9\u4e2a \u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26 \u548c \u672c\u5730\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a \uff08IP\u548c\u7aef\u53e3\u5c31\u662f\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f\uff09 \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u7684\u65f6\u5019\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2aIP\u548c\u7aef\u53e3 \u8bbe\u7f6e\u76d1\u542c\uff0c \u76d1\u542c\u7684fd \u5f00\u59cb\u5de5\u4f5c \u963b\u585e\u7b49\u5f85\uff0c\u5f53\u6709\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\uff0c\u89e3\u9664\u963b\u585e\uff0c\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a \u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5957\u63a5\u5b57(fd) \u901a\u4fe1 \u63a5\u6536\u6570\u636e \u53d1\u9001\u6570\u636e \u901a\u4fe1\u7ed3\u675f\uff0c\u65ad\u5f00\u8fde\u63a5 \u5ba2\u6237\u7aef \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57(fd) \u8fde\u63a5\u670d\u52a1\u5668\uff0c\u9700\u8981\u6307\u5b9a\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684 IP \u548c \u7aef\u53e3 \u8fde\u63a5\u6210\u529f\u4e86\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u548c\u670d\u52a1\u5668\u901a\u4fe1 \u63a5\u6536\u6570\u636e \u53d1\u9001\u6570\u636e \u901a\u4fe1\u7ed3\u675f\uff0c\u65ad\u5f00\u8fde\u63a5 \u5957\u63a5\u5b57\u51fd\u6570 \u5305\u542b\u5728\u4e0b\u5217\u5934\u6587\u4ef6\u4e2d c #include <sys/types.h> #include <sys/socket.h> #include <arpa/inet.h> // \u5305\u542b\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0a\u9762\u4e24\u4e2a\u5c31\u53ef\u4ee5\u7701\u7565(\u56e0\u4e3a\u5df2\u7ecf\u5305\u542b\u4e0a\u9762\u4e24\u4e2a) \u51fd\u6570\u4e00\u89c8 c int socket(int domain, int type, int protocol); int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); int listen(int sockfd, int backlog); int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen); int socket(int domain, int type, int protocol); \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 \u53c2\u6570\uff1a domain \uff1a\u534f\u8bae\u65cf(\u5e38\u7528\u5982\u4e0b) AF_INET \uff1a ipv4 AF_INET 6 \uff1a ipv6 AF_UNIX , AF_LOCAL \uff1a\u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\uff08\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09 type \uff1a\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\u7c7b\u578b SOCK_STREAM : \u6d41\u5f0f\u534f\u8bae SOCK_DGRAM : \u62a5\u5f0f\u534f\u8bae protocol \uff1a\u5177\u4f53\u7684\u4e00\u4e2a\u534f\u8bae\uff0c\u4e00\u822c\u51990\uff0c\u7528\u4e8e\u6307\u5b9atype\u53c2\u6570\u7684\u9ed8\u8ba4\u534f\u8bae\u7c7b\u578b SOCK_STREAM : \u6d41\u5f0f\u534f\u8bae\u9ed8\u8ba4\u4f7f\u7528 TCP SOCK_DGRAM : \u62a5\u5f0f\u534f\u8bae\u9ed8\u8ba4\u4f7f\u7528 UDP \u8fd4\u56de\u503c \u6210\u529f\uff1a\u8fd4\u56de\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u64cd\u4f5c\u7684\u5c31\u662f\u5185\u6838\u7f13\u51b2\u533a \u5931\u8d25\uff1a-1 int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); \u529f\u80fd\uff1a\u7ed1\u5b9a\uff0c\u5c06fd \u548c\u672c\u5730\u7684IP\u548c\u7aef\u53e3\u8fdb\u884c\u7ed1\u5b9a \u53c2\u6570\uff1a sockfd \uff1a\u901a\u8fc7socket\u51fd\u6570\u5f97\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 addr \uff1a\u9700\u8981\u7ed1\u5b9a\u7684socket\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u5c01\u88c5\u4e86 \u672c\u5730\u7684ip\u548c\u7aef\u53e3\u53f7\u7684\u4fe1\u606f addrlen \uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed3\u6784\u4f53\u5360\u7684\u5185\u5b58\u5927\u5c0f \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff1a0\uff0c\u5931\u8d25\uff1a-1 int listen(int sockfd, int backlog); \u529f\u80fd\uff1a\u76d1\u542c\u8fd9\u4e2asocket\u4e0a\u7684\u8fde\u63a5 \u53c2\u6570\uff1a sockfd \uff1a\u901a\u8fc7socket()\u51fd\u6570\u5f97\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 backlog \uff1a\u672a\u8fde\u63a5\u7684\u548c\u5df2\u7ecf\u8fde\u63a5\u7684\u548c\u7684\u6700\u5927\u503c\uff0c\u53ef\u7528 cat /proc/sys/net/core/somaxconn \u67e5\u770bLinux\u8bbe\u7f6e\u503c\uff0c==\u4e00\u822c\u6307\u5b9a5\u5c31\u53ef\u4ee5\uff08\u89c6\u9891\u8bf4\u7684\uff0c\u662f\u5426\u6b63\u786e\u5f85\u9a8c\u8bc1\uff09== \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff1a0\uff0c\u5931\u8d25\uff1a-1 int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); \u529f\u80fd\uff1a\u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u9ed8\u8ba4\u662f\u4e00\u4e2a\u963b\u585e\u7684\u51fd\u6570\uff0c\u963b\u585e\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 \u53c2\u6570\uff1a sockfd : \u7528\u4e8e\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 addr : \u4f20\u51fa\u53c2\u6570\uff0c\u8bb0\u5f55\u4e86\u8fde\u63a5\u6210\u529f\u540e \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f \uff08ip\uff0cport\uff09 addrlen : \u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u7684\u5185\u5b58\u5927\u5c0f \u8fd4\u56de\u503c\uff1a \u6210\u529f\uff1a\u7528\u4e8e\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5931\u8d25\uff1a-1 int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen); \u529f\u80fd\uff1a \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668 \u53c2\u6570\uff1a sockfd : \u7528\u4e8e \u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 addr : \u5ba2\u6237\u7aef\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f addrlen : \u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u7684\u5185\u5b58\u5927\u5c0f \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c \u5931\u8d25 -1 \u5176\u4ed6\u8bfb\u5199\u51fd\u6570\uff1a c ssize_t write(int fd, const void *buf, size_t count); // \u5199\u6570\u636e ssize_t read(int fd, void *buf, size_t count); // \u8bfb\u6570\u636e \u5b9e\u4f8b\uff1aTCP\u901a\u4fe1 \u670d\u52a1\u5668\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // 5. \u5f00\u59cb\u901a\u4fe1 // \u670d\u52a1\u7aef\u5148\u63a5\u6536\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u518d\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e // \u63a5\u6536\u6570\u636e char recv_buf[1024] = {0}; while (1) { ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); break; } // \u53d1\u9001\u6570\u636e char *send_buf = \"hello, i am server\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); } // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 close(connfd); close(listenfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); sleep(1); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u670d\u52a1\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"server closed...\\n\"); break; } } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } \u901a\u4fe1\u6548\u679c TCP\u4e09\u6b21\u63e1\u624b\u2014\u2014\u5efa\u7acb\u8fde\u63a5 \u6b64\u8282\u9700\u8981\u7ed3\u5408 \u7f51\u7edc\u57fa\u7840->\u534f\u8bae->TCP\u534f\u8bae \u4e00\u8d77\u770b \u7b80\u6613\u56fe\u793a \u63e1\u624b\u6d41\u7a0b \u7b2c\u4e00\u6b21\u63e1\u624b \u5ba2\u6237\u7aef\u5c06SYN\u6807\u5fd7\u4f4d\u7f6e\u4e3a1 \u751f\u6210\u4e00\u4e2a\u968f\u673a\u768432\u4f4d\u7684\u5e8f\u53f7seq=J \uff0c \u8fd9\u4e2a\u5e8f\u53f7\u540e\u8fb9\u662f\u53ef\u4ee5\u643a\u5e26\u6570\u636e\uff08\u6570\u636e\u7684\u5927\u5c0f\uff09 \u7b2c\u4e8c\u6b21\u63e1\u624b \u670d\u52a1\u5668\u7aef\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff1a ACK=1 \u670d\u52a1\u5668\u4f1a\u56de\u53d1\u4e00\u4e2a\u786e\u8ba4\u5e8f\u53f7\uff1a ack=\u5ba2\u6237\u7aef\u7684\u5e8f\u53f7 + \u6570\u636e\u957f\u5ea6 + SYN/FIN(\u6309\u4e00\u4e2a\u5b57\u8282\u7b97) \u670d\u52a1\u5668\u7aef\u4f1a\u5411\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff1a SYN=1 \u670d\u52a1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5e8f\u53f7\uff1aseq = K \u7b2c\u4e09\u6b21\u63e1\u624b \u5ba2\u6237\u7aef\u5e94\u7b54\u670d\u52a1\u5668\u7684\u8fde\u63a5\u8bf7\u6c42\uff1aACK=1 \u5ba2\u6237\u7aef\u56de\u590d\u6536\u5230\u4e86\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff1aack=\u670d\u52a1\u7aef\u7684\u5e8f\u53f7 + \u6570\u636e\u957f\u5ea6 + SYN/FIN(\u6309\u4e00\u4e2a\u5b57\u8282\u7b97) \u793a\u4f8b\uff1a\u643a\u5e26\u6570\u636e\u901a\u4fe1\u6d41\u7a0b \u62ec\u53f7\u5185\u6570\u5b57\u4ee3\u8868\u643a\u5e26\u6570\u636e\u5927\u5c0f TCP\u6ed1\u52a8\u7a97\u53e3\u2014\u2014\u6d41\u91cf\u63a7\u5236 \u7b80\u4ecb \u6ed1\u52a8\u7a97\u53e3 \u662f TCP \u4e2d\u5b9e\u73b0\u8bf8\u5982 ACK \u786e\u8ba4\u3001\u6d41\u91cf\u63a7\u5236\u3001\u62e5\u585e\u63a7\u5236\u7684\u627f\u8f7d\u7ed3\u6784 TCP \u4e2d\u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u6765\u8fdb\u884c\u4f20\u8f93\u63a7\u5236\uff0c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u610f\u5473\u7740 \u63a5\u6536\u65b9\u8fd8\u6709\u591a\u5927\u7684\u7f13\u51b2\u533a\u53ef\u4ee5\u7528\u4e8e\u63a5\u6536\u6570\u636e \u3002 \u53d1\u9001\u65b9\u53ef\u4ee5\u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u5e94\u8be5\u53d1\u9001\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e \u3002\u5f53\u6ed1\u52a8\u7a97\u53e3\u4e3a 0\u65f6\uff0c\u53d1\u9001\u65b9\u4e00\u822c\u4e0d\u80fd\u518d\u53d1\u9001\u6570\u636e\u62a5 \u6ed1\u52a8\u7a97\u53e3\uff08Sliding window\uff09\u662f\u4e00\u79cd\u6d41\u91cf\u63a7\u5236\u6280\u672f\u3002\u65e9\u671f\u7684\u7f51\u7edc\u901a\u4fe1\u4e2d\uff0c\u901a\u4fe1\u53cc\u65b9\u4e0d\u4f1a\u8003\u8651\u7f51\u7edc\u7684\u62e5\u6324\u60c5\u51b5\u76f4\u63a5\u53d1\u9001\u6570\u636e\u3002\u7531\u4e8e\u5927\u5bb6\u4e0d\u77e5\u9053\u7f51\u7edc\u62e5\u585e\u72b6\u51b5\uff0c\u540c\u65f6\u53d1\u9001\u6570\u636e\uff0c\u5bfc\u81f4\u4e2d\u95f4\u8282\u70b9\u963b\u585e\u6389\u5305\uff0c\u8c01\u4e5f\u53d1\u4e0d\u4e86\u6570\u636e\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u6765\u89e3\u51b3\u6b64\u95ee\u9898 \u6ed1\u52a8\u7a97\u53e3\u534f\u8bae\u662f\u7528\u6765\u6539\u5584\u541e\u5410\u91cf\u7684\u4e00\u79cd\u6280\u672f\uff0c\u5373\u5bb9\u8bb8\u53d1\u9001\u65b9\u5728\u63a5\u6536\u4efb\u4f55\u5e94\u7b54\u4e4b\u524d\u4f20\u9001\u9644\u52a0\u7684\u5305\u3002\u63a5\u6536\u65b9\u544a\u8bc9\u53d1\u9001\u65b9\u5728\u67d0\u4e00\u65f6\u523b\u80fd\u9001\u591a\u5c11\u5305\uff08\u79f0\u7a97\u53e3\u5c3a\u5bf8\uff09 \u6ed1\u52a8\u7a97\u53e3\u4e0e\u7f13\u51b2\u533a \u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u7406\u89e3\u4e3a\u7f13\u51b2\u533a\u7684\u5927\u5c0f \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4f1a\u968f\u7740\u53d1\u9001\u6570\u636e\u548c\u63a5\u6536\u6570\u636e\u800c\u53d8\u5316\uff0c\u901a\u4fe1\u7684\u53cc\u65b9\u90fd\u6709\u53d1\u9001\u7f13\u51b2\u533a\u548c\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a \u56fe\u793a\u8bf4\u660e\uff1a\u5355\u5411\u53d1\u9001\u6570\u636e\uff08\u53d1\u9001\u7aef->\u63a5\u6536\u7aef\uff09 \u53d1\u9001\u65b9\u7684\u7f13\u51b2\u533a \u767d\u8272\u683c\u5b50\uff1a\u7a7a\u95f2\u7684\u7a7a\u95f4 \u7070\u8272\u683c\u5b50\uff1a\u6570\u636e\u5df2\u7ecf\u88ab\u53d1\u9001\u51fa\u53bb\u4e86\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u88ab\u63a5\u6536 \u7d2b\u8272\u683c\u5b50\uff1a\u8fd8\u6ca1\u6709\u53d1\u9001\u51fa\u53bb\u7684\u6570\u636e \u63a5\u6536\u65b9\u7684\u7f13\u51b2\u533a \u767d\u8272\u683c\u5b50\uff1a\u7a7a\u95f2\u7684\u7a7a\u95f4 \u7d2b\u8272\u683c\u5b50\uff1a\u5df2\u7ecf\u63a5\u6536\u5230\u7684\u6570\u636e TCP\u56db\u6b21\u6325\u624b\u2014\u2014\u65ad\u5f00\u8fde\u63a5 \u7b80\u6613\u56fe\u793a \u6325\u624b\u6d41\u7a0b \u56db\u6b21\u6325\u624b\u53d1\u751f\u5728\u65ad\u5f00\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u5728\u7a0b\u5e8f\u4e2d\u5f53\u8c03\u7528\u4e86 close() \u4f1a\u4f7f\u7528TCP\u534f\u8bae\u8fdb\u884c\u56db\u6b21\u6325\u624b \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u90fd\u53ef\u4ee5\u4e3b\u52a8\u53d1\u8d77\u65ad\u5f00\u8fde\u63a5\uff0c\u8c01\u5148\u8c03\u7528 close() \u8c01\u5c31\u662f\u53d1\u8d77\u65b9 \u56e0\u4e3a\u5728TCP\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u7684\u7684\u8fde\u63a5\u662f\u53cc\u5411\u7684\uff0c\u5728\u65ad\u5f00\u7684\u65f6\u5019\u9700\u8981\u53cc\u5411\u65ad\u5f00 \u5b9e\u4f8b\uff1a\u5b8c\u6574\u7684TCP\u901a\u4fe1 \u6ce8\u89e3 \u56fe\u4e2d MSS \u8868\u793aMaximum Segment Size(\u4e00\u6761\u6570\u636e\u7684\u6700\u5927\u7684\u6570\u636e\u91cf) win \u8868\u793a\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f \u56fe\u4e2d\u90e8\u5206 ACK \u5e94\u4e3a\u786e\u8ba4\u53f7 ack \uff0c\u800c\u975e\u6807\u5fd7\u4f4d ACK \u6d41\u7a0b\u8bf4\u660e \u7b2c1\u6b21\uff0c \u7b2c\u4e00\u6b21\u63e1\u624b \uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5\uff0c\u5ba2\u6237\u7aef\u7684\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u662f4096\uff0c\u4e00\u6b21\u53d1\u9001\u7684\u6700\u5927\u6570\u636e\u91cf\u662f1460 \u7b2c2\u6b21\uff0c \u7b2c\u4e8c\u6b21\u63e1\u624b \uff0c\u670d\u52a1\u5668\u63a5\u6536\u8fde\u63a5\u60c5\u51b5\uff0c\u544a\u8bc9\u5ba2\u6237\u7aef\u670d\u52a1\u5668\u7684\u7a97\u53e3\u5927\u5c0f\u662f6144\uff0c\u4e00\u6b21\u53d1\u9001\u7684\u6700\u5927\u6570\u636e\u91cf\u662f1024 \u7b2c3\u6b21\uff0c \u7b2c\u4e09\u6b21\u63e1\u624b \u7b2c4-9\u6b21\uff0c\u5ba2\u6237\u7aef\u8fde\u7eed\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e866k\u7684\u6570\u636e\uff0c\u6bcf\u6b21\u53d1\u90011k \u7b2c10\u6b21\uff0c\u670d\u52a1\u5668\u544a\u8bc9\u5ba2\u6237\u7aef\uff1a\u53d1\u9001\u76846k\u6570\u636e\u4ee5\u53ca\u63a5\u6536\u5230\uff0c\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u7f13\u51b2\u533a\u6570\u636e\u5df2\u7ecf\u5904\u7406\u4e862k\uff0c\u7a97\u53e3\u5927\u5c0f\u662f2k(\u8fd8\u52694k\u672a\u5904\u7406\uff0c\u540e\u9762\u540c\u7406\uff0c\u4e0d\u518d\u505a\u5355\u72ec\u8bf4\u660e) \u7b2c11\u6b21\uff0c\u670d\u52a1\u5668\u544a\u8bc9\u5ba2\u6237\u7aef\uff1a\u53d1\u9001\u76846k\u6570\u636e\u4ee5\u53ca\u63a5\u6536\u5230\uff0c\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u7f13\u51b2\u533a\u6570\u636e\u5df2\u7ecf\u5904\u7406\u4e864k\uff0c\u7a97\u53e3\u5927\u5c0f\u662f4k \u7b2c12\u6b21\uff0c\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e861k\u7684\u6570\u636e \u7b2c13\u6b21\uff0c \u7b2c\u4e00\u6b21\u6325\u624b \uff0c\u5ba2\u6237\u7aef\u4e3b\u52a8\u8bf7\u6c42\u548c\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\uff0c\u5e76\u4e14\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e861k\u7684\u6570\u636e \u7b2c14-16\u6b21\uff0c \u7b2c\u4e8c\u6b21\u6325\u624b \uff0c\u670d\u52a1\u5668\u56de\u590dACK 8194(\u5305\u542bFIN\u6807\u8bb0\uff0c\u6240\u4ee5\u7ed3\u679c\u4e0a\u591a\u52a0\u4e861)\uff0c\u8868\u793a \u540c\u610f\u65ad\u5f00\u8fde\u63a5\u7684\u8bf7\u6c42 \uff0c\u5e76\u901a\u77e5\u5ba2\u6237\u7aef\u4f9d\u6b21\u5df2\u7ecf\u5904\u7406\u4e862k\uff0c4k\uff0c6k\u6570\u636e\uff0c\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u4f9d\u6b21\u4e3a2k\uff0c4k\uff0c6k \u7b2c17\u6b21\uff0c \u7b2c\u4e09\u6b21\u6325\u624b \uff0c\u670d\u52a1\u5668\u7aef\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001FIN\uff0c\u8bf7\u6c42\u65ad\u5f00\u8fde\u63a5 \u7b2c18\u6b21\uff0c \u7b2c\u56db\u6b21\u56de\u6536 \uff0c\u5ba2\u6237\u7aef\u540c\u610f\u4e86\u670d\u52a1\u5668\u7aef\u7684\u65ad\u5f00\u8bf7\u6c42 TCP\u901a\u4fe1\u5e76\u53d1 \u6ce8\u89e3 \u8981\u5b9e\u73b0TCP\u901a\u4fe1\u670d\u52a1\u5668\u5904\u7406\u5e76\u53d1\u7684\u4efb\u52a1\uff0c\u4f7f\u7528\u591a\u8fdb\u7a0b\u6216\u8005\u591a\u7ebf\u7a0b\u6765\u89e3\u51b3 \u5b9e\u4f8b\uff1a\u591a\u8fdb\u7a0b\u5b9e\u73b0TCP\u5e76\u53d1\u901a\u4fe1 \u601d\u8def \u670d\u52a1\u7aef\u4f7f\u7528\u4e00\u4e2a\u7236\u8fdb\u7a0b\uff0c\u591a\u4e2a\u5b50\u8fdb\u7a0b \u7236\u8fdb\u7a0b\u8d1f\u8d23\u7b49\u5f85\u5e76\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 \u5b50\u8fdb\u7a0b\uff1a\u5b8c\u6210\u901a\u4fe1\uff0c\u63a5\u53d7\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7528\u4e8e\u901a\u4fe1 \u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u6539\u53d8\uff08\u540c\u4e00\u5bf9\u4e00\u901a\u4fe1\uff09 \u9047\u5230\u95ee\u9898\u53ca\u89e3\u51b3* \u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u5982\u4f55\u5904\u7406\u5b50\u8fdb\u7a0b\uff0c\u56de\u6536\u8d44\u6e90\uff1f \u4f7f\u7528\u4fe1\u53f7\u5904\u7406 \u4f7f\u7528\u4fe1\u53f7\u6355\u6349\u56de\u6536\u5b50\u8fdb\u7a0b\u8d44\u6e90\u540e\uff0c\u51fa\u73b0\u670d\u52a1\u7aef accept: Interrupted system call \uff0c\u4e14\u4e0d\u80fd\u6709\u65b0\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u4ea7\u751f EINTR \u4fe1\u53f7\uff0c\u5177\u4f53\u8bf4\u660e\u901a\u8fc7 man 2 accept \u67e5\u770b \u5728 accept \u8fd4\u56de\u503c\u5904\u8fdb\u884c\u5224\u65ad\u5904\u7406\uff0c\u4e0d\u8f93\u51fa\u9519\u8bef\u5373\u53ef \u5f53\u505c\u6b62\u6240\u6709\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u540e\uff0c\u51fa\u73b0 read: Connection reset by peer \uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u4ea7\u751f\u7684\u539f\u56e0\uff1a\u8fde\u63a5\u65ad\u5f00\u540e\u7684\u8bfb\u548c\u5199\u64cd\u4f5c\u5f15\u8d77\u7684 \u7b80\u5355\u4fee\u6539\uff1a\u5c06\u5ba2\u6237\u7aef\u4e2d\u4f11\u7720\u8bed\u53e5\u7684\u4f4d\u7f6e\u8fdb\u884c\u66f4\u6539 \u65b9\u6cd5\uff1a [261]Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0\u53ca\u89e3\u51b3\u529e\u6cd5 \u89e3\u51b3\u4e0a\u4e00\u4e2a\u95ee\u9898\u540e\uff0c\u670d\u52a1\u7aef\u51fa\u73b0\u4e24\u6b21 client closed... \uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u662f\u56e0\u4e3a\u5728\u5173\u95ed\u8fde\u63a5\u540e\uff0c\u5e94\u8be5\u9000\u51fa\u5faa\u73af\uff0c\u6240\u4ee5\u5728\u8be5 printf \u8bed\u53e5\u540e\uff0c\u6dfb\u52a0 break \u5373\u53ef \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <signal.h> #include <sys/wait.h> #include <errno.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 void recycleChild(int arg) { // \u5199while\u662f\u4e3a\u4e86\u5904\u7406\u591a\u4e2a\u4fe1\u53f7 while (1) { int ret = waitpid(-1, NULL, WNOHANG); if (ret == -1) { // \u6240\u6709\u5b50\u8fdb\u7a0b\u90fd\u56de\u6536\u4e86 break; } else if (ret == 0) { // \u8fd8\u6709\u5b50\u8fdb\u7a0b\u6d3b\u7740 break; } else { // \u56de\u6536\u5b50\u8fdb\u7a0b printf(\"\u5b50\u8fdb\u7a0b %d \u88ab\u56de\u6536\u4e86\\n\", ret); } } } int main() { // \u6ce8\u518c\u4fe1\u53f7\u6355\u6349 struct sigaction act; act.sa_flags = 0; sigemptyset(&act.sa_mask); act.sa_handler = recycleChild; sigaction(SIGCHLD, &act, NULL); // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { // \u7528\u4e8e\u5904\u7406\u4fe1\u53f7\u6355\u6349\u5bfc\u81f4\u7684accept: Interrupted system call if (errno == EINTR) { continue; } perror(\"accept\"); exit(-1); } pid_t pid = fork(); if (pid == 0) { // \u5b50\u8fdb\u7a0b // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // 5. \u5f00\u59cb\u901a\u4fe1 // \u670d\u52a1\u7aef\u5148\u63a5\u6536\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u518d\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e // \u63a5\u6536\u6570\u636e char recv_buf[1024] = {0}; while (1) { ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); // \u9000\u51fa\u5faa\u73af\uff0c\u7528\u6765\u89e3\u51b3\u51fa\u73b0\u4e24\u6b21client closed... break; } // \u53d1\u9001\u6570\u636e char *send_buf = \"hello, i am server\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); } // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 close(connfd); } } close(listenfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u6b64\u5904\u4f7f\u7528sleep\u8bed\u53e5\u4f1a\u5bfc\u81f4read: Connection reset by peer // sleep(1); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } \u901a\u4fe1\u6548\u679c \u5b9e\u4f8b\uff1a\u591a\u7ebf\u7a0b\u5b9e\u73b0TCP\u5e76\u53d1\u901a\u4fe1 \u601d\u8def \u670d\u52a1\u7aef\u4f7f\u7528\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u591a\u4e2a\u5b50\u7ebf\u7a0b \u4e3b\u7ebf\u7a0b\u8d1f\u8d23\u7b49\u5f85\u5e76\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 \u5b50\u7ebf\u7a0b\uff1a\u5b8c\u6210\u901a\u4fe1\uff0c\u63a5\u53d7\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7528\u4e8e\u901a\u4fe1 \u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u6539\u53d8\uff08\u540c\u4e00\u5bf9\u4e00\u901a\u4fe1\uff09 \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <pthread.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 struct sockInfo{ int fd; // \u901a\u4fe1\u6587\u4ef6\u63cf\u8ff0\u7b26 pthread_t tid; // \u7ebf\u7a0b\u53f7 struct sockaddr_in addr; // \u5ba2\u6237\u7aef\u4fe1\u606f }; struct sockInfo sockinfos[128]; // \u8868\u793a\u6700\u5927\u6709128\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5 void* working(void *arg) { // \u5b50\u7ebf\u7a0b\u4e0e\u5ba2\u6237\u7aef\u901a\u4fe1 struct sockInfo *pinfo = (struct sockInfo*)arg; // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &pinfo->addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(pinfo->addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // 5. \u5f00\u59cb\u901a\u4fe1 // \u670d\u52a1\u7aef\u5148\u63a5\u6536\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u518d\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e // \u63a5\u6536\u6570\u636e char recv_buf[1024] = {0}; while (1) { int ret = read(pinfo->fd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); break; } // \u53d1\u9001\u6570\u636e char *send_buf = \"hello, i am server\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(pinfo->fd, send_buf, strlen(send_buf)); } // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 close(pinfo->fd); } int main() { // \u521d\u59cb\u5316\u7ebf\u7a0b\u7ed3\u6784\u4f53\u6570\u636e int sockinfo_maxLen = sizeof(sockinfos) / sizeof(sockinfos[0]); for (int i = 0; i < sockinfo_maxLen; i++) { bzero(&sockinfos[i], sizeof(sockinfos[i])); sockinfos[i].fd = -1; sockinfos[i].tid = -1; } // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u521b\u5efa\u5b50\u7ebf\u7a0b struct sockInfo *pinfo; // \u4ece\u7ebf\u7a0b\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u4e2a\u53ef\u7528\u7684\u5143\u7d20\u8fdb\u884c\u8d4b\u503c for (int i = 0; i < sockinfo_maxLen; i++) { if (sockinfos[i].tid == -1) { pinfo = &sockinfos[i]; break; } // \u5f53\u904d\u5386\u5230\u6700\u540e\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u4f11\u7720\u4e00\u79d2\u540e\uff0c\u4ece\u5934\u5f00\u59cb\u627e if (i == sockinfo_maxLen - 1) { sleep(1); i = -1; } } // \u7ed3\u6784\u4f53\u8d4b\u503c pinfo->fd = connfd; memcpy(&pinfo->addr, &client_addr, client_addr_len); pthread_create(&pinfo->tid, NULL, working, pinfo); // \u91ca\u653e\u8d44\u6e90 pthread_detach(pinfo->tid); } close(listenfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u6b64\u5904\u4f7f\u7528sleep\u8bed\u53e5\u4f1a\u5bfc\u81f4read: Connection reset by peer // sleep(1); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } \u901a\u4fe1\u6548\u679c TCP\u72b6\u6001\u8f6c\u6362 \u901a\u4fe1\u8fc7\u7a0b\u72b6\u6001\u8f6c\u6362\u56fe1 \u901a\u4fe1\u8fc7\u7a0b\u72b6\u6001\u8f6c\u6362\u56fe2 \u7ea2\u8272\u5b9e\u7ebf\u4ee3\u8868\u5ba2\u6237\u7aef\uff08\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5\uff09 \u7eff\u8272\u865a\u7ebf\u4ee3\u8868\u670d\u52a1\u7aef\uff08\u88ab\u52a8\u63a5\u6536\u8fde\u63a5\uff09 \u9ed1\u8272\u5b9e\u73b0\u4ee3\u8868\u7279\u6b8a\u60c5\u51b5 \u6570\u5b57\u4ee3\u8868\u4e09\u6b21\u63e1\u624b\u6d41\u7a0b MSL\u4e0e\u534a\u5173\u95ed \u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u4e00\u65b9\uff0c\u6700\u540e\u4f1a\u8fdb\u5165\u4e00\u4e2a TIME_WAIT \u72b6\u6001\uff0c\u8fd9\u4e2a\u72b6\u6001\u4f1a\u6301\u7eed 2msl msl \uff1a\u5b98\u65b9\u5efa\u8bae2\u5206\u949f\uff0c\u5b9e\u9645\u662f30s\uff0c \u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6325\u624b\u4fe1\u606f\u4e22\u5931 \u5f53 TCP \u8fde\u63a5\u4e3b\u52a8\u5173\u95ed\u65b9\u63a5\u6536\u5230\u88ab\u52a8\u5173\u95ed\u65b9\u53d1\u9001\u7684 FIN \u548c\u6700\u7ec8\u7684 ACK \u540e\uff0c\u8fde\u63a5\u7684\u4e3b\u52a8\u5173\u95ed\u65b9\u5fc5\u987b\u5904\u4e8eTIME_WAIT \u72b6\u6001\u5e76\u6301\u7eed 2MSL \u65f6\u95f4 \u8fd9\u6837\u5c31\u80fd\u591f\u8ba9 TCP \u8fde\u63a5\u7684\u4e3b\u52a8\u5173\u95ed\u65b9\u5728\u5b83\u53d1\u9001\u7684 ACK \u4e22\u5931\u7684\u60c5\u51b5\u4e0b\u91cd\u65b0\u53d1\u9001\u6700\u7ec8\u7684 ACK \u4e3b\u52a8\u5173\u95ed\u65b9\u91cd\u65b0\u53d1\u9001\u7684\u6700\u7ec8 ACK \u5e76\u4e0d\u662f\u56e0\u4e3a\u88ab\u52a8\u5173\u95ed\u65b9\u91cd\u4f20\u4e86 ACK\uff08\u5b83\u4eec\u5e76\u4e0d\u6d88\u8017\u5e8f\u5217\u53f7\uff0c\u88ab\u52a8\u5173\u95ed\u65b9\u4e5f\u4e0d\u4f1a\u91cd\u4f20\uff09\uff0c\u800c\u662f\u56e0\u4e3a\u88ab\u52a8\u5173\u95ed\u65b9\u91cd\u4f20\u4e86\u5b83\u7684 FIN\u3002\u4e8b\u5b9e\u4e0a\uff0c\u88ab\u52a8\u5173\u95ed\u65b9\u603b\u662f\u91cd\u4f20 FIN \u76f4\u5230\u5b83\u6536\u5230\u4e00\u4e2a\u6700\u7ec8\u7684 ACK \u534a\u5173\u95ed \uff1a\u5f53 TCP \u8fde\u63a5\u4e2d A \u5411 B \u53d1\u9001 FIN \u8bf7\u6c42\u5173\u95ed\uff0c\u53e6\u4e00\u7aef B \u56de\u5e94 ACK \u4e4b\u540e\uff08A \u7aef\u8fdb\u5165 FIN_WAIT_2\u72b6\u6001\uff09\uff0c\u5e76\u6ca1\u6709\u7acb\u5373\u53d1\u9001 FIN \u7ed9 A\uff0cA \u65b9\u5904\u4e8e\u534a\u8fde\u63a5\u72b6\u6001\uff08\u534a\u5f00\u5173\uff09\uff0c\u6b64\u65f6 A \u53ef\u4ee5\u63a5\u6536 B \u53d1\u9001\u7684\u6570\u636e\uff0c\u4f46\u662f A \u5df2\u7ecf\u4e0d\u80fd\u518d\u5411 B \u53d1\u9001\u6570\u636e API \u6765\u63a7\u5236\u5b9e\u73b0\u534a\u8fde\u63a5\u72b6\u6001\u7684\u65b9\u6cd5\uff1a shutdown\u51fd\u6570 int shutdown(int sockfd, int how); \u529f\u80fd\uff1a\u5b9e\u73b0\u534a\u8fde\u63a5\u72b6\u6001 \u53c2\u6570 sockfd \uff1a\u9700\u8981\u5173\u95ed\u7684socket\u7684\u63cf\u8ff0\u7b26 how \uff1a\u5141\u8bb8\u4e3ashutdown\u64cd\u4f5c\u9009\u62e9\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f SHUT_RD(0) \uff1a\u5173\u95edsockfd\u4e0a\u7684\u8bfb\u529f\u80fd\uff0c\u6b64\u9009\u9879\u5c06\u4e0d\u5141\u8bb8sockfd\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u8be5\u5957\u63a5\u5b57\u4e0d\u518d\u63a5\u6536\u6570\u636e\uff0c\u4efb\u4f55\u5f53\u524d\u5728\u5957\u63a5\u5b57\u63a5\u53d7\u7f13\u51b2\u533a\u7684\u6570\u636e\u5c06\u88ab\u65e0\u58f0\u7684\u4e22\u5f03\u6389 SHUT_WR(1) \uff1a\u5173\u95edsockfd\u7684\u5199\u529f\u80fd\uff0c\u6b64\u9009\u9879\u5c06\u4e0d\u5141\u8bb8sockfd\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u8fdb\u7a0b\u4e0d\u80fd\u5728\u5bf9\u6b64\u5957\u63a5\u5b57\u53d1 \u51fa\u5199\u64cd\u4f5c SHUT_RDWR(2) \uff1a\u5173\u95edsockfd\u7684\u8bfb\u5199\u529f\u80fd\u3002\u76f8\u5f53\u4e8e\u8c03\u7528shutdown\u4e24\u6b21\uff1a\u9996\u5148\u8c03\u7528 SHUT_RD ,\u7136\u540e\u8c03\u7528 SHUT_WR shutdown\u4e0eclose \u4f7f\u7528 close \u4e2d\u6b62\u4e00\u4e2a\u8fde\u63a5\uff0c\u4f46\u5b83\u53ea\u662f \u51cf\u5c11\u63cf\u8ff0\u7b26\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u5e76\u4e0d\u76f4\u63a5\u5173\u95ed\u8fde\u63a5 \uff0c\u53ea\u6709\u5f53\u63cf\u8ff0\u7b26\u7684\u5f15\u7528\u8ba1\u6570\u4e3a 0 \u65f6\u624d\u5173\u95ed\u8fde\u63a5 shutdown \u4e0d\u8003\u8651\u63cf\u8ff0\u7b26\u7684\u5f15\u7528\u8ba1\u6570\uff0c \u76f4\u63a5\u5173\u95ed\u63cf\u8ff0\u7b26 \u3002\u4e5f\u53ef\u9009\u62e9\u4e2d\u6b62\u4e00\u4e2a\u65b9\u5411\u7684\u8fde\u63a5\uff0c\u53ea\u4e2d\u6b62\u8bfb\u6216\u53ea\u4e2d\u6b62\u5199 \u5982\u679c\u6709\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4e2a\u5957\u63a5\u5b57\uff0cclose \u6bcf\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u8ba1\u6570\u51cf 1 \uff0c\u76f4\u5230\u8ba1\u6570\u4e3a 0 \u65f6\uff0c\u4e5f\u5c31\u662f\u6240\u7528\u8fdb\u7a0b\u90fd\u8c03\u7528\u4e86 close\uff0c\u5957\u63a5\u5b57\u5c06\u88ab\u91ca\u653e \u5728\u591a\u8fdb\u7a0b\u4e2d\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528\u4e86 shutdown(sfd, SHUT_RDWR) \u540e\uff0c\u5176\u5b83\u7684\u8fdb\u7a0b\u5c06\u65e0\u6cd5\u8fdb\u884c\u901a\u4fe1 \u3002\u4f46\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b close(sfd) \u5c06\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u5b83\u8fdb\u7a0b=>==\u96be\u602a800\u90a3\u4e2a\u9879\u76ee\u8c03shutdown\u4e4b\u540e\u5176\u4ed6\u7ebf\u7a0b\u5c31\u4e0d\u80fd\u7528\u4e86== \u7aef\u53e3\u590d\u7528 \u7528\u9014 \u9632\u6b62\u670d\u52a1\u5668\u91cd\u542f\u65f6\u4e4b\u524d\u7ed1\u5b9a\u7684\u7aef\u53e3\u8fd8\u672a\u91ca\u653e \u7a0b\u5e8f\u7a81\u7136\u9000\u51fa\u800c\u7cfb\u7edf\u6ca1\u6709\u91ca\u653e\u7aef\u53e3 \u65b9\u6cd5\u2014\u2014 setsockopt int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); \u529f\u80fd\uff1a\u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u5c5e\u6027\uff08\u4e0d\u4ec5\u4ec5\u80fd\u8bbe\u7f6e\u7aef\u53e3\u590d\u7528\uff09\uff0c\u4ee5\u4e0b\u8bf4\u660e\u4ec5\u9488\u5bf9\u7aef\u53e3\u590d\u7528\uff0c\u5176\u4ed6\u8be6\u7ec6\u5185\u5bb9\u53ef\u67e5\u770b slide/04Linux\u7f51\u7edc\u7f16\u7a0b/02 socket\u901a\u4fe1/UNP\uff08Unix\u7f51\u7edc\u7f16\u7a0b\uff09.pdf \u7b2c\u4e03\u7ae0\u76f8\u5173\u5185\u5bb9 \u53c2\u6570 sockfd \uff1a\u8981\u64cd\u4f5c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 level \uff1a\u7ea7\u522b\uff0c SOL_SOCKET (\u7aef\u53e3\u590d\u7528\u7684\u7ea7\u522b) optname \uff1a\u9009\u9879\u7684\u540d\u79f0\uff0c\u4f7f\u7528 SO_REUSEADDR \u6216 SO_REUSEPORT optval \uff1a\u7aef\u53e3\u590d\u7528\u7684\u503c\uff08\u6574\u5f62\uff09 \uff0c1\u8868\u793a\u53ef\u590d\u7528\uff0c0\u8868\u793a\u4e0d\u53ef\u590d\u7528 optlen \uff1aoptval\u53c2\u6570\u7684\u5927\u5c0f \u6ce8\u610f \u7aef\u53e3\u590d\u7528\u7684\u8bbe\u7f6e\u65f6\u673a\u662f \u5728\u670d\u52a1\u5668\u7ed1\u5b9a\u7aef\u53e3\u4e4b\u524d \u5982\u679c\u4e0d\u8bbe\u7f6e\u7aef\u53e3\u590d\u7528\uff0c\u90a3\u4e48\u5728\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u540e\uff0c\u518d\u6b21\u542f\u52a8\u670d\u52a1\u4f1a\u51fa\u73b0 Bind error:Address already in use \u67e5\u770b\u770b\u7f51\u7edc\u76f8\u5173\u4fe1\u606f\u547d\u4ee4\u2014\u2014netstat \u683c\u5f0f\uff1a netstat -\u53c2\u6570\u540d \u5e38\u7528\u53c2\u6570 a \uff1a\u6240\u6709\u7684socket p \uff1a\u663e\u793a\u6b63\u5728\u4f7f\u7528socket\u7684\u7a0b\u5e8f\u7684\u540d\u79f0 n \uff1a\u76f4\u63a5\u4f7f\u7528IP\u5730\u5740\uff0c\u800c\u4e0d\u901a\u8fc7\u57df\u540d\u670d\u52a1\u5668 IO\u591a\u8def\u590d\u7528(IO\u591a\u8def\u8f6c\u63a5) \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/03 IO\u591a\u8def\u590d\u7528 \u963b\u585e\u7b49\u5f85(BIO\u6a21\u578b) \u7b80\u4ecb \u9047\u5230 read / recv / accept \u65f6\uff0c\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u63a5\u6709\u6570\u636e\u6216\u8005\u8fde\u63a5\u65f6\u624d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c \u5355\u4efb\u52a1 \u597d\u5904\uff1a\u4e0d\u5360\u7528CPU\u5b9d\u8d35\u7684\u65f6\u95f4\u7247 \u7f3a\u70b9\uff1a\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u64cd\u4f5c, \u6548\u7387\u4f4e \u514b\u670d\u7f3a\u70b9\uff1a\u591a\u7ebf\u7a0b\u6216\u8005\u591a\u8fdb\u7a0b\u89e3\u51b3\uff0c\u4e00\u4e2a\u7ebf\u7a0b/\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1 \u591a\u4efb\u52a1 \u4f18\u70b9\uff1a\u80fd\u591f\u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1\uff0c\u4e00\u4e2a\u7ebf\u7a0b/\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1 \u7f3a\u70b9\uff1a \u7ebf\u7a0b\u6216\u8005\u8fdb\u7a0b\u4f1a\u6d88\u8017\u8d44\u6e90 \u7ebf\u7a0b\u6216\u8fdb\u7a0b\u8c03\u5ea6\u6d88\u8017CPU\u8d44\u6e90 \u6839\u672c\u95ee\u9898\uff1a\u963b\u585e( blocking ) \u975e\u963b\u585e\uff0c\u5fd9\u8f6e\u8be2(NIO\u6a21\u578b) \u4f18\u70b9\uff1a\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387 \u7f3a\u70b9\uff1a\u9700\u8981\u5360\u7528\u66f4\u591a\u7684CPU\u548c\u7cfb\u7edf\u8d44\u6e90\uff0c\u6bcf\u5faa\u73af\u90fd\u9700\u8981 O(n) \u7cfb\u7edf\u8c03\u7528\uff08\u7528\u6765\u67e5\u627e\u54ea\u4e2a\u4efb\u52a1\u53ef\u6267\u884c\uff09 \u514b\u670d\u7f3a\u70b9\uff1a\u4f7f\u7528IO\u591a\u8def\u8f6c\u63a5\u6280\u672fselect/poll/epoll IO\u591a\u8def\u8f6c\u63a5\u6280\u672f(\u7b80\u4ecb) select/poll \u59d4\u6258\u5185\u6838\u8fdb\u884c\u64cd\u4f5c \u53ea\u4f1a\u901a\u77e5\u6709\u51e0\u4e2a\u4efb\u52a1\u53ef\u7528\uff0c\u4f46\u4e0d\u77e5\u9053\u5177\u4f53\u54ea\u51e0\u4e2a\u4efb\u52a1\uff0c\u8fd8\u9700\u904d\u5386\uff08\u4e0eNIO\u6a21\u578b\u7565\u6709\u4e0d\u540c\uff09 epoll \u59d4\u6258\u5185\u6838\u8fdb\u884c\u64cd\u4f5c \u4f1a\u901a\u77e5\u5177\u4f53\u6709\u54ea\u51e0\u4e2a\u4efb\u52a1\u53ef\u7528 select \u4e3b\u65e8\u601d\u60f3 \u9996\u5148\u8981\u6784\u9020\u4e00\u4e2a\u5173\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5217\u8868\uff0c\u5c06\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6dfb\u52a0\u5230\u8be5\u5217\u8868\u4e2d \u8c03\u7528\u4e00\u4e2a\u7cfb\u7edf\u51fd\u6570( select )\uff0c\u76d1\u542c\u8be5\u5217\u8868\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u76f4\u5230\u8fd9\u4e9b\u63cf\u8ff0\u7b26\u4e2d\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8fdb\u884cI/O\u64cd\u4f5c\u65f6\uff0c\u8be5\u51fd\u6570\u624d\u8fd4\u56de \u8fd9\u4e2a\u51fd\u6570\u662f\u963b\u585e \u51fd\u6570\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u68c0\u6d4b\u7684\u64cd\u4f5c\u662f\u7531\u5185\u6838\u5b8c\u6210\u7684 \u5728\u8fd4\u56de\u65f6\uff0c\u5b83\u4f1a\u544a\u8bc9\u8fdb\u7a0b\u6709\u591a\u5c11\uff08\u54ea\u4e9b\uff09\u63cf\u8ff0\u7b26\u8981\u8fdb\u884cI/O\u64cd\u4f5c \u51fd\u6570\u8bf4\u660e \u6982\u89c8 ```c++ #include #include #include #include int select(int nfds, fd_set readfds, fd_set writefds, fd_set exceptfds, struct timeval timeout); // \u5c06\u53c2\u6570\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u8bbe\u7f6e\u4e3a0 void FD_CLR(int fd, fd_set set); // \u5224\u65adfd\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u662f0\u8fd8\u662f1\uff0c \u8fd4\u56de\u503c \uff1a fd\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u7684\u503c\uff0c0\uff0c\u8fd4\u56de0\uff0c 1\uff0c\u8fd4\u56de1 int FD_ISSET(int fd, fd_set set); // \u5c06\u53c2\u6570\u6587\u4ef6\u63cf\u8ff0\u7b26fd \u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\uff0c\u8bbe\u7f6e\u4e3a1 void FD_SET(int fd, fd_set set); // fd_set\u4e00\u5171\u67091024 bit, \u5168\u90e8\u521d\u59cb\u5316\u4e3a0 void FD_ZERO(fd_set set); ``` int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); \u901a\u8fc7 man select \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 nfds \uff1a\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u7684\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c + 1\uff08+1\u662f\u56e0\u4e3a\u904d\u5386\u662f\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0cfor\u5faa\u73af\uff1c\u8bbe\u5b9a\uff09 readfds \uff1a\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u7684\u96c6\u5408\uff0c\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u7684\u5c5e\u6027 \u4e00\u822c\u68c0\u6d4b\u8bfb\u64cd\u4f5c \u5bf9\u5e94\u7684\u662f\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u8bfb\u662f\u88ab\u52a8\u7684\u63a5\u6536\u6570\u636e\uff0c\u68c0\u6d4b\u7684\u5c31\u662f\u8bfb\u7f13\u51b2\u533a \u662f\u4e00\u4e2a\u4f20\u5165\u4f20\u51fa\u53c2\u6570 writefds \uff1a\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5199\u7684\u96c6\u5408\uff0c\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5199\u7684\u5c5e\u6027 \u59d4\u6258\u5185\u6838\u68c0\u6d4b\u5199\u7f13\u51b2\u533a\u662f\u4e0d\u662f\u8fd8\u53ef\u4ee5\u5199\u6570\u636e\uff08\u4e0d\u6ee1\u7684\u5c31\u53ef\u4ee5\u5199\uff09 exceptfds \uff1a\u68c0\u6d4b\u53d1\u751f\u5f02\u5e38\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u96c6\u5408\uff0c\u4e00\u822c\u4e0d\u7528 timeout \uff1a\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u542b\u4e49\u89c1 select \u53c2\u6570\u5217\u8868\u8bf4\u660e NULL \uff1a\u6c38\u4e45\u963b\u585e\uff0c\u76f4\u5230\u68c0\u6d4b\u5230\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316 tv_sec = tv_usec = 0 \uff0c \u4e0d\u963b\u585e tv_sec > 0,tv_usec > 0 \uff1a\u963b\u585e\u5bf9\u5e94\u7684\u65f6\u95f4 \u8fd4\u56de\u503c -1\uff1a\u5931\u8d25 >0(n)\uff1a\u68c0\u6d4b\u7684\u96c6\u5408\u4e2d\u6709n\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u53d8\u5316 select \u53c2\u6570\u5217\u8868\u8bf4\u660e fd_set \uff1a\u662f\u4e00\u5757\u56fa\u5b9a\u5927\u5c0f\u7684\u7f13\u51b2\u533a(\u7ed3\u6784\u4f53)\uff0c sizeof(fd_set)=128 \uff0c\u5373\u5bf9\u5e941024\u4e2a\u6bd4\u7279\u4f4d timeval \uff1a\u7ed3\u6784\u4f53\u7c7b\u578b c++ struct timeval { long tv_sec; /* seconds */ long tv_usec; /* microseconds */ }; \u5de5\u4f5c\u8fc7\u7a0b\u5206\u6790 \u521d\u59cb\u8bbe\u5b9a \u8bbe\u7f6e\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c06 fd_set \u96c6\u5408\u76f8\u5e94\u4f4d\u7f6e\u4e3a1 \u8c03\u7528 select \u59d4\u6258\u5185\u6838\u68c0\u6d4b \u5185\u6838\u68c0\u6d4b\u5b8c\u6bd5\u540e\uff0c\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u7ed3\u679c \u4ee3\u7801\u5b9e\u73b0 \u6ce8\u610f\u4e8b\u9879 select \u4e2d\u9700\u8981\u7684\u76d1\u542c\u96c6\u5408\u9700\u8981\u4e24\u4e2a \u4e00\u4e2a\u662f\u7528\u6237\u6001\u771f\u6b63\u9700\u8981\u76d1\u542c\u7684\u96c6\u5408 rSet \u4e00\u4e2a\u662f\u5185\u6838\u6001\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u7684\u4fee\u6539\u96c6\u5408 tmpSet \u9700\u8981\u5148\u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8 \u5982\u679c\u6539\u53d8\u4e86\uff0c\u8bf4\u660e\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u6b64\u65f6\u9700\u8981\u5c06 \u65b0\u7684\u8fde\u63a5\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u5230 rSet \uff0c\u5e76\u66f4\u65b0\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5982\u679c\u6ca1\u6709\u6539\u53d8\uff0c\u8bf4\u660e\u6ca1\u6709\u5ba2\u6237\u7aef\u8fde\u63a5 \u7531\u4e8e select \u65e0\u6cd5\u786e\u5207\u77e5\u9053\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u6240\u4ee5\u9700\u8981\u6267\u884c\u904d\u5386\u64cd\u4f5c\uff0c\u4f7f\u7528 FD_ISSET \u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8 \u5982\u679c\u5ba2\u6237\u7aef\u65ad\u5f00\u4e86\u8fde\u63a5\uff0c\u9700\u8981\u4ece rSet \u4e2d\u6e05\u9664\u9700\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u7a0b\u5e8f\u5b58\u5728\u7684\u95ee\u9898\uff1a\u4e2d\u95f4\u7684\u4e00\u4e9b\u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u600e\u4e48\u66f4\u65b0\uff1f =>==\u4f30\u8ba1\u4e0d\u66f4\u65b0\uff0c\u6bcf\u6b21\u90fd\u4f1a\u904d\u5386\u5230\u4e4b\u524d\u7684\u6700\u5927\u503c\u5904==\uff0c\u89e3\u51b3\u65b9\u6848\u89c1 \u9ad8\u5e76\u53d1\u4f18\u5316\u601d\u8003 \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/select.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u521b\u5efa\u8bfb\u68c0\u6d4b\u96c6\u5408 // rSet\u7528\u4e8e\u8bb0\u5f55\u6b63\u5728\u7684\u76d1\u542c\u96c6\u5408\uff0ctmpSet\u7528\u4e8e\u8bb0\u5f55\u5728\u8f6e\u8bad\u8fc7\u7a0b\u4e2d\u7531\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u96c6\u5408 fd_set rSet, tmpSet; // \u6e05\u7a7a FD_ZERO(&rSet); // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165 FD_SET(listenfd, &rSet); // \u6b64\u65f6\u6700\u5927\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a\u76d1\u542c\u63cf\u8ff0\u7b26 int maxfd = listenfd; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { tmpSet = rSet; // \u4f7f\u7528select\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = select(maxfd + 1, &tmpSet, NULL, NULL, NULL); if (num == -1) { perror(\"select\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u9996\u5148\u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 if (FD_ISSET(listenfd, &tmpSet)) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); FD_SET(connfd, &rSet); // \u66f4\u65b0\u6700\u5927\u6587\u4ef6\u7b26 maxfd = maxfd > connfd ? maxfd : connfd; } // \u904d\u5386\u96c6\u5408\u5224\u65ad\u662f\u5426\u6709\u53d8\u52a8\uff0c\u5982\u679c\u6709\u53d8\u52a8\uff0c\u90a3\u4e48\u901a\u4fe1 char recv_buf[1024] = {0}; for (int i = listenfd + 1; i <= maxfd; i++) { if (FD_ISSET(i, &tmpSet)) { ret = read(i, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); write(i, recv_buf, strlen(recv_buf)); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(i); FD_CLR(i, &rSet); break; } } } } } close(listenfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; write(connfd, send_buf, strlen(send_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } \u9ad8\u5e76\u53d1\u4f18\u5316\u601d\u8003 \u95ee\u9898 \u6bcf\u6b21\u90fd\u9700\u8981\u5229\u7528 FD_ISSET \u8f6e\u8bad [0, maxfd] \u4e4b\u95f4\u7684\u8fde\u63a5\u72b6\u6001\uff0c \u5982\u679c\u4f4d\u4e8e\u4e2d\u95f4\u7684\u67d0\u4e00\u4e2a\u5ba2\u6237\u7aef\u65ad\u5f00\u4e86\u8fde\u63a5 \uff0c\u6b64\u65f6\u4e0d\u5e94\u8be5\u518d\u53bb\u5229\u7528 FD_ISSET \u8f6e\u8bad\uff0c\u9020\u6210\u8d44\u6e90\u6d6a\u8d39 \u5982\u679c\u5728\u5904\u7406\u5ba2\u6237\u7aef\u6570\u636e\u65f6\uff0c\u67d0\u4e00\u6b21read\u6ca1\u6709\u5bf9\u6570\u636e\u8bfb\u5b8c\uff0c\u90a3\u4e48\u9020\u6210\u91cd\u65b0\u8fdb\u884c\u4e0b\u4e00\u6b21\u65f6select\uff0c\u83b7\u53d6\u4e0a\u4e00\u6b21\u672a\u5904\u7406\u5b8c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ece0\u5f00\u59cb\u904d\u5386\u5230maxfd\uff0c\u5bf9\u4e0a\u4e00\u6b21\u7684\u8fdb\u884c\u518d\u4e00\u6b21\u64cd\u4f5c\uff0c\u6548\u7387\u5341\u5206\u4f4e\u4e0b \u89e3\u51b3 \u8003\u8651\u5230 select \u53ea\u6709 1024 \u4e2a\u6700\u5927\u53ef\u76d1\u542c\u6570\u91cf\uff0c\u53ef\u4ee5 \u7533\u8bf7\u7b49\u91cf\u5ba2\u6237\u7aef\u6570\u7ec4 \u521d\u59cb\u7f6e\u4e3a-1\uff0c\u5f53\u6709\u72b6\u6001\u6539\u53d8\u65f6\uff0c\u7f6e\u4e3a\u76f8\u5e94\u6587\u4ef6\u63cf\u8ff0\u7b26 \u6b64\u65f6\u518d\u7528 FD_ISSET \u8f6e\u8bad\u65f6\uff0c\u8df3\u8fc7\u6807\u8bb0\u4e3a-1\u7684\u5ba2\u6237\u7aef\uff0c\u52a0\u5feb\u904d\u5386\u901f\u5ea6 \u5bf9\u4e8e\u95ee\u9898\u4e8c\uff1a\u5bf9\u8bfb\u7f13\u5b58\u533a\u5faa\u73af\u8bfb\uff0c\u76f4\u5230\u8fd4\u56de EAGAIN \u518d\u5904\u7406\u6570\u636e \u53c2\u8003 \u591a\u8def\u590d\u7528IO\u6a21\u578b\u4e4bselect\u4e0e\u5e76\u53d1\u95ee\u9898\u8fdb\u4e00\u6b65\u4f18\u5316 \u5b58\u5728\u95ee\u9898(\u7f3a\u70b9) \u6bcf\u6b21\u8c03\u7528select\uff0c\u90fd\u9700\u8981\u628afd\u96c6\u5408\u4ece\u7528\u6237\u6001\u62f7\u8d1d\u5230\u5185\u6838\u6001\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4f1a\u5f88\u5927 \u540c\u65f6\u6bcf\u6b21\u8c03\u7528select\u90fd\u9700\u8981\u5728\u5185\u6838\u904d\u5386\u4f20\u9012\u8fdb\u6765\u7684\u6240\u6709fd\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4e5f\u5f88\u5927 select\u652f\u6301\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u91cf\u592a\u5c0f\u4e86\uff0c\u9ed8\u8ba4\u662f1024 fds\u96c6\u5408\u4e0d\u80fd\u91cd\u7528\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u7f6e poll \u4e3b\u65e8\u601d\u60f3 \u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u5e76\u8bb0\u5f55\u7528\u6237\u6001\u72b6\u6001\u548c\u5185\u6838\u6001\u72b6\u6001 \u51fd\u6570\u8bf4\u660e \u6982\u89c8 ```c++ #include struct pollfd { int fd; / \u59d4\u6258\u5185\u6838\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 / short events; / \u59d4\u6258\u5185\u6838\u68c0\u6d4b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4ec0\u4e48\u4e8b\u4ef6 / short revents; / \u6587\u4ef6\u63cf\u8ff0\u7b26\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u4ef6 / }; int poll(struct pollfd *fds, nfds_t nfds, int timeout); ``` int poll(struct pollfd *fds, nfds_t nfds, int timeout); \u901a\u8fc7 man poll \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 fds \uff1a\u662f\u4e00\u4e2a struct pollfd \u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u96c6\u5408 nfds \uff1a\u8fd9\u4e2a\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u6709\u6548\u5143\u7d20\u7684\u4e0b\u6807 + 1 timeout \uff1a\u963b\u585e\u65f6\u957f 0\uff1a\u4e0d\u963b\u585e -1\uff1a\u963b\u585e\uff0c\u5f53\u68c0\u6d4b\u5230\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u89e3\u9664\u963b\u585e >0\uff1a\u5177\u4f53\u7684\u963b\u585e\u65f6\u957f(ms) \u8fd4\u56de\u503c -1\uff1a\u5931\u8d25 >0(n)\uff1a\u68c0\u6d4b\u7684\u96c6\u5408\u4e2d\u6709n\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u53d8\u5316 events \u53ca revents \u53d6\u503c\uff0c\u5982\u679c\u6709\u591a\u4e2a\u4e8b\u4ef6\u9700\u8981\u68c0\u6d4b\uff0c\u7528 | \u5373\u53ef\uff0c\u5982\u540c\u65f6\u68c0\u6d4b\u8bfb\u548c\u5199\uff1a POLLIN | POLLOUT \u4ee3\u7801\u5b9e\u73b0 \u6ce8\u610f\u4e8b\u9879 nfds \u8868\u793a\u7684\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e0b\u6807\uff0c\u6240\u4ee5\u5728\u904d\u5386\u65f6\uff0c\u9700\u8981\u4f7f\u7528 fds[i].fd \u53d6\u5f97\u76f8\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5982\u4f55\u4f18\u96c5\u7684\u66f4\u65b0nfds?\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fde\u63a5\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f5c\u4e3a\u66ff\u4ee3\u66f4\u65b0 \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <poll.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } struct pollfd fds[1024]; // \u521d\u59cb\u5316 for (int i = 0; i < 1024; i++) { fds[i].fd = -1; fds[i].events = POLLIN; } // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165 fds[0].fd = listenfd; int nfds = 0; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // \u4f7f\u7528poll\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = poll(fds, nfds + 1, -1); if (num == -1) { perror(\"poll\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u9996\u5148\u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 if (fds[0].revents & POLLIN) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // \u904d\u5386\u96c6\u5408, \u5c06\u65b0\u7684\u9700\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u96c6\u5408 for (int i = 1; i < 1024; i++) { if (fds[i].fd == -1) { fds[i].fd = connfd; fds[i].events = POLLIN; break; } } // \u66f4\u65b0\u6700\u5927\u7684\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\u4e0b\u6807 // \u5b58\u5728\u95ee\u9898\uff1a\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u66ff\u4ee3\u6700\u5927\u5bf9\u5e94\u4e0b\u6807 nfds = nfds > connfd ? nfds : connfd; } // \u904d\u5386\u96c6\u5408\u5224\u65ad\u662f\u5426\u6709\u53d8\u52a8\uff0c\u5982\u679c\u6709\u53d8\u52a8\uff0c\u90a3\u4e48\u901a\u4fe1 char recv_buf[1024] = {0}; for (int i = 1; i <= nfds; i++) { if (fds[i].fd != -1 && fds[i].revents & POLLIN) { ret = read(fds[i].fd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); write(fds[i].fd, recv_buf, strlen(recv_buf)); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(fds[i].fd); fds[i].fd = -1; break; } } } } } close(listenfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; write(connfd, send_buf, strlen(send_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } \u5b58\u5728\u95ee\u9898(\u7f3a\u70b9) \u7f3a\u70b9\u540c select \u7b2c\u4e00\u70b9\u548c\u7b2c\u4e8c\u70b9(\u5982\u4e0b)\uff0c\u5373\u89e3\u51b3\u4e86\u7b2c\u4e09\u70b9\u548c\u7b2c\u56db\u70b9 \u6bcf\u6b21\u8c03\u7528select\uff0c\u90fd\u9700\u8981\u628afd\u96c6\u5408\u4ece\u7528\u6237\u6001\u62f7\u8d1d\u5230\u5185\u6838\u6001\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4f1a\u5f88\u5927 \u540c\u65f6\u6bcf\u6b21\u8c03\u7528select\u90fd\u9700\u8981\u5728\u5185\u6838\u904d\u5386\u4f20\u9012\u8fdb\u6765\u7684\u6240\u6709fd\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4e5f\u5f88\u5927 epoll \u4e3b\u65e8\u601d\u60f3 \u76f4\u63a5\u5728 \u5185\u6838\u6001 \u521b\u5efa eventpoll\u5b9e\u4f8b (\u7ed3\u6784\u4f53)\uff0c\u901a\u8fc7 epoll \u63d0\u4f9b\u7684API\u64cd\u4f5c\u8be5\u5b9e\u4f8b \u7ed3\u6784\u4f53\u4e2d\u6709 \u7ea2\u9ed1\u6811 \u548c \u53cc\u94fe\u8868 \uff0c\u5206\u522b\u7528\u6765 \u5b58\u50a8\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u548c \u5b58\u50a8\u5df2\u7ecf\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u51fd\u6570\u8bf4\u660e \u6982\u89c8 ```c #include // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684epoll\u5b9e\u4f8b // \u5728\u5185\u6838\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u636e\uff0c\u8fd9\u4e2a\u6570\u636e\u4e2d\u6709\u4e24\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u662f\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4fe1\u606f\uff08\u7ea2\u9ed1\u6811\uff09\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f\u5c31\u7eea\u5217\u8868\uff0c\u5b58\u653e\u68c0\u6d4b\u5230\u6570\u636e\u53d1\u9001\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\uff08\u53cc\u5411\u94fe\u8868\uff09 int epoll_create(int size); // \u5bf9epoll\u5b9e\u4f8b\u8fdb\u884c\u7ba1\u7406\uff1a\u6dfb\u52a0\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\uff0c\u5220\u9664\u4fe1\u606f\uff0c\u4fee\u6539\u4fe1\u606f int epoll_ctl(int epfd, int op, int fd, struct epoll_event event); struct epoll_event { uint32_t events; / Epoll events / epoll_data_t data; / User data variable / }; typedef union epoll_data { void ptr; int fd; uint32_t u32; uint64_t u64; } epoll_data_t; // \u68c0\u6d4b\u51fd\u6570 int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout); ``` int epoll_create(int size); \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684epoll\u5b9e\u4f8b \u53c2\u6570\uff1a size \uff0c\u76ee\u524d\u6ca1\u6709\u610f\u4e49\u4e86(\u4e4b\u524d\u5e95\u5c42\u5b9e\u73b0\u662f\u54c8\u5e0c\u8868\uff0c\u73b0\u5728\u662f\u7ea2\u9ed1\u6811)\uff0c\u968f\u4fbf\u5199\u4e00\u4e2a\u6570\uff0c\u5fc5\u987b\u5927\u4e8e0 \u8fd4\u56de\u503c -1\uff1a\u5931\u8d25 >0\uff1a\u64cd\u4f5c epoll\u5b9e\u4f8b \u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); \u529f\u80fd\uff1a\u5bf9epoll\u5b9e\u4f8b\u8fdb\u884c\u7ba1\u7406\uff1a\u6dfb\u52a0\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\uff0c\u5220\u9664\u4fe1\u606f\uff0c\u4fee\u6539\u4fe1\u606f \u53c2\u6570\uff1a epfd \uff1aepoll\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 op \uff1a\u8981\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c \u6dfb\u52a0\uff1a EPOLL_CTL_ADD \u5220\u9664\uff1a EPOLL_CTL_DEL \u4fee\u6539\uff1a EPOLL_CTL_MOD fd \uff1a\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 event \uff1a\u68c0\u6d4b\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ec0\u4e48\u4e8b\u60c5\uff0c\u901a\u8fc7\u8bbe\u7f6e epoll_event.events \uff0c\u5e38\u89c1\u64cd\u4f5c \u8bfb\u4e8b\u4ef6\uff1a EPOLLIN \u5199\u4e8b\u4ef6\uff1a EPOLLOUT \u9519\u8bef\u4e8b\u4ef6\uff1a EPOLLERR \u8bbe\u7f6e\u8fb9\u6cbf\u89e6\u53d1\uff1a EPOLLET \uff08\u9ed8\u8ba4\u6c34\u5e73\u89e6\u53d1\uff09 \u8fd4\u56de\u503c\uff1a\u6210\u529f0\uff0c\u5931\u8d25-1 int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout); \u529f\u80fd\uff1a\u68c0\u6d4b\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u6539\u53d8 \u53c2\u6570\uff1a epfd \uff1aepoll\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 events \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u4fdd\u5b58\u4e86\u53d1\u751f\u4e86\u53d8\u5316\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4fe1\u606f maxevents \uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed3\u6784\u4f53\u6570\u7ec4\u7684\u5927\u5c0f timeout \uff1a\u963b\u585e\u65f6\u957f 0\uff1a\u4e0d\u963b\u585e -1\uff1a\u963b\u585e\uff0c\u5f53\u68c0\u6d4b\u5230\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u89e3\u9664\u963b\u585e >0\uff1a\u5177\u4f53\u7684\u963b\u585e\u65f6\u957f(ms) \u8fd4\u56de\u503c\uff1a > 0\uff1a\u6210\u529f\uff0c\u8fd4\u56de\u53d1\u9001\u53d8\u5316\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570 -1\uff1a\u5931\u8d25 \u4ee3\u7801\u5b9e\u73b0 \u6ce8\u610f\u4e8b\u9879 events \u662f\u5c01\u88c5\u4e86\u76d1\u542c\u63cf\u8ff0\u7b26\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\uff0c\u6bcf\u4e00\u4e2a\u65b0\u589e\u6587\u4ef6\u90fd\u9700\u8981\u8fd9\u4e2a(\u53ef\u91cd\u7528) \u9700\u8981\u6ce8\u610f\u53ef\u80fd\u540c\u65f6\u53d1\u751f\u4e86\u591a\u4e2a\u76d1\u542c\uff08\u5982\u76d1\u542c\u8bfb\u4e8b\u4ef6\u548c\u5199\u4e8b\u4ef6\uff09\uff0c\u90a3\u4e48\u4ee3\u7801\u903b\u8f91\u9700\u8981\u505a\u76f8\u5e94\u5224\u65ad \u5982\u672c\u4f8b\u4e2d\u53ea\u68c0\u6d4b\u8bfb\u4e8b\u4ef6\uff0c\u6392\u9664\u4e86\u5199\u4e8b\u4ef6 \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/epoll.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u521b\u5efaepoll\u5b9e\u4f8b int epfd = epoll_create(100); // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u5b9e\u4f8b struct epoll_event event; event.events = EPOLLIN; event.data.fd = listenfd; ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &event); if (ret == -1) { perror(\"epoll_ctl\"); exit(-1); } // \u6b64\u7ed3\u6784\u4f53\u7528\u6765\u4fdd\u5b58\u5185\u6838\u6001\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f struct epoll_event events[1024]; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // \u4f7f\u7528epoll\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = epoll_wait(epfd, events, 1024, -1); if (num == -1) { perror(\"poll\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u904d\u5386\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408 for (int i = 0; i < num; i++) { // \u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 int curfd = events[i].data.fd; if (curfd == listenfd) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // \u5c06\u4fe1\u606f\u52a0\u5165\u76d1\u542c\u96c6\u5408 event.events = EPOLLIN; event.data.fd = connfd; epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &event); } else { // \u53ea\u68c0\u6d4b\u8bfb\u4e8b\u4ef6 if (events[i].events & EPOLLOUT) { continue; } // \u63a5\u6536\u6d88\u606f char recv_buf[1024] = {0}; ret = read(curfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); write(curfd, recv_buf, strlen(recv_buf)); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(curfd); epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL); break; } } } } } close(listenfd); close(epfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; write(connfd, send_buf, strlen(send_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } \u5de5\u4f5c\u6a21\u5f0f(LT\u4e0eET) \u6c34\u5e73\u89e6\u53d1(level triggered, LT) epoll\u7684\u7f3a\u7701\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5e76\u4e14\u540c\u65f6\u652f\u6301 block \u548c non-block socket \u5728\u8fd9\u79cd\u505a\u6cd5\u4e2d\uff0c\u5185\u6838\u544a\u8bc9\u4f60\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u5c31\u7eea\u4e86\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5c31\u7eea\u7684 fd \u8fdb\u884c IO \u64cd\u4f5c\u3002\u5982\u679c\u4f60\u4e0d\u4f5c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5185\u6838\u8fd8\u662f\u4f1a\u7ee7\u7eed\u901a\u77e5\u4f60\u7684 \u8fb9\u6cbf\u89e6\u53d1(edge triggered, ET) \u662f\u9ad8\u901f\u5de5\u4f5c\u65b9\u5f0f\uff0c\u53ea\u652f\u6301 non-block socket\uff0c\u9700\u8981\u5bf9\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bbe\u7f6e\u624d\u80fd\u5b9e\u73b0 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u5f53\u63cf\u8ff0\u7b26\u4ece\u672a\u5c31\u7eea\u53d8\u4e3a\u5c31\u7eea\u65f6\uff0c\u5185\u6838\u901a\u8fc7epoll\u544a\u8bc9\u4f60\u3002\u7136\u540e\u5b83\u4f1a\u5047\u8bbe\u4f60\u77e5\u9053\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u7ecf\u5c31\u7eea\uff0c\u5e76\u4e14\u4e0d\u4f1a\u518d\u4e3a\u90a3\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u9001\u66f4\u591a\u7684\u5c31\u7eea\u901a\u77e5\uff0c\u76f4\u5230\u4f60\u505a\u4e86\u67d0\u4e9b\u64cd\u4f5c\u5bfc\u81f4\u90a3\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u518d\u4e3a\u5c31\u7eea\u72b6\u6001\u4e86\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u76f4\u4e0d\u5bf9\u8fd9\u4e2a fd \u4f5c IO \u64cd\u4f5c\uff08\u4ece\u800c\u5bfc\u81f4\u5b83\u518d\u6b21\u53d8\u6210\u672a\u5c31\u7eea\uff09\uff0c\u5185\u6838\u4e0d\u4f1a\u53d1\u9001\u66f4\u591a\u7684\u901a\u77e5\uff08only once\uff09 \u533a\u522b\u4e0e\u8bf4\u660e ET \u6a21\u5f0f\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86 epoll \u4e8b\u4ef6\u88ab\u91cd\u590d\u89e6\u53d1\u7684\u6b21\u6570\uff0c\u56e0\u6b64\u6548\u7387\u8981\u6bd4 LT \u6a21\u5f0f\u9ad8 epoll\u5de5\u4f5c\u5728 ET \u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u4f7f\u7528\u975e\u963b\u585e\u5957\u63a5\u53e3\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u7684\u963b\u585e\u8bfb/\u963b\u585e\u5199\u64cd\u4f5c\u628a\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4efb\u52a1\u997f\u6b7b \u6240\u4ee5\u5982\u679c\u4f7f\u7528ET\u4e14\u7f13\u51b2\u533a\u5185\u5bb9\u4e0d\u80fd\u4e00\u6b21\u6027\u8bfb\u5b8c\uff0c \u9700\u8981\u5199\u4e00\u4e2a\u5faa\u73af\u5c06\u5185\u5bb9\u5168\u90e8\u8bfb\u53d6\uff0c\u4e14\u9700\u8981\u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e \u8bf4\u660e\uff1a\u5047\u8bbe\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u8bfb\u4e8b\u4ef6\uff0c\u5373\u68c0\u6d4bfd\u7684\u8bfb\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u5982\u679c\u8bfb\u7f13\u51b2\u533a\u6709\u6570\u636e \uff0cepoll\u68c0\u6d4b\u5230\u4e86\u4f1a\u7ed9\u7528\u6237\u901a\u77e5 LT \u7528\u6237\u4e0d\u8bfb\u6570\u636e\uff0c\u6570\u636e\u4e00\u76f4\u5728\u7f13\u51b2\u533a\uff0cepoll \u4f1a\u4e00\u76f4\u901a\u77e5 \u7528\u6237\u53ea\u8bfb\u4e86\u4e00\u90e8\u5206\u6570\u636e\uff0cepoll\u4f1a\u901a\u77e5 \u7f13\u51b2\u533a\u7684\u6570\u636e\u8bfb\u5b8c\u4e86\uff0c\u4e0d\u901a\u77e5 ET \u7528\u6237\u4e0d\u8bfb\u6570\u636e\uff0c\u6570\u636e\u4e00\u81f4\u5728\u7f13\u51b2\u533a\u4e2d\uff0cepoll\u4e0b\u6b21\u68c0\u6d4b\u7684\u65f6\u5019\u5c31\u4e0d\u901a\u77e5\u4e86 \u7528\u6237\u53ea\u8bfb\u4e86\u4e00\u90e8\u5206\u6570\u636e\uff0cepoll\u4e0d\u901a\u77e5 \u7f13\u51b2\u533a\u7684\u6570\u636e\u8bfb\u5b8c\u4e86\uff0c\u4e0d\u901a\u77e5 \u4ee3\u7801(ET) \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/epoll.h> #include <fcntl.h> #include <errno.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } int opt = 1; setsockopt(listenfd, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)); // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u521b\u5efaepoll\u5b9e\u4f8b int epfd = epoll_create(100); // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u5b9e\u4f8b struct epoll_event event; event.events = EPOLLIN; event.data.fd = listenfd; ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &event); if (ret == -1) { perror(\"epoll_ctl\"); exit(-1); } // \u6b64\u7ed3\u6784\u4f53\u7528\u6765\u4fdd\u5b58\u5185\u6838\u6001\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f struct epoll_event events[1024]; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // \u4f7f\u7528epoll\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = epoll_wait(epfd, events, 1024, -1); // \u65b9\u4fbf\u89c2\u5bdfepoll\u901a\u77e5\u4e86\u51e0\u6b21 printf(\"num = %d\\n\", num); if (num == -1) { perror(\"poll\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u904d\u5386\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408 for (int i = 0; i < num; i++) { // \u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 int curfd = events[i].data.fd; if (curfd == listenfd) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // \u5c06\u901a\u4fe1\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e int flag = fcntl(connfd, F_GETFL); flag |= O_NONBLOCK; fcntl(connfd, F_SETFL, flag); // \u5c06\u4fe1\u606f\u52a0\u5165\u76d1\u542c\u96c6\u5408\uff0c\u8bbe\u7f6e\u4e3aET\u6a21\u5f0f event.events = EPOLLIN | EPOLLET; event.data.fd = connfd; epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &event); } else { // \u53ea\u68c0\u6d4b\u8bfb\u4e8b\u4ef6 if (events[i].events & EPOLLOUT) { continue; } // \u63a5\u6536\u6d88\u606f\uff0c\u5c06\u7f13\u51b2\u533a\u51cf\u5c11\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u8bf4\u660e\u4e00\u6b21\u6027\u65e0\u6cd5\u8bfb\u53d6\u6570\u636e\u65f6\uff0cepoll\u7684\u64cd\u4f5c // \u9700\u8981\u5faa\u73af\u8bfb\u53d6\u6570\u636e char recv_buf[5] = {0}; while ((ret = read(curfd, recv_buf, sizeof(recv_buf))) > 0) { // \u5e94\u8be5\u662f\u6253\u5370\u7684\u65f6\u5019\u6700\u540e\u6ca1\u6709\u7ed3\u675f\u7b26 char test_buf[6] = {0}; strcpy(test_buf, recv_buf); printf(\"recv server data : %s\\n\", test_buf); // write(STDOUT_FILENO, recv_buf, ret); // write(curfd, recv_buf, strlen(recv_buf)); write(curfd, recv_buf, sizeof(recv_buf)); memset(recv_buf, 0, sizeof(recv_buf)); } if (ret == -1) { if(errno == EAGAIN) { printf(\"data over...\\n\"); }else { perror(\"read\"); exit(-1); } } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(curfd); epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL); break; } } } } } close(listenfd); close(epfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e\uff0c\u4fee\u6539\u4e3a\u4ece\u952e\u76d8\u83b7\u53d6\u5185\u5bb9 fgets(recv_buf, sizeof(recv_buf), stdin); write(connfd, recv_buf, strlen(recv_buf)); // \u56e0\u4e3a\u7528\u7684\u65f6\u540c\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e0d\u6e05\u7a7a\u5c31\u4f1a\u6709\u6b8b\u7559\u6570\u636e memset(recv_buf, 0, sizeof(recv_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; } UDP\u4e0e\u672c\u5730\u5957\u63a5\u5b57 \u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/04 UDP\u4e0e\u672c\u5730\u5957\u63a5\u5b57 UDP\u901a\u4fe1 \u901a\u4fe1\u6d41\u7a0b \u6d88\u606f\u6536\u53d1\u51fd\u6570 ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen); \u529f\u80fd\uff1audp\u53d1\u9001\u6d88\u606f\u51fd\u6570 \u53c2\u6570 sockfd \uff1a\u901a\u4fe1\u7684\u5957\u63a5\u5b57(\u6587\u4ef6\u63cf\u8ff0\u7b26) buf \uff1a\u8981\u53d1\u9001\u7684\u6570\u636e len \uff1a\u53d1\u9001\u6570\u636e\u7684\u957f\u5ea6 flags \uff1a\u8bbe\u7f6e\u4e3a0\u5373\u53ef dest_addr \uff1a\u901a\u4fe1\u7684\u53e6\u5916\u4e00\u7aef\u7684\u5730\u5740\u4fe1\u606f addrlen \uff1a\u5730\u5740\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u5373 sizeof(dest_addr) \u8fd4\u56de\u503c\uff1a\u5931\u8d25-1\uff0c\u5426\u5219\u8fd4\u56de\u53d1\u9001\u6570\u636e\u5927\u5c0f ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen); \u529f\u80fd\uff1audp\u63a5\u6536\u6d88\u606f\u51fd\u6570 \u53c2\u6570 sockfd \uff1a\u901a\u4fe1\u7684\u5957\u63a5\u5b57(\u6587\u4ef6\u63cf\u8ff0\u7b26) buf \uff1a\u63a5\u6536\u7684\u6570\u636e len \uff1a\u63a5\u6536\u6570\u636e\u7684\u957f\u5ea6 flags \uff1a\u8bbe\u7f6e\u4e3a0\u5373\u53ef dest_addr \uff1a\u901a\u4fe1\u7684\u53e6\u5916\u4e00\u7aef\u7684\u5730\u5740\u4fe1\u606f\uff0c\u4e0d\u9700\u8981\u8bbe\u7f6e\u4e3aNULL\u5373\u53ef addrlen \uff1a\u5730\u5740\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u5373 sizeof(dest_addr) \u8fd4\u56de\u503c\uff1a\u5931\u8d25-1\uff0c\u5426\u5219\u8fd4\u56de\u53d1\u9001\u6570\u636e\u5927\u5c0f \u5b9e\u4f8b\uff1aUDP\u901a\u4fe1 \u8bf4\u660e \u670d\u52a1\u7aef\u4e0d\u9700\u8981\u8bbe\u7f6e\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26=>\u56e0\u4e3a\u4e0d\u9700\u8981\u4e09\u6b21\u63e1\u624b \u4e0d\u9700\u8981\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\uff0c\u6216\u8005IO\u591a\u8def\u590d\u7528\u5373\u53ef\u5b9e\u73b0\u591a\u5e76\u53d1 \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2. \u7ed1\u5b9a\u672c\u673a\u5730\u5740(\u670d\u52a1\u7aef) struct sockaddr_in server_addr; server_addr.sin_family = AF_INET; server_addr.sin_port = htons(PORT); inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); int ret = bind(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if(ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u901a\u4fe1 while (1) { char recvbuf[128]; char ipbuf[16]; struct sockaddr_in cliaddr; int len = sizeof(cliaddr); // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, recvbuf, sizeof(recvbuf), 0, (struct sockaddr *)&cliaddr, &len); printf(\"client IP : %s, Port : %d\\n\", inet_ntop(AF_INET, &cliaddr.sin_addr.s_addr, ipbuf, sizeof(ipbuf)), ntohs(cliaddr.sin_port)); printf(\"client say : %s\\n\", recvbuf); // \u53d1\u9001\u6570\u636e sendto(connfd, recvbuf, strlen(recvbuf) + 1, 0, (struct sockaddr *)&cliaddr, sizeof(cliaddr)); } return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2. \u901a\u4fe1 // \u8bbe\u7f6e\u670d\u52a1\u5668\u4fe1\u606f struct sockaddr_in server_addr; server_addr.sin_family = AF_INET; server_addr.sin_port = htons(PORT); inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); int num = 0; while (1) { // \u53d1\u9001\u6570\u636e char sendBuf[128]; sprintf(sendBuf, \"hello , i am client %d \\n\", num++); sendto(connfd, sendBuf, strlen(sendBuf) + 1, 0, (struct sockaddr *)&server_addr, sizeof(server_addr)); // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, sendBuf, sizeof(sendBuf), 0, NULL, NULL); printf(\"server say : %s\\n\", sendBuf); sleep(1); } return 0; } \u5e7f\u64ad \u7b80\u4ecb \u53ea\u80fd\u5728\u5c40\u57df\u7f51\u4e2d\u4f7f\u7528 \u5ba2\u6237\u7aef\u9700\u8981\u7ed1\u5b9a\u670d\u52a1\u5668\u5e7f\u64ad\u4f7f\u7528\u7684\u7aef\u53e3\uff0c\u624d\u53ef\u4ee5\u63a5\u6536\u5230\u5e7f\u64ad\u6d88\u606f \u5411\u5b50\u7f51\u4e2d\u591a\u53f0\u8ba1\u7b97\u673a\u53d1\u9001\u6d88\u606f\uff0c\u5e76\u4e14\u5b50\u7f51\u4e2d\u6240\u6709\u7684\u8ba1\u7b97\u673a\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u53d1\u9001\u65b9\u53d1\u9001\u7684\u6d88\u606f\uff0c\u6bcf\u4e2a\u5e7f\u64ad\u6d88\u606f\u90fd\u5305\u542b\u4e00\u4e2a\u7279\u6b8a\u7684IP\u5730\u5740\uff0c\u8fd9\u4e2aIP\u4e2d\u5b50\u7f51\u5185\u4e3b\u673a\u6807\u5fd7\u90e8\u5206\u7684\u4e8c\u8fdb\u5236\u5168\u90e8\u4e3a1 \u65b9\u6cd5 \u901a\u8fc7\u8bbe\u7f6e setsockopt \u51fd\u6570\uff0c\u670d\u52a1\u7aef\u8fdb\u884c\u8bbe\u7f6e\uff08\u53d1\u9001\u5e7f\u64ad\u7aef\uff09 int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); sockfd \uff1a\u901a\u4fe1\u5957\u63a5\u5b57 level \uff1a\u8bbe\u7f6e\u4e3a SOL_SOCKET optname \uff1a\u8bbe\u7f6e\u4e3a SO_BROADCAST optval \uff1aint\u7c7b\u578b\u7684\u503c\uff0c\u4e3a1\u8868\u793a\u5141\u8bb8\u5e7f\u64ad optlen \uff1aoptval\u7684\u5927\u5c0f \u6ce8\u610f\u4e8b\u9879 \u6b64\u65f6\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u754c\u9650\u6a21\u7cca\uff0c\u6309\u7406\u6765\u8bf4\uff0c\u9700\u8981 bind \u7aef\u4e3a\u670d\u52a1\u7aef\uff0c\u800c\u5728\u5e7f\u64ad\u65f6\uff0c\u9700\u8981 bind \u7684\u4e00\u7aef\u4e3a\u63a5\u6536\u6d88\u606f\u7aef \u53d1\u9001\u5e7f\u64ad\u7aef \u9700\u8981\u901a\u8fc7 setsockopt \u8bbe\u7f6e\u76f8\u5173\u4fe1\u606f\uff0c\u5e7f\u64ad\u5730\u5740\u9700\u8981\u6839\u636e\u672c\u5730IP\u8fdb\u884c\u914d\u7f6e\uff0c\u5373 xxx.xxx.xxx.255 \u63a5\u6536\u5e7f\u64ad\u7aef \u9700\u8981\u7ed1\u5b9a\u5e7f\u64ad\u5730\u5740\u6216\u8bbe\u7f6e\u4e3a\u63a5\u6536\u4efb\u610f\u5730\u5740\u6d88\u606f \u63a5\u6536\u7aef\u5728\u8fde\u5165\u65f6\uff0c\u5df2\u7ecf\u8fc7\u53bb\u7684\u6d88\u606f\u5c06\u4e0d\u88ab\u63a5\u6536 \u5b9e\u4f8b\uff1a\u5e7f\u64ad \u670d\u52a1\u7aef\uff08\u53d1\u9001\u5e7f\u64ad\u7aef\uff09 #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define BROADCASTIP \"192.168.213.255\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u8bbe\u7f6e\u5e7f\u64ad\u5c5e\u6027 int op = 1; setsockopt(connfd, SOL_SOCKET, SO_BROADCAST, &op, sizeof(op)); // 3.\u521b\u5efa\u4e00\u4e2a\u5e7f\u64ad\u7684\u5730\u5740 struct sockaddr_in broad_addr; broad_addr.sin_family = AF_INET; broad_addr.sin_port = htons(PORT); inet_pton(AF_INET, BROADCASTIP, &broad_addr.sin_addr.s_addr); // 4. \u901a\u4fe1 int num = 0; while (1) { char sendBuf[128]; sprintf(sendBuf, \"hello, client....%d\", num++); // \u53d1\u9001\u6570\u636e sendto(connfd, sendBuf, strlen(sendBuf) + 1, 0, (struct sockaddr *)&broad_addr, sizeof(broad_addr)); printf(\"\u5e7f\u64ad\u7684\u6570\u636e\uff1a%s\\n\", sendBuf); sleep(1); } close(connfd); return 0; } \u5ba2\u6237\u7aef\uff08\u63a5\u6536\u5e7f\u64ad\u7aef\uff09 #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define BROADCASTIP \"192.168.213.255\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u5ba2\u6237\u7aef\u7ed1\u5b9a\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3 struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_port = htons(PORT); // \u8bbe\u7f6e\u4e3a\u63a5\u6536\u4efb\u610f\u7f51\u5740\u4fe1\u606f\u6216\u6307\u5b9a\u591a\u64ad\u5730\u5740 // addr.sin_addr.s_addr = INADDR_ANY; inet_pton(AF_INET, BROADCASTIP, &addr.sin_addr.s_addr); // 3. \u5c06\u4fe1\u606f\u8fdb\u884c\u7ed1\u5b9a int ret = bind(connfd, (struct sockaddr *)&addr, sizeof(addr)); if(ret == -1) { perror(\"bind\"); exit(-1); } // 4. \u901a\u4fe1 while (1) { char buf[128]; // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, buf, sizeof(buf), 0, NULL, NULL); printf(\"server say : %s\\n\", buf); } close(connfd); return 0; } \u7ec4\u64ad(\u591a\u64ad\uff09 \u7b80\u4ecb \u7ec4\u64ad\u65e2\u53ef\u4ee5\u7528\u4e8e\u5c40\u57df\u7f51\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5e7f\u57df\u7f51 \u5ba2\u6237\u7aef\u9700\u8981\u52a0\u5165\u591a\u64ad\u7ec4\uff0c\u624d\u80fd\u63a5\u6536\u5230\u591a\u64ad\u7684\u6570\u636e \u5355\u64ad\u5730\u5740\u6807\u8bc6\u5355\u4e2a IP \u63a5\u53e3\uff0c\u5e7f\u64ad\u5730\u5740\u6807\u8bc6\u67d0\u4e2a\u5b50\u7f51\u7684\u6240\u6709 IP \u63a5\u53e3\uff0c\u591a\u64ad\u5730\u5740\u6807\u8bc6\u4e00\u7ec4 IP \u63a5\u53e3 \u5355\u64ad\u548c\u5e7f\u64ad\u662f\u5bfb\u5740\u65b9\u6848\u7684\u4e24\u4e2a\u6781\u7aef\uff08\u8981\u4e48\u5355\u4e2a\u8981\u4e48\u5168\u90e8\uff09\uff0c\u591a\u64ad\u5219\u610f\u5728\u4e24\u8005\u4e4b\u95f4\u63d0\u4f9b\u4e00\u79cd\u6298\u4e2d\u65b9\u6848 \u591a\u64ad\u6570\u636e\u62a5\u53ea\u5e94\u8be5\u7531\u5bf9\u5b83\u611f\u5174\u8da3\u7684\u63a5\u53e3\u63a5\u6536\uff0c\u4e5f\u5c31\u662f\u8bf4\u7531\u8fd0\u884c\u76f8\u5e94\u591a\u64ad\u4f1a\u8bdd\u5e94\u7528\u7cfb\u7edf\u7684\u4e3b\u673a\u4e0a\u7684\u63a5\u53e3\u63a5\u6536\u3002\u53e6\u5916\uff0c\u5e7f\u64ad\u4e00\u822c\u5c40\u9650\u4e8e\u5c40\u57df\u7f51\u5185\u4f7f\u7528\uff0c\u800c\u591a\u64ad\u5219\u65e2\u53ef\u4ee5\u7528\u4e8e\u5c40\u57df\u7f51\uff0c\u4e5f\u53ef\u4ee5\u8de8\u5e7f\u57df\u7f51\u4f7f\u7528 \u65b9\u6cd5 \u901a\u8fc7\u8bbe\u7f6e setsockopt \u51fd\u6570\uff0c\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u90fd\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); \u670d\u52a1\u7aef\uff1a\u8bbe\u7f6e\u591a\u64ad\u7684\u4fe1\u606f\uff0c\u5916\u51fa\u63a5\u53e3 sockfd \uff1a\u901a\u4fe1\u5957\u63a5\u5b57 level \uff1a\u8bbe\u7f6e\u4e3a IPPROTO_IP optname \uff1a\u8bbe\u7f6e\u4e3a IP_MULTICAST_IF optval \uff1a struct in_addr \u7c7b\u578b optlen \uff1aoptval\u7684\u5927\u5c0f \u5ba2\u6237\u7aef\uff1a\u52a0\u5165\u591a\u64ad\u7ec4 sockfd \uff1a\u901a\u4fe1\u5957\u63a5\u5b57 level \uff1a\u8bbe\u7f6e\u4e3a IPPROTO_IP optname \uff1a\u8bbe\u7f6e\u4e3a IP_ADD_MEMBERSHIP optval \uff1a struct ip_mreq \u7c7b\u578b optlen \uff1aoptval\u7684\u5927\u5c0f typedef uint32_t in_addr_t; struct in_addr { in_addr_t s_addr; }; struct ip_mreq { /* IP multicast address of group. */ struct in_addr imr_multiaddr; // \u7ec4\u64ad\u7684IP\u5730\u5740 /* Local IP address of interface. */ struct in_addr imr_interface; // \u672c\u5730\u7684IP\u5730\u5740 }; \u6ce8\u610f\u4e8b\u9879 \u670d\u52a1\u7aef\u901a\u8fc7 setsockopt \u8bbe\u7f6e optval \u65f6\uff0c\u9700\u8981\u6307\u5b9a\u591a\u64ad\u5730\u5740\uff0c\u5373 239.0.0.0~239.255.255.255 \u5176\u4e2d\u4e00\u4e2a\u5373\u53ef \u5b9e\u4f8b\uff1a\u7ec4\u64ad \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define MULTIIP \"239.0.0.10\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u8bbe\u7f6e\u591a\u64ad\u5c5e\u6027 struct in_addr op; // \u521d\u59cb\u5316\u591a\u64ad\u5730\u5740 inet_pton(AF_INET, MULTIIP, &op.s_addr); setsockopt(connfd, IPPROTO_IP, IP_MULTICAST_IF, &op, sizeof(op)); // 3.\u521d\u59cb\u5316\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f struct sockaddr_in cliaddr; cliaddr.sin_family = AF_INET; cliaddr.sin_port = htons(PORT); inet_pton(AF_INET, MULTIIP, &cliaddr.sin_addr.s_addr); // 4. \u901a\u4fe1 int num = 0; while (1) { char sendBuf[128]; sprintf(sendBuf, \"hello, client....%d\", num++); // \u53d1\u9001\u6570\u636e sendto(connfd, sendBuf, strlen(sendBuf) + 1, 0, (struct sockaddr *)&cliaddr, sizeof(cliaddr)); printf(\"\u591a\u64ad\u7684\u6570\u636e\uff1a%s\\n\", sendBuf); sleep(1); } close(connfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define MULTIIP \"239.0.0.10\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u5ba2\u6237\u7aef\u7ed1\u5b9a\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3 struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_port = htons(PORT); // \u8bbe\u7f6e\u4e3a\u63a5\u6536\u4efb\u610f\u7f51\u5740\u4fe1\u606f\u6216\u6307\u5b9a\u591a\u64ad\u5730\u5740 // addr.sin_addr.s_addr = INADDR_ANY; inet_pton(AF_INET, MULTIIP, &addr.sin_addr.s_addr); // 3. \u5c06\u4fe1\u606f\u8fdb\u884c\u7ed1\u5b9a int ret = bind(connfd, (struct sockaddr *)&addr, sizeof(addr)); if(ret == -1) { perror(\"bind\"); exit(-1); } // 4. \u52a0\u5165\u591a\u64ad\u7ec4 // \u8bbe\u7f6e\u591a\u64ad\u5c5e\u6027 struct ip_mreq op; inet_pton(AF_INET, MULTIIP, &op.imr_multiaddr.s_addr); op.imr_interface.s_addr = INADDR_ANY; // \u52a0\u5165\u591a\u64ad\u7ec4 setsockopt(connfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &op, sizeof(op)); // 5. \u901a\u4fe1 while (1) { char buf[128]; // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, buf, sizeof(buf), 0, NULL, NULL); printf(\"server say : %s\\n\", buf); } close(connfd); return 0; } \u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1 \u7b80\u4ecb \u672c\u5730\u5957\u63a5\u5b57\u7684\u4f5c\u7528\uff1a\u672c\u5730\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u5305\u62ec \u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u901a\u4fe1(\u7236\u5b50\u8fdb\u7a0b) \u548c \u6ca1\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u672c\u5730\u5957\u63a5\u5b57\u5b9e\u73b0\u6d41\u7a0b\u548c\u7f51\u7edc\u5957\u63a5\u5b57\u7c7b\u4f3c\uff0c\u4e00\u822c\u91c7\u7528 TCP\u7684\u901a\u4fe1\u6d41\u7a0b \u901a\u4fe1\u6d41\u7a0b \u670d\u52a1\u7aef \u521b\u5efa\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff1a int lfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, 0); \u76d1\u542c\u7684\u5957\u63a5\u5b57\u7ed1\u5b9a\u672c\u5730\u7684\u5957\u63a5\u5b57\u6587\u4ef6\uff1a bind(lfd, addr, len); \uff0c\u7ed1\u5b9a\u6210\u529f\u4e4b\u540e\uff0c\u6307\u5b9a\u7684 sun_path \u4e2d\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u4f1a\u81ea\u52a8\u751f\u6210 \u76d1\u542c\uff1a listen(lfd, 100); \u7b49\u5f85\u5e76\u63a5\u53d7\u8fde\u63a5\u8bf7\u6c42\uff1a int cfd = accept(lfd, &cliaddr, len); \u901a\u4fe1 \u63a5\u6536\u6570\u636e\uff1a read/recv \u53d1\u9001\u6570\u636e\uff1a write/send \u5173\u95ed\u8fde\u63a5\uff1a close() \u5ba2\u6237\u7aef \u521b\u5efa\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff1a int cfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, 0); \u76d1\u542c\u7684\u5957\u63a5\u5b57\u7ed1\u5b9a\u672c\u5730\u7684IP\u7aef\u53e3\uff1a bind(cfd, &addr, len); \uff0c\u7ed1\u5b9a\u6210\u529f\u4e4b\u540e\uff0c\u6307\u5b9a\u7684sun_path\u4e2d\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u4f1a\u81ea\u52a8\u751f\u6210 \u8fde\u63a5\u670d\u52a1\u5668\uff1a connect(fd, &serveraddr, sizeof(serveraddr)); \u901a\u4fe1 \u63a5\u6536\u6570\u636e\uff1a read/recv \u53d1\u9001\u6570\u636e\uff1a write/send \u5173\u95ed\u8fde\u63a5\uff1a close() \u6ce8\u610f\u4e8b\u9879 \u5730\u5740\u7ed3\u6784\u4f53\u4e3a\uff1a struct sockaddr_un \u7c7b\u578b c // \u5934\u6587\u4ef6: sys/un.h #define UNIX_PATH_MAX 108 struct sockaddr_un { sa_family_t sun_family; // \u5730\u5740\u65cf\u534f\u8bae af_local char sun_path[UNIX_PATH_MAX]; // \u5957\u63a5\u5b57\u6587\u4ef6\u7684\u8def\u5f84, \u8fd9\u662f\u4e00\u4e2a\u4f2a\u6587\u4ef6, \u5927\u5c0f\u6c38\u8fdc=0 }; \u4f7f\u7528 unlink \u89e3\u9664\u5360\u7528\uff1a\u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\u901a\u8fc7\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u7528unlink\u89e3\u9664\u5360\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\"bind: Address already in use\" \u5b9e\u4f8b\uff1a\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u670d\u52a1\u7aef #include <stdio.h> #include <arpa/inet.h> #include <sys/un.h> #include <stdlib.h> #include <string.h> #include <unistd.h> int main() { // \u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\u901a\u8fc7\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u7528unlink\u89e3\u9664\u5360\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\"bind: Address already in use\" unlink(\"server.sock\"); // 1. \u521b\u5efa\u76d1\u542c\u5957\u63a5\u5b57 int listenfd = socket(PF_LOCAL, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f struct sockaddr_un server_addr; server_addr.sun_family = AF_LOCAL; strcpy(server_addr.sun_path, \"server.sock\"); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // 4. \u63a5\u6536\u8fde\u63a5 struct sockaddr_un client_addr; int client_addr_len = sizeof(client_addr); client_addr.sun_family = AF_LOCAL; strcpy(server_addr.sun_path, \"client.sock\"); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"connect\"); exit(-1); } // 5. \u901a\u4fe1 while (1) { // \u63a5\u6536\u4fe1\u606f char buf[1024]; int buf_len = recv(connfd, buf, sizeof(buf), 0); if (buf_len == -1) { perror(\"recv\"); exit(-1); } else if (buf_len == 0) { printf(\"client close...\\n\"); break; } else { printf(\"client say : %s\\n\", buf); // \u53d1\u9001\u4fe1\u606f send(connfd, buf, strlen(buf) + 1, 0); } } // 6. \u5173\u95ed\u5957\u63a5\u5b57 close(connfd); close(listenfd); return 0; } \u5ba2\u6237\u7aef #include <stdio.h> #include <arpa/inet.h> #include <sys/un.h> #include <stdlib.h> #include <string.h> #include <unistd.h> int main() { // \u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\u901a\u8fc7\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u7528unlink\u89e3\u9664\u5360\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\"bind: Address already in use\" unlink(\"client.sock\"); // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_LOCAL, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_un client_addr; client_addr.sun_family = AF_LOCAL; strcpy(client_addr.sun_path, \"client.sock\"); int ret = bind(connfd, (struct sockaddr*)&client_addr, sizeof(client_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u5efa\u7acb\u8fde\u63a5 struct sockaddr_un server_addr; server_addr.sun_family = AF_LOCAL; strcpy(server_addr.sun_path, \"server.sock\"); ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } int num = 0; // 5. \u901a\u4fe1 while (1) { // \u53d1\u9001\u4fe1\u606f char buf[1024]; sprintf(buf, \"the data is %d\", num++); send(connfd, buf, strlen(buf) + 1, 0); // \u63a5\u6536\u4fe1\u606f int buf_len = recv(connfd, buf, sizeof(buf), 0); if (buf_len == -1) { perror(\"recv\"); exit(-1); } else if (buf_len == 0) { printf(\"server close...\\n\"); break; } else { printf(\"server say : %s\\n\", buf); } sleep(1); } // 6. \u5173\u95ed\u5957\u63a5\u5b57 close(connfd); return 0; }","title":"\u7f51\u7edc\u57fa\u7840"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_1","text":"","title":"\u7f51\u7edc\u57fa\u7840"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_2","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/01 \u7f51\u7edc\u57fa\u7840","title":"\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_3","text":"","title":"\u7f51\u7edc\u7ed3\u6784\u6a21\u5f0f"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#cs","text":"","title":"C/S\u7ed3\u6784"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_4","text":"\u670d\u52a1\u5668 - \u5ba2\u6237\u673a\uff0c\u5373 Client - Server\uff08C/S\uff09 \u7ed3\u6784\u3002C/S \u7ed3\u6784\u901a\u5e38\u91c7\u53d6\u4e24\u5c42\u7ed3\u6784\u3002\u670d\u52a1\u5668\u8d1f\u8d23\u6570\u636e\u7684\u7ba1\u7406\uff0c\u5ba2\u6237\u673a\u8d1f\u8d23\u5b8c\u6210\u4e0e\u7528\u6237\u7684\u4ea4\u4e92\u4efb\u52a1\u3002\u5ba2\u6237\u673a\u662f\u56e0\u7279\u7f51\u4e0a\u8bbf\u95ee\u522b\u4eba\u4fe1\u606f\u7684\u673a\u5668\uff0c\u670d\u52a1\u5668\u5219\u662f\u63d0\u4f9b\u4fe1\u606f\u4f9b\u4eba\u8bbf\u95ee\u7684\u8ba1\u7b97\u673a\u3002 \u5ba2\u6237\u673a\u901a\u8fc7\u5c40\u57df\u7f51\u4e0e\u670d\u52a1\u5668\u76f8\u8fde\uff0c\u63a5\u53d7\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u5e76\u901a\u8fc7\u7f51\u7edc\u5411\u670d\u52a1\u5668\u63d0\u51fa\u8bf7\u6c42\uff0c\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u64cd\u4f5c\u3002\u670d\u52a1\u5668\u63a5\u53d7\u5ba2\u6237\u673a\u7684\u8bf7\u6c42\uff0c\u5c06\u6570\u636e\u63d0\u4ea4\u7ed9\u5ba2\u6237\u673a\uff0c\u5ba2\u6237\u673a\u5c06\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5e76\u5c06\u7ed3\u679c\u5448\u73b0\u7ed9\u7528\u6237\u3002\u670d\u52a1\u5668\u8fd8\u8981\u63d0\u4f9b\u5b8c\u5584\u5b89\u5168\u4fdd\u62a4\u53ca\u5bf9\u6570\u636e\u5b8c\u6574\u6027\u7684\u5904\u7406\u7b49\u64cd\u4f5c\uff0c\u5e76\u5141\u8bb8\u591a\u4e2a\u5ba2\u6237\u673a\u540c\u65f6\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u8fd9\u5c31\u5bf9\u670d\u52a1\u5668\u7684\u786c\u4ef6\u5904\u7406\u6570\u636e\u80fd\u529b\u63d0\u51fa\u4e86\u5f88\u9ad8\u7684\u8981\u6c42\u3002 \u5728C/S\u7ed3\u6784\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u670d\u52a1\u5668\u90e8\u5206\u548c\u5ba2\u6237\u673a\u90e8\u5206\u3002\u670d\u52a1\u5668\u90e8\u5206\u662f\u591a\u4e2a\u7528\u6237\u5171\u4eab\u7684\u4fe1\u606f\u4e0e\u529f\u80fd\uff0c\u6267\u884c\u540e\u53f0\u670d\u52a1\uff0c\u5982\u63a7\u5236\u5171\u4eab\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u7b49\uff1b\u5ba2\u6237\u673a\u90e8\u5206\u4e3a\u7528\u6237\u6240\u4e13\u6709\uff0c\u8d1f\u8d23\u6267\u884c\u524d\u53f0\u529f\u80fd\uff0c\u5728\u51fa\u9519\u63d0\u793a\u3001\u5728\u7ebf\u5e2e\u52a9\u7b49\u65b9\u9762\u90fd\u6709\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5b50\u7a0b\u5e8f\u95f4\u81ea\u7531\u5207\u6362\u3002","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_5","text":"\u80fd\u5145\u5206\u53d1\u6325\u5ba2\u6237\u7aef PC \u7684\u5904\u7406\u80fd\u529b\uff0c\u5f88\u591a\u5de5\u4f5c\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u5904\u7406\u540e\u518d\u63d0\u4ea4\u7ed9\u670d\u52a1\u5668\uff0c\u6240\u4ee5 C/S \u7ed3\u6784\u5ba2\u6237\u7aef\u54cd\u5e94\u901f\u5ea6\u5feb \u64cd\u4f5c\u754c\u9762\u6f02\u4eae\u3001\u5f62\u5f0f\u591a\u6837\uff0c\u53ef\u4ee5\u5145\u5206\u6ee1\u8db3\u5ba2\u6237\u81ea\u8eab\u7684\u4e2a\u6027\u5316\u8981\u6c42 C/S \u7ed3\u6784\u7684\u7ba1\u7406\u4fe1\u606f\u7cfb\u7edf\u5177\u6709\u8f83\u5f3a\u7684\u4e8b\u52a1\u5904\u7406\u80fd\u529b\uff0c\u80fd\u5b9e\u73b0\u590d\u6742\u7684\u4e1a\u52a1\u6d41\u7a0b \u5b89\u5168\u6027\u8f83\u9ad8\uff0cC/S \u4e00\u822c\u9762\u5411\u76f8\u5bf9\u56fa\u5b9a\u7684\u7528\u6237\u7fa4\uff0c\u7a0b\u5e8f\u66f4\u52a0\u6ce8\u91cd\u6d41\u7a0b\uff0c\u5b83\u53ef\u4ee5\u5bf9\u6743\u9650\u8fdb\u884c\u591a\u5c42\u6b21\u6821\u9a8c\uff0c\u63d0\u4f9b\u4e86\u66f4\u5b89\u5168\u7684\u5b58\u53d6\u6a21\u5f0f\uff0c\u5bf9\u4fe1\u606f\u5b89\u5168\u7684\u63a7\u5236\u80fd\u529b\u5f88\u5f3a\uff0c\u4e00\u822c\u9ad8\u5ea6\u673a\u5bc6\u7684\u4fe1\u606f\u7cfb\u7edf\u91c7\u7528 C/S \u7ed3\u6784\u9002\u5b9c","title":"\u4f18\u70b9"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_6","text":"\u5ba2\u6237\u7aef\u9700\u8981\u5b89\u88c5\u4e13\u7528\u7684\u5ba2\u6237\u7aef\u8f6f\u4ef6\u3002\u9996\u5148\u6d89\u53ca\u5230\u5b89\u88c5\u7684\u5de5\u4f5c\u91cf\uff0c\u5176\u6b21\u4efb\u4f55\u4e00\u53f0\u7535\u8111\u51fa\u95ee\u9898\uff0c\u5982\u75c5\u6bd2\u3001\u786c\u4ef6\u635f\u574f\uff0c\u90fd\u9700\u8981\u8fdb\u884c\u5b89\u88c5\u6216\u7ef4\u62a4\u3002\u7cfb\u7edf\u8f6f\u4ef6\u5347\u7ea7\u65f6\uff0c\u6bcf\u4e00\u53f0\u5ba2\u6237\u673a\u9700\u8981\u91cd\u65b0\u5b89\u88c5\uff0c\u5176\u7ef4\u62a4\u548c\u5347\u7ea7\u6210\u672c\u975e\u5e38\u9ad8 \u5bf9\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e00\u822c\u4e5f\u4f1a\u6709\u9650\u5236\uff0c\u4e0d\u80fd\u591f\u8de8\u5e73\u53f0","title":"\u7f3a\u70b9"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#bs","text":"","title":"B/S\u7ed3\u6784"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_7","text":"B/S \u7ed3\u6784\uff08Browser/Server\uff0c\u6d4f\u89c8\u5668/\u670d\u52a1\u5668\u6a21\u5f0f\uff09 \uff0c\u662f WEB \u5174\u8d77\u540e\u7684\u4e00\u79cd\u7f51\u7edc\u7ed3\u6784\u6a21\u5f0f\uff0cWEB\u6d4f\u89c8\u5668\u662f\u5ba2\u6237\u7aef\u6700\u4e3b\u8981\u7684\u5e94\u7528\u8f6f\u4ef6\u3002\u8fd9\u79cd\u6a21\u5f0f\u7edf\u4e00\u4e86\u5ba2\u6237\u7aef\uff0c\u5c06\u7cfb\u7edf\u529f\u80fd\u5b9e\u73b0\u7684\u6838\u5fc3\u90e8\u5206\u96c6\u4e2d\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u7b80\u5316\u4e86\u7cfb\u7edf\u7684\u5f00\u53d1\u3001\u7ef4\u62a4\u548c\u4f7f\u7528\u3002 \u5ba2\u6237\u673a\u4e0a\u53ea\u8981\u5b89\u88c5\u4e00\u4e2a\u6d4f\u89c8\u5668\uff0c\u5982 Firefox \u6216 InternetExplorer\uff0c\u670d\u52a1\u5668\u5b89\u88c5 SQL Server\u3001Oracle\u3001MySQL \u7b49\u6570\u636e\u5e93\u3002\u6d4f\u89c8\u5668\u901a\u8fc7 Web Server \u540c\u6570\u636e\u5e93\u8fdb\u884c\u6570\u636e\u4ea4\u4e92","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_8","text":"B/S \u67b6\u6784\u6700\u5927\u7684\u4f18\u70b9\u662f\u603b\u4f53\u62e5\u6709\u6210\u672c\u4f4e\u3001\u7ef4\u62a4\u65b9\u4fbf\u3001 \u5206\u5e03\u6027\u5f3a\u3001\u5f00\u53d1\u7b80\u5355\uff0c\u53ef\u4ee5\u4e0d\u7528\u5b89\u88c5\u4efb\u4f55\u4e13\u95e8\u7684\u8f6f\u4ef6\u5c31\u80fd\u5b9e\u73b0\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u5ba2\u6237\u7aef\u96f6\u7ef4\u62a4\uff0c\u7cfb\u7edf\u7684\u6269\u5c55\u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u8981\u6709\u4e00\u53f0\u80fd\u4e0a\u7f51\u7684\u7535\u8111\u5c31\u80fd\u4f7f\u7528","title":"\u4f18\u70b9"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_9","text":"\u901a\u4fe1\u5f00\u9500\u5927\u3001\u7cfb\u7edf\u548c\u6570\u636e\u7684\u5b89\u5168\u6027\u8f83\u96be\u4fdd\u969c \u4e2a\u6027\u7279\u70b9\u660e\u663e\u964d\u4f4e\uff0c\u65e0\u6cd5\u5b9e\u73b0\u5177\u6709\u4e2a\u6027\u5316\u7684\u529f\u80fd\u8981\u6c42 \u534f\u8bae\u4e00\u822c\u662f\u56fa\u5b9a\u7684\uff1ahttp/https \u5ba2\u6237\u7aef\u670d\u52a1\u5668\u7aef\u7684\u4ea4\u4e92\u662f\u8bf7\u6c42-\u54cd\u5e94\u6a21\u5f0f\uff0c\u901a\u5e38\u52a8\u6001\u5237\u65b0\u9875\u9762\uff0c\u54cd\u5e94\u901f\u5ea6\u660e\u663e\u964d\u4f4e","title":"\u7f3a\u70b9"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#mac","text":"","title":"MAC\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_10","text":"\u7f51\u5361 \u662f\u4e00\u5757\u88ab\u8bbe\u8ba1\u7528\u6765\u5141\u8bb8\u8ba1\u7b97\u673a\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u8fdb\u884c\u901a\u8baf\u7684\u8ba1\u7b97\u673a\u786c\u4ef6\uff0c\u53c8\u79f0\u4e3a \u7f51\u7edc\u9002\u914d\u5668 \u6216 \u7f51\u7edc\u63a5\u53e3\u5361NIC \u3002\u5176\u62e5\u6709 MAC \u5730\u5740\uff0c\u5c5e\u4e8e OSI \u6a21\u578b\u7684\u7b2c 2 \u5c42\uff0c\u5b83\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7535\u7f06\u6216\u65e0\u7ebf\u76f8\u4e92\u8fde\u63a5\u3002 \u6bcf\u4e00\u4e2a\u7f51\u5361\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a MAC \u5730\u5740\u7684\u72ec\u4e00\u65e0\u4e8c\u7684 48 \u4f4d\u4e32\u884c\u53f7 \u7f51\u5361\u7684\u4e3b\u8981\u529f\u80fd\uff1a1.\u6570\u636e\u7684\u5c01\u88c5\u4e0e\u89e3\u5c01\u88c5\u30012.\u94fe\u8def\u7ba1\u7406\u30013.\u6570\u636e\u7f16\u7801\u4e0e\u8bd1\u7801","title":"\u7f51\u5361"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#mac_1","text":"MAC \u5730\u5740\uff08Media Access Control Address\uff09 \uff0c\u76f4\u8bd1\u4e3a\u5a92\u4f53\u5b58\u53d6\u63a7\u5236\u4f4d\u5740\uff0c\u4e5f\u79f0\u4e3a\u5c40\u57df\u7f51\u5730\u5740\u3001\u4ee5\u592a\u7f51\u5730\u5740\u3001\u7269\u7406\u5730\u5740\u6216\u786c\u4ef6\u5730\u5740\uff0c\u5b83\u662f\u4e00\u4e2a\u7528\u6765\u786e\u8ba4\u7f51\u7edc\u8bbe\u5907\u4f4d\u7f6e\u7684\u4f4d\u5740\uff0c\u7531\u7f51\u7edc\u8bbe\u5907\u5236\u9020\u5546\u751f\u4ea7\u65f6\u70e7\u5f55\u5728\u7f51\u5361\u4e2d \u5728 OSI \u6a21\u578b\u4e2d\uff0c \u7b2c\u4e09\u5c42\u7f51\u7edc\u5c42\u8d1f\u8d23 IP \u5730\u5740 \uff0c \u7b2c\u4e8c\u5c42\u6570\u636e\u94fe\u8def\u5c42\u5219\u8d1f\u8d23 MAC\u4f4d\u5740 MAC \u5730\u5740\u7528\u4e8e\u5728\u7f51\u7edc\u4e2d\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u7f51\u5361\uff0c\u4e00\u53f0\u8bbe\u5907\u82e5\u6709\u4e00\u6216\u591a\u4e2a\u7f51\u5361\uff0c\u5219\u6bcf\u4e2a\u7f51\u5361\u90fd\u9700\u8981\u5e76\u4f1a\u6709\u4e00\u4e2a\u552f\u4e00\u7684 MAC \u5730\u5740","title":"MAC\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ip","text":"","title":"IP\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_11","text":"IP \u534f\u8bae \u662f\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u76f8\u4e92\u8fde\u63a5\u8fdb\u884c\u901a\u4fe1\u800c\u8bbe\u8ba1\u7684\u534f\u8bae\u3002\u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u5b83\u662f \u80fd\u4f7f\u8fde\u63a5\u5230\u7f51\u4e0a\u7684\u6240\u6709\u8ba1\u7b97\u673a\u7f51\u7edc\u5b9e\u73b0\u76f8\u4e92\u901a\u4fe1\u7684\u4e00\u5957\u89c4\u5219\uff0c\u89c4\u5b9a\u4e86\u8ba1\u7b97\u673a\u5728\u56e0\u7279\u7f51\u4e0a\u8fdb\u884c\u901a\u4fe1\u65f6\u5e94\u5f53\u9075\u5b88\u7684\u89c4\u5219 \u3002\u4efb\u4f55\u5382\u5bb6\u751f\u4ea7\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u53ea\u8981\u9075\u5b88 IP \u534f\u8bae \u5c31\u53ef\u4ee5\u4e0e\u56e0\u7279\u7f51\u4e92\u8fde\u4e92\u901a\u3002\u5404\u4e2a\u5382\u5bb6\u751f\u4ea7\u7684\u7f51\u7edc\u7cfb\u7edf\u548c\u8bbe\u5907\uff0c\u5982\u4ee5\u592a\u7f51\u3001\u5206\u7ec4\u4ea4\u6362\u7f51\u7b49\uff0c\u5b83\u4eec\u76f8\u4e92\u4e4b\u95f4\u4e0d\u80fd\u4e92\u901a\uff0c \u4e0d\u80fd\u4e92\u901a\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\u5b83\u4eec\u6240\u4f20\u9001\u6570\u636e\u7684\u57fa\u672c\u5355\u5143\uff08\u6280\u672f\u4e0a\u79f0\u4e4b\u4e3a\u201c\u5e27\u201d\uff09\u7684\u683c\u5f0f\u4e0d\u540c IP \u534f\u8bae \u5b9e\u9645\u4e0a\u662f\u4e00\u5957\u7531\u8f6f\u4ef6\u7a0b\u5e8f\u7ec4\u6210\u7684\u534f\u8bae\u8f6f\u4ef6\uff0c\u5b83\u628a\u5404\u79cd\u4e0d\u540c\u201c\u5e27\u201d\u7edf\u4e00\u8f6c\u6362\u6210 IP \u6570\u636e\u62a5 \u683c\u5f0f\uff0c\u8fd9\u79cd\u8f6c\u6362\u662f\u56e0\u7279\u7f51\u7684\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u7279\u70b9\uff0c\u4f7f\u6240\u6709\u5404\u79cd\u8ba1\u7b97\u673a\u90fd\u80fd\u5728\u56e0\u7279\u7f51\u4e0a\u5b9e\u73b0\u4e92\u901a\uff0c\u5373\u5177\u6709\u201c\u5f00\u653e\u6027\u201d\u7684\u7279\u70b9\u3002\u6b63\u662f\u56e0\u4e3a\u6709\u4e86 IP \u534f\u8bae\uff0c\u56e0\u7279\u7f51\u624d\u5f97\u4ee5\u8fc5\u901f\u53d1\u5c55\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u7684\u3001\u5f00\u653e\u7684\u8ba1\u7b97\u673a\u901a\u4fe1\u7f51\u7edc\u3002\u56e0\u6b64\uff0cIP \u534f\u8bae\u4e5f\u53ef\u4ee5\u53eb\u505a\u201c\u56e0\u7279\u7f51\u534f\u8bae\u201d IP \u5730\u5740\uff08Internet Protocol Address\uff09\u662f\u6307\u4e92\u8054\u7f51\u534f\u8bae\u5730\u5740\uff0c\u53c8\u8bd1\u4e3a\u7f51\u9645\u534f\u8bae\u5730\u5740\u3002 IP \u5730\u5740\u662f IP\u534f\u8bae\u63d0\u4f9b\u7684\u4e00\u79cd\u7edf\u4e00\u7684\u5730\u5740\u683c\u5f0f\uff0c\u5b83\u4e3a\u4e92\u8054\u7f51\u4e0a\u7684\u6bcf\u4e00\u4e2a\u7f51\u7edc\u548c\u6bcf\u4e00\u53f0\u4e3b\u673a\u5206\u914d\u4e00\u4e2a\u903b\u8f91\u5730\u5740\uff0c\u4ee5\u6b64\u6765\u5c4f\u853d\u7269\u7406\u5730\u5740\u7684\u5dee\u5f02 IP \u5730\u5740\u662f\u4e00\u4e2a 32 \u4f4d\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u901a\u5e38\u88ab\u5206\u5272\u4e3a 4 \u4e2a\u201c 8 \u4f4d\u4e8c\u8fdb\u5236\u6570\u201d\uff08\u4e5f\u5c31\u662f 4 \u4e2a\u5b57\u8282\uff09 IP \u5730\u5740\u901a\u5e38\u7528 \u70b9\u5206\u5341\u8fdb\u5236 \u8868\u793a\u6210\uff08 a.b.c.d \uff09\u7684\u5f62\u5f0f\uff0c\u5176\u4e2d\uff0ca,b,c,d\u90fd\u662f 0~255 \u4e4b\u95f4\u7684\u5341\u8fdb\u5236\u6574\u6570\u3002\u4f8b\uff1a\u70b9\u5206\u5341\u8fdbIP\u5730\u5740\uff08100.4.5.6\uff09\uff0c\u5b9e\u9645\u4e0a\u662f 32 \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0801100100.00000100.00000101.00000110\uff09","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ip_1","text":"\u6700\u521d\u8bbe\u8ba1\u4e92\u8054\u7f51\u7edc\u65f6\uff0c \u4e3a\u4e86\u4fbf\u4e8e\u5bfb\u5740\u4ee5\u53ca\u5c42\u6b21\u5316\u6784\u9020\u7f51\u7edc\uff0c\u6bcf\u4e2a IP \u5730\u5740\u5305\u62ec\u4e24\u4e2a\u6807\u8bc6\u7801\uff08ID\uff09 \uff0c\u5373 \u7f51\u7edcID \u548c \u4e3b\u673a ID \u3002\u540c\u4e00\u4e2a\u7269\u7406\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u4e3b\u673a\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a\u7f51\u7edc ID\uff0c\u7f51\u7edc\u4e0a\u7684\u4e00\u4e2a\u4e3b\u673a\uff08\u5305\u62ec\u7f51\u7edc\u4e0a\u5de5\u4f5c\u7ad9\uff0c\u670d\u52a1\u5668\u548c\u8def\u7531\u5668\u7b49\uff09\u6709\u4e00\u4e2a\u4e3b\u673a ID \u4e0e\u5176\u5bf9\u5e94 Internet \u59d4\u5458\u4f1a\u5b9a\u4e49\u4e86 5 \u79cd IP \u5730\u5740\u7c7b\u578b\u4ee5\u9002\u5408\u4e0d\u540c\u5bb9\u91cf\u7684\u7f51\u7edc\uff0c\u5373 A \u7c7b~ E \u7c7b \u5176\u4e2d A\u3001B\u3001C 3\u7c7b\uff08\u5982\u4e0b\u8868\u683c\uff09\u7531 InternetNIC \u5728\u5168\u7403\u8303\u56f4\u5185\u7edf\u4e00\u5206\u914d\uff0cD\u3001E \u7c7b\u4e3a\u7279\u6b8a\u5730\u5740 A\u7c7b\u6700\u9ad8\u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u6240\u4ee5\u662f$2^7$ \u4e3b\u673a\u6570\u8981\u51cf\u53bb2\u662f\u56e0\u4e3a\u53bb\u6389 x.x.x.0 \u548c x.x.x.255 \u8fd9\u4e24\u4e2a\u7279\u6b8a\u7684\u5730\u5740 \u7c7b\u522b \u6700\u5927\u7f51\u7edc\u6570 IP\u5730\u5740\u8303\u56f4 \u5355\u4e2a\u7f51\u6bb5\u6700\u5927\u4e3b\u673a\u6570 \u79c1\u6709IP\u5730\u5740\u8303\u56f4 A 126($2^7-1$) 1.0.0.1~126.255.255.254 16777214($2^{24}-2$) 10.0.0.0~10.255.255.255 B 16384($2^{14}$) 128.0.0.1~191.255.255.254 65534($2^{16}-2$) 172.16.0.0~172.31.255.255 C 2097152($2^{21}$) 192.0.0.1~223.255.255.254 254($2^8-2$) 192.168.0.0~192.168.255.255","title":"IP \u5730\u5740\u7f16\u5740\u65b9\u5f0f"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#aip","text":"\u4e00\u4e2a A \u7c7b IP \u5730\u5740\u662f\u6307\uff0c \u5728 IP \u5730\u5740\u7684\u56db\u6bb5\u53f7\u7801\u4e2d\uff0c \u7b2c\u4e00\u6bb5\u53f7\u7801\u4e3a\u7f51\u7edc\u53f7\u7801\uff0c\u5269\u4e0b\u7684\u4e09\u6bb5\u53f7\u7801\u4e3a\u672c\u5730\u8ba1\u7b97\u673a\u7684\u53f7\u7801 \u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a IP \u5730\u5740\u7684\u8bdd\uff0cA \u7c7b IP \u5730\u5740\u5c31\u7531 1 \u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c 3 \u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c \u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 0 A \u7c7b IP \u5730\u5740\u4e2d\u7f51\u7edc\u7684\u6807\u8bc6\u957f\u5ea6\u4e3a 8 \u4f4d\uff0c\u4e3b\u673a\u6807\u8bc6\u7684\u957f\u5ea6\u4e3a 24 \u4f4d\uff0cA\u7c7b\u7f51\u7edc\u5730\u5740\u6570\u91cf\u8f83\u5c11\uff0c\u6709 126 \u4e2a\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u53ef\u4ee5\u5bb9\u7eb3\u4e3b\u673a\u6570\u8fbe 1600 \u591a\u4e07\u53f0 A \u7c7b IP \u5730\u5740 \u5730\u5740\u8303\u56f4 1.0.0.1 - 126.255.255.254 \uff08\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a 00000001 00000000 00000000 00000001 - 01111111 11111111 11111111 11111110 \uff09\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u5e7f\u64ad\u5730\u5740 A \u7c7b IP \u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u4e3a 255.0.0.0\uff0c\u6bcf\u4e2a\u7f51\u7edc\u652f\u6301\u7684\u6700\u5927\u4e3b\u673a\u6570\u4e3a$2^{24}-2$","title":"A\u7c7bIP\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#bip","text":"\u4e00\u4e2a B \u7c7b IP \u5730\u5740\u662f\u6307\uff0c\u5728 IP \u5730\u5740\u7684\u56db\u6bb5\u53f7\u7801\u4e2d\uff0c \u524d\u4e24\u6bb5\u53f7\u7801\u4e3a\u7f51\u7edc\u53f7\u7801\uff0c\u5269\u4e0b\u7684\u4e24\u6bb5\u53f7\u7801\u4e3a\u672c\u5730\u8ba1\u7b97\u673a\u7684\u53f7\u7801 \u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a IP \u5730\u5740\u7684\u8bdd\uff0cB \u7c7b IP \u5730\u5740\u5c31\u7531 2 \u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c 2 \u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c \u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 10 B \u7c7b IP\u5730\u5740\u4e2d\u7f51\u7edc\u7684\u6807\u8bc6\u957f\u5ea6\u4e3a 16 \u4f4d\uff0c\u4e3b\u673a\u6807\u8bc6\u7684\u957f\u5ea6\u4e3a 16 \u4f4d\uff0cB \u7c7b\u7f51\u7edc\u5730\u5740\u9002\u7528\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7684\u7f51\u7edc\uff0c\u670916384 \u4e2a\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u6240\u80fd\u5bb9\u7eb3\u7684\u8ba1\u7b97\u673a\u6570\u4e3a 6 \u4e07\u591a\u53f0 B \u7c7b IP \u5730\u5740\u5730\u5740\u8303\u56f4 128.0.0.1 - 191.255.255.254 \uff08\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\uff1a 10000000 00000000 00000000 00000001 - 10111111 11111111 11111111 11111110 \uff09\uff0c \u6700\u540e\u4e00\u4e2a\u662f\u5e7f\u64ad\u5730\u5740 B \u7c7b IP \u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u4e3a 255.255.0.0\uff0c\u6bcf\u4e2a\u7f51\u7edc\u652f\u6301\u7684\u6700\u5927\u4e3b\u673a\u6570\u4e3a$2^{16}-2$","title":"B\u7c7bIP\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#cip","text":"\u4e00\u4e2a C \u7c7b IP \u5730\u5740\u662f\u6307\uff0c\u5728 IP \u5730\u5740\u7684\u56db\u6bb5\u53f7\u7801\u4e2d\uff0c \u524d\u4e09\u6bb5\u53f7\u7801\u4e3a\u7f51\u7edc\u53f7\u7801\uff0c\u5269\u4e0b\u7684\u4e00\u6bb5\u53f7\u7801\u4e3a\u672c\u5730\u8ba1\u7b97\u673a\u7684\u53f7\u7801 \u5982\u679c\u7528\u4e8c\u8fdb\u5236\u8868\u793a IP \u5730\u5740\u7684\u8bdd\uff0cC \u7c7b IP \u5730\u5740\u5c31\u7531 3 \u5b57\u8282\u7684\u7f51\u7edc\u5730\u5740\u548c 1 \u5b57\u8282\u4e3b\u673a\u5730\u5740\u7ec4\u6210\uff0c \u7f51\u7edc\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 110 C \u7c7b IP \u5730\u5740\u4e2d\u7f51\u7edc\u7684\u6807\u8bc6\u957f\u5ea6\u4e3a 24 \u4f4d\uff0c\u4e3b\u673a\u6807\u8bc6\u7684\u957f\u5ea6\u4e3a 8 \u4f4d\uff0cC \u7c7b\u7f51\u7edc\u5730\u5740\u6570\u91cf\u8f83\u591a\uff0c\u6709 209 \u4e07\u4f59\u4e2a\u7f51\u7edc\u3002\u9002\u7528\u4e8e\u5c0f\u89c4\u6a21\u7684\u5c40\u57df\u7f51\u7edc\uff0c\u6bcf\u4e2a\u7f51\u7edc\u6700\u591a\u53ea\u80fd\u5305\u542b254\u53f0\u8ba1\u7b97\u673a C \u7c7b IP \u5730\u5740\u8303\u56f4 192.0.0.1-223.255.255.254 \uff08\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a: 11000000 00000000 00000000 00000001 - 11011111 11111111 11111111 11111110 \uff09\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u5e7f\u64ad\u5730\u5740 C\u7c7bIP\u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u4e3a 255.255.255.0\uff0c\u6bcf\u4e2a\u7f51\u7edc\u652f\u6301\u7684\u6700\u5927\u4e3b\u673a\u6570\u4e3a$2^8-2$","title":"C\u7c7bIP\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#dip","text":"D \u7c7b IP \u5730\u5740\u5728\u5386\u53f2\u4e0a\u88ab\u53eb\u505a \u591a\u64ad\u5730\u5740\uff08multicast address\uff09 \uff0c\u5373 \u7ec4\u64ad\u5730\u5740 \u5728\u4ee5\u592a\u7f51\u4e2d\uff0c\u591a\u64ad\u5730\u5740\u547d\u540d\u4e86\u4e00\u7ec4\u5e94\u8be5\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u5e94\u7528\u63a5\u6536\u5230\u4e00\u4e2a\u5206\u7ec4\u7684\u7ad9\u70b9\u3002\u591a\u64ad\u5730\u5740\u7684\u6700\u9ad8\u4f4d\u5fc5\u987b\u662f 1110 \uff0c\u8303\u56f4\u4ece 224.0.0.0 - 239.255.255.255 \u5212\u5206 IP\u5730\u5740 \u8bf4\u660e 224.0.0.0~224.0.0.255 \u5c40\u90e8\u94fe\u63a5\u591a\u64ad\u5730\u5740\uff1a\u662f\u4e3a\u8def\u7531\u534f\u8bae\u548c\u5176\u5b83\u7528\u9014\u4fdd\u7559\u7684\u5730\u5740\uff0c\u8def\u7531\u5668\u5e76\u4e0d\u8f6c\u53d1\u5c5e\u4e8e\u6b64\u8303\u56f4\u7684IP\u5305 224.0.1.0~224.0.1.255 \u9884\u7559\u591a\u64ad\u5730\u5740\uff1a\u516c\u7528\u7ec4\u64ad\u5730\u5740\uff0c\u53ef\u7528\u4e8eInternet\uff1b\u4f7f\u7528\u524d\u9700\u8981\u7533\u8bf7 224.0.2.0~238.255.255.255 \u9884\u7559\u591a\u64ad\u5730\u5740\uff1a\u7528\u6237\u53ef\u7528\u7ec4\u64ad\u5730\u5740(\u4e34\u65f6\u7ec4\u5730\u5740)\uff0c\u5168\u7f51\u8303\u56f4\u5185\u6709\u6548 239.0.0.0~239.255.255.255 \u672c\u5730\u7ba1\u7406\u7ec4\u64ad\u5730\u5740\uff0c\u53ef\u4f9b\u7ec4\u7ec7\u5185\u90e8\u4f7f\u7528\uff0c\u7c7b\u4f3c\u4e8e\u79c1\u6709 IP \u5730\u5740\uff0c\u4e0d\u80fd\u7528\u4e8e Internet\uff0c\u53ef\u9650\u5236\u591a\u64ad\u8303\u56f4","title":"D\u7c7bIP\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_12","text":"\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u4e3a 0 \u7684\u5730\u5740\uff08 0.0.0.0 \uff09\u5bf9\u5e94\u4e8e \u5f53\u524d\u4e3b\u673a IP \u5730\u5740\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u8282\u90fd\u4e3a 1 \u7684 IP \u5730\u5740\uff08 255.255.255.255 \uff09\u662f \u5f53\u524d\u5b50\u7f51\u7684\u5e7f\u64ad\u5730\u5740 IP \u5730\u5740\u4e2d\u51e1\u662f\u4ee5 11110 \u5f00\u5934\u7684 E \u7c7b IP \u5730\u5740\u90fd\u4fdd\u7559\u7528\u4e8e\u5c06\u6765\u548c\u5b9e\u9a8c\u4f7f\u7528 IP\u5730\u5740\u4e2d \u4e0d\u80fd\u4ee5\u5341\u8fdb\u5236 127 \u4f5c\u4e3a\u5f00\u5934 \uff0c\u8be5\u7c7b\u5730\u5740\u4e2d\u6570\u5b57 127.0.0.1 ~ 127.255.255.255 \u7528\u4e8e\u56de\u8def\u6d4b\u8bd5\uff0c\u5982\uff1a 127.0.0.1 \u53ef\u4ee5\u4ee3\u8868 \u672c\u673aIP\u5730\u5740","title":"\u7279\u6b8a\u7684\u7f51\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_13","text":"\u5b50\u7f51\u63a9\u7801\uff08subnet mask\uff09 \u53c8\u53eb\u7f51\u7edc\u63a9\u7801\u3001\u5730\u5740\u63a9\u7801\u3001\u5b50\u7f51\u7edc\u906e\u7f69\uff0c\u5b83\u662f\u4e00\u79cd\u7528\u6765\u6307\u660e\u4e00\u4e2a IP \u5730\u5740\u7684\u54ea\u4e9b\u4f4d\u6807\u8bc6\u7684\u662f\u4e3b\u673a\u6240\u5728\u7684\u5b50\u7f51\uff0c\u4ee5\u53ca\u54ea\u4e9b\u4f4d\u6807\u8bc6\u7684\u662f\u4e3b\u673a\u7684\u4f4d\u63a9\u7801 \u5b50\u7f51\u63a9\u7801\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\uff0c\u5b83\u5fc5\u987b\u7ed3\u5408 IP \u5730\u5740\u4e00\u8d77\u4f7f\u7528 \u5b50\u7f51\u63a9\u7801\u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\uff0c\u5c31\u662f\u5c06\u67d0\u4e2a IP \u5730\u5740\u5212\u5206\u6210 \u7f51\u7edc\u5730\u5740 \u548c \u4e3b\u673a\u5730\u5740 \u4e24\u90e8\u5206 \u5b50\u7f51\u63a9\u7801\u662f\u4e00\u4e2a 32 \u4f4d\u5730\u5740 \uff0c\u7528\u4e8e\u5c4f\u853d IP \u5730\u5740\u7684\u4e00\u90e8\u5206\u4ee5\u533a\u522b\u7f51\u7edc\u6807\u8bc6\u548c\u4e3b\u673a\u6807\u8bc6\uff0c\u5e76\u8bf4\u660e\u8be5 IP\u5730\u5740\u662f\u5728\u5c40\u57df\u7f51\u4e0a\uff0c\u8fd8\u662f\u5728\u5e7f\u57df\u7f51\u4e0a \u5b50\u7f51\u63a9\u7801\u662f\u5728 IPv4 \u5730\u5740\u8d44\u6e90\u7d27\u7f3a\u7684\u80cc\u666f\u4e0b\u4e3a\u4e86\u89e3\u51b3 lP \u5730\u5740\u5206\u914d\u800c\u4ea7\u751f\u7684\u865a\u62df lP \u6280\u672f\uff0c\u901a\u8fc7\u5b50\u7f51\u63a9\u7801\u5c06A\u3001B\u3001C \u4e09\u7c7b\u5730\u5740\u5212\u5206\u4e3a\u82e5\u5e72\u5b50\u7f51\uff0c\u4ece\u800c\u663e\u8457\u63d0\u9ad8\u4e86 IP \u5730\u5740\u7684\u5206\u914d\u6548\u7387\uff0c\u6709\u6548\u89e3\u51b3\u4e86 IP \u5730\u5740\u8d44\u6e90\u7d27\u5f20\u7684\u5c40\u9762\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u4f01\u4e1a\u5185\u7f51\u4e2d\u4e3a\u4e86\u66f4\u597d\u5730\u7ba1\u7406\u7f51\u7edc\uff0c\u7f51\u7ba1\u4eba\u5458\u4e5f\u5229\u7528\u5b50\u7f51\u63a9\u7801\u7684\u4f5c\u7528\uff0c\u4eba\u4e3a\u5730\u5c06\u4e00\u4e2a\u8f83\u5927\u7684\u4f01\u4e1a\u5185\u90e8\u7f51\u7edc\u5212\u5206\u4e3a\u66f4\u591a\u4e2a\u5c0f\u89c4\u6a21\u7684\u5b50\u7f51\uff0c\u518d\u5229\u7528\u4e09\u5c42\u4ea4\u6362\u673a\u7684\u8def\u7531\u529f\u80fd\u5b9e\u73b0\u5b50\u7f51\u4e92\u8054\uff0c\u4ece\u800c\u6709\u6548\u89e3\u51b3\u4e86\u7f51\u7edc\u5e7f\u64ad\u98ce\u66b4\u548c\u7f51\u7edc\u75c5\u6bd2\u7b49\u8bf8\u591a\u7f51\u7edc\u7ba1\u7406\u65b9\u9762\u7684\u95ee\u9898 \u5728\u5927\u591a\u6570\u7684\u7f51\u7edc\u6559\u79d1\u4e66\u4e2d\uff0c\u4e00\u822c\u90fd\u5c06\u5b50\u7f51\u63a9\u7801\u7684\u4f5c\u7528\u63cf\u8ff0\u4e3a\u901a\u8fc7\u903b\u8f91\u8fd0\u7b97\uff0c\u5c06 IP \u5730\u5740\u5212\u5206\u4e3a\u7f51\u7edc\u6807\u8bc6(Net.ID) \u548c\u4e3b\u673a\u6807\u8bc6(Host.ID)\uff0c\u53ea\u6709\u7f51\u7edc\u6807\u8bc6\u76f8\u540c\u7684\u4e24\u53f0\u4e3b\u673a\u5728\u65e0\u8def\u7531\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u76f8\u4e92\u901a\u4fe1 \u6839\u636e RFC950 \u5b9a\u4e49\uff0c\u5b50\u7f51\u63a9\u7801\u662f\u4e00\u4e2a 32 \u4f4d\u7684 2 \u8fdb\u5236\u6570\uff0c \u5176\u5bf9\u5e94\u7f51\u7edc\u5730\u5740\u7684\u6240\u6709\u4f4d\u90fd\u7f6e\u4e3a 1\uff0c\u5bf9\u5e94\u4e8e\u4e3b\u673a\u5730\u5740\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u4e3a 0\u3002\u5b50\u7f51\u63a9\u7801\u544a\u77e5\u8def\u7531\u5668\uff0c\u5730\u5740\u7684\u54ea\u4e00\u90e8\u5206\u662f\u7f51\u7edc\u5730\u5740\uff0c\u54ea\u4e00\u90e8\u5206\u662f\u4e3b\u673a\u5730\u5740\uff0c\u4f7f\u8def\u7531\u5668\u6b63\u786e\u5224\u65ad\u4efb\u610f IP \u5730\u5740\u662f\u5426\u662f\u672c\u7f51\u6bb5\u7684\uff0c\u4ece\u800c\u6b63\u786e\u5730\u8fdb\u884c\u8def\u7531\u3002\u7f51\u7edc\u4e0a\uff0c\u6570\u636e\u4ece\u4e00\u4e2a\u5730\u65b9\u4f20\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\uff0c\u662f\u4f9d\u9760 IP \u5bfb\u5740\u3002\u4ece\u903b\u8f91\u4e0a\u6765\u8bb2\uff0c\u662f\u4e24\u6b65\u7684\u3002\u7b2c\u4e00\u6b65\uff0c\u4ece IP \u4e2d\u627e\u5230\u6240\u5c5e\u7684\u7f51\u7edc\uff0c\u597d\u6bd4\u662f\u53bb\u627e\u8fd9\u4e2a\u4eba\u662f\u54ea\u4e2a\u5c0f\u533a\u7684\uff1b\u7b2c\u4e8c\u6b65\uff0c\u518d\u4ece IP \u4e2d\u627e\u5230\u4e3b\u673a\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u4f4d\u7f6e\uff0c\u597d\u6bd4\u662f\u5728\u5c0f\u533a\u91cc\u9762\u627e\u5230\u8fd9\u4e2a\u4eba \u5b50\u7f51\u63a9\u7801\u7684\u8bbe\u5b9a\u5fc5\u987b\u9075\u5faa\u4e00\u5b9a\u7684\u89c4\u5219\u3002\u4e0e\u4e8c\u8fdb\u5236 IP \u5730\u5740\u76f8\u540c\uff0c\u5b50\u7f51\u63a9\u7801\u7531 1 \u548c 0 \u7ec4\u6210\uff0c\u4e14 1 \u548c 0 \u5206\u522b\u8fde\u7eed\u3002\u5b50\u7f51\u63a9\u7801\u7684\u957f\u5ea6\u4e5f\u662f 32 \u4f4d\uff0c\u5de6\u8fb9\u662f\u7f51\u7edc\u4f4d\uff0c\u7528\u4e8c\u8fdb\u5236\u6570\u5b57 \u201c1\u201d \u8868\u793a\uff0c1 \u7684\u6570\u76ee\u7b49\u4e8e\u7f51\u7edc\u4f4d\u7684\u957f\u5ea6\uff1b\u53f3\u8fb9\u662f\u4e3b\u673a\u4f4d\uff0c\u7528\u4e8c\u8fdb\u5236\u6570\u5b57 \u201c0\u201d \u8868\u793a\uff0c0 \u7684\u6570\u76ee\u7b49\u4e8e\u4e3b\u673a\u4f4d\u7684\u957f\u5ea6\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u63a9\u7801\u4e0e IP \u5730\u5740\u505a\u6309\u4f4d\u4e0e\u8fd0\u7b97\u65f6\u7528 0 \u906e\u4f4f\u539f\u4e3b\u673a\u6570\uff0c\u800c\u4e0d\u6539\u53d8\u539f\u7f51\u7edc\u6bb5\u6570\u5b57\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u901a\u8fc7 0 \u7684\u4f4d\u6570\u786e\u5b9a\u5b50\u7f51\u7684\u4e3b\u673a\u6570\uff08 2 \u7684\u4e3b\u673a\u4f4d\u6570\u6b21\u65b9 - 2\uff0c\u56e0\u4e3a\u4e3b\u673a\u53f7\u5168\u4e3a 1 \u65f6\u8868\u793a\u8be5\u7f51\u7edc\u5e7f\u64ad\u5730\u5740\uff0c\u5168\u4e3a 0 \u65f6\u8868\u793a\u8be5\u7f51\u7edc\u7684\u7f51\u7edc\u53f7\uff0c\u8fd9\u662f\u4e24\u4e2a\u7279\u6b8a\u5730\u5740\uff09\u3002\u901a\u8fc7\u5b50\u7f51\u63a9\u7801\uff0c\u624d\u80fd\u8868\u660e\u4e00\u53f0\u4e3b\u673a\u6240\u5728\u7684\u5b50\u7f51\u4e0e\u5176\u4ed6\u5b50\u7f51\u7684\u5173\u7cfb\uff0c\u4f7f\u7f51\u7edc\u6b63\u5e38\u5de5\u4f5c","title":"\u5b50\u7f51\u63a9\u7801"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_14","text":"","title":"\u7aef\u53e3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_15","text":"\u7aef\u53e3 \u662f\u82f1\u6587 port \u7684\u610f\u8bd1\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u8bbe\u5907\u4e0e\u5916\u754c\u901a\u8baf\u4ea4\u6d41\u7684\u51fa\u53e3 \u7aef\u53e3\u53ef\u5206\u4e3a \u865a\u62df\u7aef\u53e3 \u548c \u7269\u7406\u7aef\u53e3 \u865a\u62df\u7aef\u53e3\u6307\u8ba1\u7b97\u673a\u5185\u90e8\u6216\u4ea4\u6362\u673a\u8def\u7531\u5668\u5185\u7684\u7aef\u53e3\uff0c\u4e0d\u53ef\u89c1\uff0c\u662f\u7279\u6307TCP/IP\u534f\u8bae\u4e2d\u7684\u7aef\u53e3\uff0c\u662f\u903b\u8f91\u610f\u4e49\u4e0a\u7684\u7aef\u53e3\uff0c\u4f8b\u5982\u8ba1\u7b97\u673a\u4e2d\u7684 80 \u7aef\u53e3\u300121 \u7aef\u53e3\u300123 \u7aef\u53e3\u7b49 \u7269\u7406\u7aef\u53e3\u53c8\u79f0\u4e3a\u63a5\u53e3\uff0c\u662f\u53ef\u89c1\u7aef\u53e3\uff0c\u8ba1\u7b97\u673a\u80cc\u677f\u7684 RJ45 \u7f51\u53e3\uff0c\u4ea4\u6362\u673a\u8def\u7531\u5668\u96c6\u7ebf\u5668\u7b49 RJ45 \u7aef\u53e3\u3002\u7535\u8bdd\u4f7f\u7528 RJ11 \u63d2\u53e3\u4e5f\u5c5e\u4e8e\u7269\u7406\u7aef\u53e3\u7684\u8303\u7574 \u7aef\u53e3\u662f\u901a\u8fc7\u7aef\u53e3\u53f7\u6765\u6807\u8bb0\u7684\uff0c\u7aef\u53e3\u53f7\u53ea\u6709\u6574\u6570\uff0c\u8303\u56f4\u662f\u4ece 0 \u523065535\uff08$2^{16}$\uff09","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_16","text":"","title":"\u7aef\u53e3\u7c7b\u578b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#well-known-ports","text":"\u5468\u77e5\u7aef\u53e3\u662f\u4f17\u6240\u5468\u77e5\u7684\u7aef\u53e3\u53f7\uff0c\u4e5f\u53eb\u77e5\u540d\u7aef\u53e3\u3001\u516c\u8ba4\u7aef\u53e3\u6216\u8005\u5e38\u7528\u7aef\u53e3\uff0c \u8303\u56f4\u4ece 0 \u5230 1023 \uff0c\u5b83\u4eec\u7d27\u5bc6\u7ed1\u5b9a\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u670d\u52a1\uff0c\u4f8b\u5982 80 \u7aef\u53e3\u5206\u914d\u7ed9 WWW \u670d\u52a1\uff0c21 \u7aef\u53e3\u5206\u914d\u7ed9 FTP \u670d\u52a1\uff0c23 \u7aef\u53e3\u5206\u914d\u7ed9Telnet\u670d\u52a1\u7b49\u7b49 \u6211\u4eec\u5728 IE \u7684\u5730\u5740\u680f\u91cc\u8f93\u5165\u4e00\u4e2a\u7f51\u5740\u7684\u65f6\u5019\u662f\u4e0d\u5fc5\u6307\u5b9a\u7aef\u53e3\u53f7\u7684\uff0c\u56e0\u4e3a\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0bWWW \u670d\u52a1\u7684\u7aef\u53e3\u662f \u201c80\u201d \u7f51\u7edc\u670d\u52a1\u662f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7aef\u53e3\u53f7\u7684\uff0c\u5982\u679c\u4e0d\u662f\u9ed8\u8ba4\u7684\u7aef\u53e3\u53f7\u5219\u5e94\u8be5\u5728\u5730\u5740\u680f\u4e0a\u6307\u5b9a\u7aef\u53e3\u53f7\uff0c\u65b9\u6cd5\u662f \u5728\u5730\u5740\u540e\u9762\u52a0\u4e0a\u5192\u53f7\u201c:\u201d\uff08\u534a\u89d2\uff09\uff0c\u518d\u52a0\u4e0a\u7aef\u53e3\u53f7 \u3002\u6bd4\u5982\u4f7f\u7528 \u201c8080\u201d \u4f5c\u4e3a WWW\u670d\u52a1\u7684\u7aef\u53e3\uff0c\u5219\u9700\u8981\u5728\u5730\u5740\u680f\u91cc\u8f93\u5165 \u7f51\u5740:8080 \u6709\u4e9b\u7cfb\u7edf\u534f\u8bae\u4f7f\u7528\u56fa\u5b9a\u7684\u7aef\u53e3\u53f7\uff0c\u5b83\u662f\u4e0d\u80fd\u88ab\u6539\u53d8\u7684\uff0c\u6bd4\u5982 139 \u7aef\u53e3\u4e13\u95e8\u7528\u4e8e NetBIOS \u4e0e TCP/IP \u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u4e0d\u80fd\u624b\u52a8\u6539\u53d8","title":"\u5468\u77e5\u7aef\u53e3\uff08Well Known Ports\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#registered-ports","text":"\u7aef\u53e3\u53f7\u4ece 1024 \u5230 49151 \uff0c\u5b83\u4eec\u677e\u6563\u5730\u7ed1\u5b9a\u4e8e\u4e00\u4e9b\u670d\u52a1\uff0c\u5206\u914d\u7ed9\u7528\u6237\u8fdb\u7a0b\u6216\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u4e3b\u8981\u662f\u7528\u6237\u9009\u62e9\u5b89\u88c5\u7684\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5df2\u7ecf\u5206\u914d\u597d\u4e86\u516c\u8ba4\u7aef\u53e3\u7684\u5e38\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e9b\u7aef\u53e3\u5728\u6ca1\u6709\u88ab\u670d\u52a1\u5668\u8d44\u6e90\u5360\u7528\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u7528\u6237\u7aef\u52a8\u6001\u9009\u7528\u4e3a\u6e90\u7aef\u53e3","title":"\u6ce8\u518c\u7aef\u53e3\uff08Registered Ports\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#dynamic-ports-private-ports","text":"\u52a8\u6001\u7aef\u53e3\u7684\u8303\u56f4\u662f\u4ece 49152 \u5230 65535 \uff0c\u4e4b\u6240\u4ee5\u79f0\u4e3a\u52a8\u6001\u7aef\u53e3\uff0c\u662f\u56e0\u4e3a\u5b83\u4e00\u822c\u4e0d\u56fa\u5b9a\u5206\u914d\u67d0\u79cd\u670d\u52a1\uff0c\u800c\u662f\u52a8\u6001\u5206\u914d","title":"\u52a8\u6001\u7aef\u53e3 / \u79c1\u6709\u7aef\u53e3\uff08Dynamic Ports / Private Ports\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_17","text":"","title":"\u7f51\u7edc\u6a21\u578b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#osi","text":"\u4e03\u5c42\u6a21\u578b\uff0c\u4ea6\u79f0 OSI\uff08Open System Interconnection\uff09\u53c2\u8003\u6a21\u578b \uff0c\u5373 \u5f00\u653e\u5f0f\u7cfb\u7edf\u4e92\u8054 \u3002\u53c2\u8003\u6a21\u578b\u662f\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\uff08ISO\uff09\u5236\u5b9a\u7684\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97\u673a\u6216\u901a\u4fe1\u7cfb\u7edf\u95f4\u4e92\u8054\u7684\u6807\u51c6\u4f53\u7cfb\uff0c\u4e00\u822c\u79f0\u4e3a OSI \u53c2\u8003\u6a21\u578b\u6216\u4e03\u5c42\u6a21\u578b \u5b83\u662f\u4e00\u4e2a\u4e03\u5c42\u7684\u3001\u62bd\u8c61\u7684\u6a21\u578b\u4f53\uff0c\u4e0d\u4ec5\u5305\u62ec\u4e00\u7cfb\u5217\u62bd\u8c61\u7684\u672f\u8bed\u6216\u6982\u5ff5\uff0c\u4e5f\u5305\u62ec\u5177\u4f53\u7684\u534f\u8bae \u7269\u7406\u5c42 \uff1a\u4e3b\u8981\u5b9a\u4e49\u7269\u7406\u8bbe\u5907\u6807\u51c6\uff0c\u5982\u7f51\u7ebf\u7684\u63a5\u53e3\u7c7b\u578b\u3001\u5149\u7ea4\u7684\u63a5\u53e3\u7c7b\u578b\u3001\u5404\u79cd\u4f20\u8f93\u4ecb\u8d28\u7684\u4f20\u8f93\u901f\u7387\u7b49\u3002\u5b83\u7684 \u4e3b\u8981\u4f5c\u7528\u662f\u4f20\u8f93\u6bd4\u7279\u6d41\uff08\u5c31\u662f\u75311\u30010\u8f6c\u5316\u4e3a\u7535\u6d41\u5f3a\u5f31\u6765\u8fdb\u884c\u4f20\u8f93\uff0c\u5230\u8fbe\u76ee\u7684\u5730\u540e\u518d\u8f6c\u5316\u4e3a1\u30010\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u6570\u6a21\u8f6c\u6362\u4e0e\u6a21\u6570\u8f6c\u6362\uff09 \u3002\u8fd9\u4e00\u5c42\u7684\u6570\u636e\u53eb\u505a \u6bd4\u7279 \u6570\u636e\u94fe\u8def\u5c42 \uff1a\u5efa\u7acb \u903b\u8f91\u8fde\u63a5 \u3001\u8fdb\u884c \u786c\u4ef6\u5730\u5740\u5bfb\u5740 \u3001 \u5dee\u9519\u6821\u9a8c \u7b49\u529f\u80fd\u3002\u5b9a\u4e49\u4e86\u5982\u4f55\u8ba9\u683c\u5f0f\u5316\u6570\u636e \u4ee5\u5e27\u4e3a\u5355\u4f4d \u8fdb\u884c\u4f20\u8f93\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba9\u63a7\u5236\u5bf9\u7269\u7406\u4ecb\u8d28\u7684\u8bbf\u95ee\u3002 \u5c06\u6bd4\u7279\u7ec4\u5408\u6210\u5b57\u8282\u8fdb\u800c\u7ec4\u5408\u6210\u5e27\uff0c\u7528MAC\u5730\u5740\u8bbf\u95ee\u4ecb\u8d28 \u7f51\u7edc\u5c42 \uff1a\u8fdb\u884c \u903b\u8f91\u5730\u5740\u5bfb\u5740 \uff0c\u5728\u4f4d\u4e8e\u4e0d\u540c\u5730\u7406\u4f4d\u7f6e\u7684\u7f51\u7edc\u4e2d\u7684\u4e24\u4e2a\u4e3b\u673a\u7cfb\u7edf\u4e4b\u95f4\u63d0\u4f9b\u8fde\u63a5\u548c\u8def\u5f84\u9009\u62e9\u3002Internet\u7684\u53d1\u5c55\u4f7f\u5f97\u4ece\u4e16\u754c\u5404\u7ad9\u70b9\u8bbf\u95ee\u4fe1\u606f\u7684\u7528\u6237\u6570\u5927\u5927\u589e\u52a0\uff0c\u800c\u7f51\u7edc\u5c42\u6b63\u662f\u7ba1\u7406\u8fd9\u79cd\u8fde\u63a5\u7684\u5c42 \u4f20\u8f93\u5c42 \uff1a \u5b9a\u4e49\u4e86\u4e00\u4e9b\u4f20\u8f93\u6570\u636e\u7684\u534f\u8bae\u548c\u7aef\u53e3\u53f7 \uff08 WWW \u7aef\u53e3 80 \u7b49\uff09\uff0c\u5982\uff1a TCP \uff08\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff0c\u4f20\u8f93\u6548\u7387\u4f4e\uff0c\u53ef\u9760\u6027\u5f3a\uff0c\u7528\u4e8e\u4f20\u8f93\u53ef\u9760\u6027\u8981\u6c42\u9ad8\uff0c\u6570\u636e\u91cf\u5927\u7684\u6570\u636e\uff09\uff0c UDP \uff08\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff0c\u4e0eTCP \u7279\u6027\u6070\u6070\u76f8\u53cd\uff0c\u7528\u4e8e\u4f20\u8f93\u53ef\u9760\u6027\u8981\u6c42\u4e0d\u9ad8\uff0c\u6570\u636e\u91cf\u5c0f\u7684\u6570\u636e\uff0c\u5982 QQ \u804a\u5929\u6570\u636e\u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u4f20\u8f93\u7684\uff09\u3002 \u4e3b\u8981\u662f\u5c06\u4ece\u4e0b\u5c42\u63a5\u6536\u7684\u6570\u636e\u8fdb\u884c\u5206\u6bb5\u548c\u4f20\u8f93\uff0c\u5230\u8fbe\u76ee\u7684\u5730\u5740\u540e\u518d\u8fdb\u884c\u91cd\u7ec4\u3002\u5e38\u5e38\u628a\u8fd9\u4e00\u5c42\u6570\u636e\u53eb\u505a\u6bb5 \u4f1a\u8bdd\u5c42 \uff1a\u901a\u8fc7\u4f20\u8f93\u5c42\uff08\u7aef\u53e3\u53f7\uff1a\u4f20\u8f93\u7aef\u53e3\u4e0e\u63a5\u6536\u7aef\u53e3\uff09\u5efa\u7acb\u6570\u636e\u4f20\u8f93\u7684\u901a\u8def\u3002\u4e3b\u8981\u5728\u4f60\u7684\u7cfb\u7edf\u4e4b\u95f4\u53d1\u8d77\u4f1a\u8bdd\u6216\u8005\u63a5\u53d7\u4f1a\u8bdd\u8bf7\u6c42 \u8868\u793a\u5c42 \uff1a\u6570\u636e\u7684\u8868\u793a\u3001\u5b89\u5168\u3001\u538b\u7f29\u3002\u4e3b\u8981\u662f \u8fdb\u884c\u5bf9\u63a5\u6536\u7684\u6570\u636e\u8fdb\u884c\u89e3\u91ca\u3001\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u3001\u538b\u7f29\u4e0e\u89e3\u538b\u7f29 \u7b49\uff08\u4e5f\u5c31\u662f\u628a\u8ba1\u7b97\u673a\u80fd\u591f\u8bc6\u522b\u7684\u4e1c\u897f\u8f6c\u6362\u6210\u4eba\u80fd\u591f\u80fd\u8bc6\u522b\u7684\u4e1c\u897f\uff08\u5982\u56fe\u7247\u3001\u58f0\u97f3\u7b49\uff09 \u5e94\u7528\u5c42 \uff1a\u7f51\u7edc\u670d\u52a1\u4e0e\u6700\u7ec8\u7528\u6237\u7684\u4e00\u4e2a\u63a5\u53e3\u3002\u8fd9\u4e00\u5c42\u4e3a\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u3001\u6587\u4ef6\u4f20\u8f93\u548c\u7ec8\u7aef\u4eff\u771f\uff09\u63d0\u4f9b\u7f51\u7edc\u670d\u52a1","title":"OSI\u4e03\u5c42\u53c2\u8003\u6a21\u578b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcpip","text":"","title":"TCP/IP\u56db\u5c42\u6a21\u578b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_18","text":"\u73b0\u5728 Internet\uff08\u56e0\u7279\u7f51\uff09\u4f7f\u7528\u7684\u4e3b\u6d41\u534f\u8bae\u65cf\u662f TCP/IP \u534f\u8bae\u65cf \uff0c\u5b83\u662f\u4e00\u4e2a\u5206\u5c42\u3001\u591a\u534f\u8bae\u7684\u901a\u4fe1\u4f53\u7cfb\u3002TCP/IP\u534f\u8bae\u65cf\u662f\u4e00\u4e2a\u56db\u5c42\u534f\u8bae\u7cfb\u7edf\uff0c\u81ea\u5e95\u800c\u4e0a\u5206\u522b\u662f \u6570\u636e\u94fe\u8def\u5c42 \u3001 \u7f51\u7edc\u5c42 \u3001 \u4f20\u8f93\u5c42 \u548c \u5e94\u7528\u5c42 \u3002\u6bcf\u4e00\u5c42\u5b8c\u6210\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u4e14\u901a\u8fc7\u82e5\u5e72\u534f\u8bae\u6765\u5b9e\u73b0\uff0c\u4e0a\u5c42\u534f\u8bae\u4f7f\u7528\u4e0b\u5c42\u534f\u8bae\u63d0\u4f9b\u7684\u670d\u52a1","title":"\u7b80\u4ecb\uff08==\u56fe\u53ef\u80fd\u6709\u9519\u8bef==\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ositcpip","text":"","title":"OSI\u4e03\u5c42\u4e0eTCP/IP\u56db\u5c42"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_19","text":"\u5e94\u7528\u5c42 \uff1a\u5e94\u7528\u5c42\u662f TCP/IP \u534f\u8bae\u7684\u7b2c\u4e00\u5c42\uff0c\u662f\u76f4\u63a5\u4e3a\u5e94\u7528\u8fdb\u7a0b\u63d0\u4f9b\u670d\u52a1\u7684 \u5bf9\u4e0d\u540c\u79cd\u7c7b\u7684\u5e94\u7528\u7a0b\u5e8f\u5b83\u4eec\u4f1a\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u6765\u4f7f\u7528\u5e94\u7528\u5c42\u7684\u4e0d\u540c\u534f\u8bae\uff0c\u90ae\u4ef6\u4f20\u8f93\u5e94\u7528\u4f7f\u7528\u4e86 SMTP \u534f\u8bae\u3001\u4e07\u7ef4\u7f51\u5e94\u7528\u4f7f\u7528\u4e86 HTTP \u534f\u8bae\u3001\u8fdc\u7a0b\u767b\u5f55\u670d\u52a1\u5e94\u7528\u4f7f\u7528\u4e86\u6709 TELNET \u534f\u8bae \u5e94\u7528\u5c42\u8fd8\u80fd\u52a0\u5bc6\u3001\u89e3\u5bc6\u3001\u683c\u5f0f\u5316\u6570\u636e \u5e94\u7528\u5c42\u53ef\u4ee5\u5efa\u7acb\u6216\u89e3\u9664\u4e0e\u5176\u4ed6\u8282\u70b9\u7684\u8054\u7cfb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5145\u5206\u8282\u7701\u7f51\u7edc\u8d44\u6e90 \u4f20\u8f93\u5c42 \uff1a\u4f5c\u4e3a TCP/IP \u534f\u8bae\u7684\u7b2c\u4e8c\u5c42\uff0c\u8fd0\u8f93\u5c42\u5728\u6574\u4e2a TCP/IP \u534f\u8bae\u4e2d\u8d77\u5230\u4e86\u4e2d\u6d41\u7825\u67f1\u7684\u4f5c\u7528\u3002\u4e14\u5728\u8fd0\u8f93\u5c42\u4e2d\uff0c TCP \u548c UDP \u4e5f\u540c\u6837\u8d77\u5230\u4e86\u4e2d\u6d41\u7825\u67f1\u7684\u4f5c\u7528 \u7f51\u7edc\u5c42 \uff1a\u7f51\u7edc\u5c42\u5728 TCP/IP \u534f\u8bae\u4e2d\u7684\u4f4d\u4e8e\u7b2c\u4e09\u5c42\u3002\u5728 TCP/IP \u534f\u8bae\u4e2d\u7f51\u7edc\u5c42\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u8fde\u63a5\u7684\u5efa\u7acb\u548c\u7ec8\u6b62\u4ee5\u53ca IP \u5730\u5740\u7684\u5bfb\u627e\u7b49\u529f\u80fd \u7f51\u7edc\u63a5\u53e3\u5c42 \uff1a\u5728 TCP/IP \u534f\u8bae\u4e2d\uff0c\u7f51\u7edc\u63a5\u53e3\u5c42\u4f4d\u4e8e\u7b2c\u56db\u5c42\u3002\u7531\u4e8e\u7f51\u7edc\u63a5\u53e3\u5c42\u517c\u5e76\u4e86\u7269\u7406\u5c42\u548c\u6570\u636e\u94fe\u8def\u5c42\u6240\u4ee5\uff0c\u7f51\u7edc\u63a5\u53e3\u5c42\u65e2\u662f\u4f20\u8f93\u6570\u636e\u7684\u7269\u7406\u5a92\u4ecb\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u7f51\u7edc\u5c42\u63d0\u4f9b\u4e00\u6761\u51c6\u786e\u65e0\u8bef\u7684\u7ebf\u8def","title":"\u56db\u5c42\u4ecb\u7ecd"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_20","text":"","title":"\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_21","text":"\u534f\u8bae\uff0c\u7f51\u7edc\u534f\u8bae\u7684\u7b80\u79f0\uff0c\u7f51\u7edc\u534f\u8bae\u662f\u901a\u4fe1\u8ba1\u7b97\u673a\u53cc\u65b9\u5fc5\u987b\u5171\u540c\u9075\u4ece\u7684\u4e00\u7ec4\u7ea6\u5b9a\u3002\u5982\u600e\u4e48\u6837\u5efa\u7acb\u8fde\u63a5\u3001\u600e\u4e48\u6837\u4e92\u76f8\u8bc6\u522b\u7b49\u3002\u53ea\u6709\u9075\u5b88\u8fd9\u4e2a\u7ea6\u5b9a\uff0c\u8ba1\u7b97\u673a\u4e4b\u95f4\u624d\u80fd\u76f8\u4e92\u901a\u4fe1\u4ea4\u6d41\u3002\u5b83\u7684\u4e09\u8981\u7d20\u662f\uff1a \u8bed\u6cd5 \u3001 \u8bed\u4e49 \u3001 \u65f6\u5e8f \u4e3a\u4e86\u4f7f\u6570\u636e\u5728\u7f51\u7edc\u4e0a\u4ece\u6e90\u5230\u8fbe\u76ee\u7684\uff0c\u7f51\u7edc\u901a\u4fe1\u7684\u53c2\u4e0e\u65b9\u5fc5\u987b\u9075\u5faa\u76f8\u540c\u7684\u89c4\u5219\uff0c\u8fd9\u5957\u89c4\u5219\u79f0\u4e3a \u534f\u8bae\uff08protocol\uff09 \uff0c\u5b83\u6700\u7ec8\u4f53\u73b0\u4e3a\u5728\u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u6570\u636e\u5305\u7684\u683c\u5f0f \u534f\u8bae\u5f80\u5f80\u5206\u6210\u51e0\u4e2a\u5c42\u6b21\u8fdb\u884c\u5b9a\u4e49\uff0c\u5206\u5c42\u5b9a\u4e49\u662f\u4e3a\u4e86\u4f7f\u67d0\u4e00\u5c42\u534f\u8bae\u7684\u6539\u53d8\u4e0d\u5f71\u54cd\u5176\u4ed6\u5c42\u6b21\u7684\u534f\u8bae","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_22","text":"\u5e94\u7528\u5c42\u534f\u8bae FTP\u534f\u8bae\uff08File Transfer Protocol \u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff09 HTTP\u534f\u8bae\uff08Hyper Text Transfer Protocol \u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae\uff09 NFS\uff08Network File System \u7f51\u7edc\u6587\u4ef6\u7cfb\u7edf\uff09 \u4f20\u8f93\u5c42\u534f\u8bae TCP\u534f\u8bae\uff08Transmission Control Protocol \u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff09 UDP\u534f\u8bae\uff08User Datagram Protocol \u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09 \u7f51\u7edc\u5c42\u534f\u8bae IP \u534f\u8bae\uff08Internet Protocol \u56e0\u7279\u7f51\u4e92\u8054\u534f\u8bae\uff09 ICMP \u534f\u8bae\uff08Internet Control Message Protocol \u56e0\u7279\u7f51\u63a7\u5236\u62a5\u6587\u534f\u8bae\uff09 IGMP \u534f\u8bae\uff08Internet Group Management Protocol \u56e0\u7279\u7f51\u7ec4\u7ba1\u7406\u534f\u8bae\uff09\u3002 \u7f51\u7edc\u63a5\u53e3\u5c42\u534f\u8bae ARP\u534f\u8bae\uff08Address Resolution Protocol \u5730\u5740\u89e3\u6790\u534f\u8bae\uff09 RARP\u534f\u8bae\uff08Reverse Address Resolution Protocol \u53cd\u5411\u5730\u5740\u89e3\u6790\u534f\u8bae\uff09","title":"\u5e38\u89c1\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#udp","text":"\u6e90\u7aef\u53e3\u53f7\uff1a\u53d1\u9001\u65b9\u7aef\u53e3\u53f7 \u76ee\u7684\u7aef\u53e3\u53f7\uff1a\u63a5\u6536\u65b9\u7aef\u53e3\u53f7 \u957f\u5ea6\uff1aUDP\u7528\u6237\u6570\u636e\u62a5\u7684\u957f\u5ea6\uff0c\u6700\u5c0f\u503c\u662f8\uff08\u4ec5\u6709\u9996\u90e8\uff09 \u6821\u9a8c\u548c\uff1a\u68c0\u6d4bUDP\u7528\u6237\u6570\u636e\u62a5\u5728\u4f20\u8f93\u4e2d\u662f\u5426\u6709\u9519\uff0c\u6709\u9519\u5c31\u4e22\u5f03","title":"UDP\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp","text":"\u6e90\u7aef\u53e3\u53f7\uff1a\u53d1\u9001\u65b9\u7aef\u53e3\u53f7 \u76ee\u7684\u7aef\u53e3\u53f7\uff1a\u63a5\u6536\u65b9\u7aef\u53e3\u53f7 \u5e8f\u53f7\uff1a\u672c\u62a5\u6587\u6bb5\u7684\u6570\u636e\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5e8f\u53f7 \u786e\u8ba4\u53f7\uff1a\u671f\u671b\u6536\u5230\u5bf9\u65b9\u4e0b\u4e00\u4e2a\u62a5\u6587\u6bb5\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5b57\u8282\u7684\u5e8f\u53f7 \u5934\u90e8\u957f\u5ea6\uff08\u6570\u636e\u504f\u79fb\uff09\uff1aTCP \u62a5\u6587\u6bb5\u7684\u6570\u636e\u8d77\u59cb\u5904\u8ddd\u79bb TCP \u62a5\u6587\u6bb5\u7684\u8d77\u59cb\u5904\u6709\u591a\u8fdc\uff0c\u5373\u9996\u90e8\u957f\u5ea6\u3002==\u5355\u4f4d\uff1a32\u4f4d\uff0c\u5373\u4ee5 4 \u5b57\u8282\u4e3a\u8ba1\u7b97\u5355\u4f4d==\uff1f\uff1f\uff1f \u4fdd\u7559\uff1a\u5360 6 \u4f4d\uff0c\u4fdd\u7559\u4e3a\u4eca\u540e\u4f7f\u7528\uff0c\u76ee\u524d\u5e94\u7f6e\u4e3a 0 \u7d27\u6025 URG \uff1a\u6b64\u4f4d\u7f6e 1 \uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548\uff0c\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001 \u786e\u8ba4 ACK \uff1a\u4ec5\u5f53 ACK=1 \u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548\uff0cTCP \u89c4\u5b9a\uff0c\u5728\u8fde\u63a5\u5efa\u7acb\u540e\u6240\u6709\u4f20\u8fbe\u7684\u62a5\u6587\u6bb5\u90fd\u5fc5\u987b\u628a ACK \u7f6e1 \u63a8\u9001 PSH \uff1a\u5f53\u4e24\u4e2a\u5e94\u7528\u8fdb\u7a0b\u8fdb\u884c\u4ea4\u4e92\u5f0f\u7684\u901a\u4fe1\u65f6\uff0c\u6709\u65f6\u5728\u4e00\u7aef\u7684\u5e94\u7528\u8fdb\u7a0b\u5e0c\u671b\u5728\u952e\u5165\u4e00\u4e2a\u547d\u4ee4\u540e\u7acb\u5373\u5c31\u80fd\u591f\u6536\u5230\u5bf9\u65b9\u7684\u54cd\u5e94\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTCP \u5c31\u53ef\u4ee5\u4f7f\u7528\u63a8\u9001\uff08push\uff09\u64cd\u4f5c\uff0c\u8fd9\u65f6\uff0c\u53d1\u9001\u65b9TCP \u628a PSH \u7f6e 1\uff0c\u5e76\u7acb\u5373\u521b\u5efa\u4e00\u4e2a\u62a5\u6587\u6bb5\u53d1\u9001\u51fa\u53bb\uff0c\u63a5\u6536\u65b9\u6536\u5230 PSH = 1 \u7684\u62a5\u6587\u6bb5\uff0c\u5c31\u5c3d\u5feb\u5730\uff08\u5373\u201c\u63a8\u9001\u201d\u5411\u524d\uff09\u4ea4\u4ed8\u7ed9\u63a5\u6536\u5e94\u7528\u8fdb\u7a0b\uff0c\u800c\u4e0d\u518d\u7b49\u5230\u6574\u4e2a\u7f13\u5b58\u90fd\u586b\u6ee1\u540e\u518d\u5411\u4e0a\u4ea4\u4ed8 \u590d\u4f4d RST \uff1a\u7528\u4e8e\u590d\u4f4d\u76f8\u5e94\u7684 TCP \u8fde\u63a5 \u540c\u6b65 SYN \uff1a\u4ec5\u5728\u4e09\u6b21\u63e1\u624b\u5efa\u7acb TCP \u8fde\u63a5\u65f6\u6709\u6548\u3002\u5f53 SYN = 1 \u800c ACK = 0 \u65f6\uff0c\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\u6bb5\uff0c\u5bf9\u65b9\u82e5\u540c\u610f\u5efa\u7acb\u8fde\u63a5\uff0c\u5219\u5e94\u5728\u76f8\u5e94\u7684\u62a5\u6587\u6bb5\u4e2d\u4f7f\u7528 SYN = 1 \u548c ACK = 1\u3002\u56e0\u6b64\uff0cSYN \u7f6e1 \u5c31\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587 \u7ec8\u6b62 FIN \uff1a\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002\u5f53 FIN = 1 \u65f6\uff0c\u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u65b9\u7684\u6570\u636e\u5df2\u7ecf\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5 \u7a97\u53e3\uff1a\u6307\u53d1\u9001\u672c\u62a5\u6587\u6bb5\u7684\u4e00\u65b9\u7684\u63a5\u6536\u7a97\u53e3\uff08\u800c\u4e0d\u662f\u81ea\u5df1\u7684\u53d1\u9001\u7a97\u53e3\uff09 \u6821\u9a8c\u548c\uff1a\u6821\u9a8c\u548c\u5b57\u6bb5\u68c0\u9a8c\u7684\u8303\u56f4\u5305\u62ec\u9996\u90e8\u548c\u6570\u636e\u4e24\u90e8\u5206\uff0c\u5728\u8ba1\u7b97\u6821\u9a8c\u548c\u65f6\u9700\u8981\u52a0\u4e0a 12 \u5b57\u8282\u7684\u4f2a\u5934\u90e8 \u7d27\u6025\u6307\u9488\uff1a\u4ec5\u5728 URG = 1 \u65f6\u624d\u6709\u610f\u4e49\uff0c\u5b83\u6307\u51fa\u672c\u62a5\u6587\u6bb5\u4e2d\u7684\u7d27\u6025\u6570\u636e\u7684\u5b57\u8282\u6570\uff08\u7d27\u6025\u6570\u636e\u7ed3\u675f\u540e\u5c31\u662f\u666e\u901a\u6570\u636e\uff09\uff0c\u5373\u6307\u51fa\u4e86\u7d27\u6025\u6570\u636e\u7684\u672b\u5c3e\u5728\u62a5\u6587\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6ce8\u610f\uff1a\u5373\u4f7f\u7a97\u53e3\u4e3a\u96f6\u65f6\u4e5f\u53ef\u53d1\u9001\u7d27\u6025\u6570\u636e \u9009\u9879\uff1a\u957f\u5ea6\u53ef\u53d8\uff0c\u6700\u957f\u53ef\u8fbe 40 \u5b57\u8282\uff0c\u5f53\u6ca1\u6709\u4f7f\u7528\u9009\u9879\u65f6\uff0cTCP \u9996\u90e8\u957f\u5ea6\u662f 20 \u5b57\u8282","title":"TCP\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ip_2","text":"\u7248\u672c\u53f7\uff1aIP \u534f\u8bae\u7684\u7248\u672c\u3002\u901a\u4fe1\u53cc\u65b9\u4f7f\u7528\u8fc7\u7684 IP \u534f\u8bae\u7684\u7248\u672c\u5fc5\u987b\u4e00\u81f4\uff0c\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684 IP \u534f\u8bae\u7248\u672c\u53f7\u4e3a 4\uff08\u5373IPv4) \u5934\u90e8\u957f\u5ea6\uff1a\u5355\u4f4d\u662f 32 \u4f4d\uff084 \u5b57\u8282\uff09 \u670d\u52a1\u7c7b\u578b\uff1a\u4e00\u822c\u4e0d\u9002\u7528\uff0c\u53d6\u503c\u4e3a 0 \u603b\u957f\u5ea6\uff1a\u6307\u9996\u90e8\u52a0\u4e0a\u6570\u636e\u7684\u603b\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282 \u6807\u8bc6\uff08identification\uff09\uff1aIP \u8f6f\u4ef6\u5728\u5b58\u50a8\u5668\u4e2d\u7ef4\u6301\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u6bcf\u4ea7\u751f\u4e00\u4e2a\u6570\u636e\u62a5\uff0c\u8ba1\u6570\u5668\u5c31\u52a0 1\uff0c\u5e76\u5c06\u6b64\u503c\u8d4b\u7ed9\u6807\u8bc6\u5b57\u6bb5 \u6807\u5fd7\uff08flag\uff09\uff1a\u76ee\u524d\u53ea\u6709\u4e24\u4f4d\u6709\u610f\u4e49 \u6807\u5fd7\u5b57\u6bb5\u4e2d\u7684\u6700\u4f4e\u4f4d\u8bb0\u4e3a MF\u3002MF = 1 \u5373\u8868\u793a\u540e\u9762\u201c\u8fd8\u6709\u5206\u7247\u201d\u7684\u6570\u636e\u62a5\u3002MF = 0 \u8868\u793a\u8fd9\u5df2\u662f\u82e5\u5e72\u6570\u636e\u62a5\u7247\u4e2d\u7684\u6700\u540e\u4e00\u4e2a \u6807\u5fd7\u5b57\u6bb5\u4e2d\u95f4\u7684\u4e00\u4f4d\u8bb0\u4e3a DF\uff0c\u610f\u601d\u662f\u201c\u4e0d\u80fd\u5206\u7247\u201d\uff0c\u53ea\u6709\u5f53 DF = 0 \u65f6\u624d\u5141\u8bb8\u5206\u7247 \u7247\u504f\u79fb\uff1a\u6307\u51fa\u8f83\u957f\u7684\u5206\u7ec4\u5728\u5206\u7247\u540e\uff0c\u67d0\u7247\u5728\u6e90\u5206\u7ec4\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f8\u5bf9\u4e8e\u7528\u6237\u6570\u636e\u6bb5\u7684\u8d77\u70b9\uff0c\u8be5\u7247\u4ece\u4f55\u5904\u5f00\u59cb\u3002\u7247\u504f\u79fb\u4ee5 8 \u5b57\u8282\u4e3a\u504f\u79fb\u5355\u4f4d \u751f\u5b58\u65f6\u95f4\uff1aTTL\uff0c\u8868\u660e\u662f\u6570\u636e\u62a5\u5728\u7f51\u7edc\u4e2d\u7684\u5bff\u547d\uff0c\u5373\u4e3a \u8df3\u6570\u9650\u5236 \uff0c\u7531\u53d1\u51fa\u6570\u636e\u62a5\u7684\u6e90\u70b9\u8bbe\u7f6e\u8fd9\u4e2a\u5b57\u6bb5\u3002\u8def\u7531\u5668\u5728\u8f6c\u53d1\u6570\u636e\u4e4b\u524d\u5c31\u628a TTL \u503c\u51cf\u4e00\uff0c\u5f53 TTL \u503c\u51cf\u4e3a\u96f6\u65f6\uff0c\u5c31\u4e22\u5f03\u8fd9\u4e2a\u6570\u636e\u62a5\uff0c\u5e38\u89c1\u4e3a 64\u548c128 \u534f\u8bae\uff1a\u6307\u51fa\u6b64\u6570\u636e\u62a5\u643a\u5e26\u7684\u6570\u636e\u65f6\u4f7f\u7528\u4f55\u79cd\u534f\u8bae\uff0c\u4ee5\u4fbf\u4f7f\u76ee\u7684\u4e3b\u673a\u7684 IP \u5c42\u77e5\u9053\u5e94\u5c06\u6570\u636e\u90e8\u5206\u4e0a\u4ea4\u7ed9\u54ea\u4e2a\u5904\u7406\u8fc7\u7a0b\uff0c\u5e38\u7528\u7684 ICMP(1)\uff0cIGMP(2)\uff0cTCP(6)\uff0cUDP(17)\uff0cIPv6\uff0841\uff09 \u9996\u90e8\u6821\u9a8c\u548c\uff1a\u53ea\u6821\u9a8c\u6570\u636e\u62a5\u7684\u9996\u90e8\uff0c\u4e0d\u5305\u62ec\u6570\u636e\u90e8\u5206 \u6e90\u5730\u5740\uff1a\u53d1\u9001\u65b9 IP \u5730\u5740 \u76ee\u7684\u5730\u5740\uff1a\u63a5\u6536\u65b9 IP \u5730\u5740","title":"IP\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_23","text":"\u7c7b\u578b 0x800\u8868\u793a IP 0x806\u8868\u793a ARP 0x835\u8868\u793a RARP","title":"\u4ee5\u592a\u7f51\u5e27\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#arp","text":"\u786c\u4ef6\u7c7b\u578b\uff1a1 \u8868\u793a MAC \u5730\u5740 \u534f\u8bae\u7c7b\u578b\uff1a0x800 \u8868\u793a IP \u5730\u5740 \u786c\u4ef6\u5730\u5740\u957f\u5ea6\uff1a6 \u534f\u8bae\u5730\u5740\u957f\u5ea6\uff1a4 \u64cd\u4f5c 1 \u8868\u793a ARP \u8bf7\u6c42 2 \u8868\u793a ARP \u5e94\u7b54 3 \u8868\u793a RARP \u8bf7\u6c42 4 \u8868\u793a RARP \u5e94\u7b54","title":"ARP\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_24","text":"","title":"\u7f51\u7edc\u901a\u4fe1\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_25","text":"\u53d1\u9001\u7aef \u901a\u8fc7TCP/IP\u4e2d\u6bcf\u4e00\u5c42\u65f6\u9700\u8981\u5c06\u6d88\u606f \u5c01\u88c5 \u5bf9\u5e94\u4fe1\u606f\uff0c\u7136\u540e \u63a5\u6536\u7aef \u901a\u8fc7\u8fc7TCP/IP\u4e2d\u6bcf\u4e00\u5c42\u65f6\u9700\u8981\u5c06\u6d88\u606f \u5206\u7528\uff08\u89e3\u5c01\u88c5\uff09 \u5bf9\u5e94\u4fe1\u606f \u5c01\u88c5 \u4e0a\u5c42\u534f\u8bae\u662f\u5982\u4f55\u4f7f\u7528\u4e0b\u5c42\u534f\u8bae\u63d0\u4f9b\u7684\u670d\u52a1\u7684\u5462\uff1f\u5176\u5b9e\u8fd9\u662f\u901a\u8fc7\u5c01\u88c5\uff08encapsulation\uff09\u5b9e\u73b0\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u5728\u53d1\u9001\u5230\u7269\u7406\u7f51\u7edc\u4e0a\u4e4b\u524d\uff0c\u5c06\u6cbf\u7740\u534f\u8bae\u6808\u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u4f20\u9012\u3002\u6bcf\u5c42\u534f\u8bae\u90fd\u5c06\u5728\u4e0a\u5c42\u6570\u636e\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u81ea\u5df1\u7684\u5934\u90e8\u4fe1\u606f\uff08\u6709\u65f6\u8fd8\u5305\u62ec\u5c3e\u90e8\u4fe1\u606f\uff09\uff0c\u4ee5\u5b9e\u73b0\u8be5\u5c42\u7684\u529f\u80fd\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u79f0\u4e3a\u5c01\u88c5 \u5206\u7528 \u5f53\u5e27\u5230\u8fbe\u76ee\u7684\u4e3b\u673a\u65f6\uff0c\u5c06\u6cbf\u7740\u534f\u8bae\u6808\u81ea\u5e95\u5411\u4e0a\u4f9d\u6b21\u4f20\u9012\u3002\u5404\u5c42\u534f\u8bae\u4f9d\u6b21\u5904\u7406\u5e27\u4e2d\u672c\u5c42\u8d1f\u8d23\u7684\u5934\u90e8\u6570\u636e\uff0c\u4ee5\u83b7\u53d6\u6240\u9700\u7684\u4fe1\u606f\uff0c\u5e76\u6700\u7ec8\u5c06\u5904\u7406\u540e\u7684\u5e27\u4ea4\u7ed9\u76ee\u6807\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5206\u7528\uff08demultiplexing\uff09\u3002\u5206\u7528\u662f\u4f9d\u9760\u5934\u90e8\u4fe1\u606f\u4e2d\u7684\u7c7b\u578b\u5b57\u6bb5\u5b9e\u73b0\u7684","title":"\u5c01\u88c5\u4e0e\u5206\u7528"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#qq","text":"\u5b58\u5728\u7684\u95ee\u9898\uff1a\u5728\u6570\u636e\u94fe\u8def\u5c42\u5c01\u88c5\u4ee5\u592a\u7f51\u5e27\u65f6\uff0c\u600e\u4e48\u77e5\u9053\u76ee\u6807\u673a\u5668\u7684MAC\u5730\u5740\uff1f=>\u901a\u8fc7 arp\u534f\u8bae","title":"\u5b9e\u4f8b\uff1aQQ\u53d1\u9001\u6d88\u606f\u7b80\u6613\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#arp_1","text":"arp\u534f\u8bae\u901a\u8fc7IP\u5730\u5740\u627e\u5230MAC\u5730\u5740\uff0c\u901a\u8fc7 \u5e7f\u64adarp\u8bf7\u6c42\u627e\u5230 \uff0c\u5c40\u57df\u7f51\u5185\u6839\u636e\u4fe1\u606f\u89e3\u6790\u5f97\u5230 arp\u5e94\u7b54 rarp\u534f\u8bae\u901a\u8fc7MAC\u5730\u5740\u627eIP\u5730\u5740","title":"ARP\u534f\u8bae"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#socket","text":"","title":"socket\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_26","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/02 socket\u901a\u4fe1","title":"\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#socket_1","text":"socket\uff08\u5957\u63a5\u5b57\uff09 \uff0c\u5c31\u662f\u5bf9\u7f51\u7edc\u4e2d \u4e0d\u540c\u4e3b\u673a \u4e0a\u7684\u5e94\u7528\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c \u53cc\u5411\u901a\u4fe1 \u7684\u7aef\u70b9\u7684\u62bd\u8c61 \u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u662f\u7f51\u7edc\u4e0a\u8fdb\u7a0b\u901a\u4fe1\u7684\u4e00\u7aef\uff0c\u63d0\u4f9b\u4e86\u5e94\u7528\u5c42\u8fdb\u7a0b\u5229\u7528\u7f51\u7edc\u534f\u8bae\u4ea4\u6362\u6570\u636e\u7684\u673a\u5236\u3002\u4ece\u6240\u5904\u7684\u5730\u4f4d\u6765\u8bb2\uff0c\u5957\u63a5\u5b57\u4e0a\u8054\u5e94\u7528\u8fdb\u7a0b\uff0c\u4e0b\u8054\u7f51\u7edc\u534f\u8bae\u6808\uff0c\u662f\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u7f51\u7edc\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\uff0c\u662f\u5e94\u7528\u7a0b\u5e8f\u4e0e\u7f51\u7edc\u534f\u8bae\u6839\u8fdb\u884c\u4ea4\u4e92\u7684\u63a5\u53e3 socket \u53ef\u4ee5\u770b\u6210\u662f\u4e24\u4e2a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u5404\u81ea\u901a\u4fe1\u8fde\u63a5\u4e2d\u7684\u7aef\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u6982\u5ff5 \u5b83\u662f\u7f51\u7edc\u73af\u5883\u4e2d\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684 API\uff0c\u4e5f\u662f\u53ef\u4ee5\u88ab\u547d\u540d\u548c\u5bfb\u5740\u7684\u901a\u4fe1\u7aef\u70b9\uff0c\u4f7f\u7528\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u5176\u7c7b\u578b\u548c\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u8fde\u8fdb\u7a0b\u3002\u901a\u4fe1\u65f6\u5176\u4e2d\u4e00\u4e2a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5c06\u8981\u4f20\u8f93\u7684\u4e00\u6bb5\u4fe1\u606f\u5199\u5165\u5b83\u6240\u5728\u4e3b\u673a\u7684 socket \u4e2d\uff0c\u8be5 socket \u901a\u8fc7\u4e0e\u7f51\u7edc\u63a5\u53e3\u5361\uff08NIC\uff09\u76f8\u8fde\u7684\u4f20\u8f93\u4ecb\u8d28\u5c06\u8fd9\u6bb5\u4fe1\u606f\u9001\u5230\u53e6\u5916\u4e00\u53f0\u4e3b\u673a\u7684 socket \u4e2d\uff0c\u4f7f\u5bf9\u65b9\u80fd\u591f\u63a5\u6536\u5230\u8fd9\u6bb5\u4fe1\u606f\u3002socket \u662f\u7531 IP \u5730\u5740\u548c\u7aef\u53e3\u7ed3\u5408\u7684\uff0c\u63d0\u4f9b\u5411\u5e94\u7528\u5c42\u8fdb\u7a0b\u4f20\u9001\u6570\u636e\u5305\u7684\u673a\u5236 socket \u672c\u8eab\u6709\u201c\u63d2\u5ea7\u201d\u7684\u610f\u601d\uff0c\u5728 Linux \u73af\u5883\u4e0b\uff0c\u7528\u4e8e\u8868\u793a\u8fdb\u7a0b\u95f4\u7f51\u7edc\u901a\u4fe1\u7684\u7279\u6b8a\u6587\u4ef6\u7c7b\u578b\u3002 \u672c\u8d28\u4e3a\u5185\u6838\u501f\u52a9\u7f13\u51b2\u533a\u5f62\u6210\u7684\u4f2a\u6587\u4ef6 \u65e2\u7136\u662f\u6587\u4ef6\uff0c\u90a3\u4e48\u7406\u6240\u5f53\u7136\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u5f15\u7528\u5957\u63a5\u5b57\u3002\u4e0e\u7ba1\u9053\u7c7b\u4f3c\u7684\uff0cLinux \u7cfb\u7edf\u5c06\u5176\u5c01\u88c5\u6210\u6587\u4ef6\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u7edf\u4e00\u63a5\u53e3\uff0c\u4f7f\u5f97\u8bfb\u5199\u5957\u63a5\u5b57\u548c\u8bfb\u5199\u6587\u4ef6\u7684\u64cd\u4f5c\u4e00\u81f4\u3002\u533a\u522b\u662f\u7ba1\u9053\u4e3b\u8981\u5e94\u7528\u4e8e\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u800c\u5957\u63a5\u5b57\u591a\u5e94\u7528\u4e8e\u7f51\u7edc\u8fdb\u7a0b\u95f4\u6570\u636e\u7684\u4f20\u9012 \u5957\u63a5\u5b57\u901a\u4fe1\u5206\u4e24\u90e8\u5206 \u670d\u52a1\u5668\u7aef\uff1a\u88ab\u52a8\u63a5\u53d7\u8fde\u63a5\uff0c\u4e00\u822c\u4e0d\u4f1a\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5 \u5ba2\u6237\u7aef\uff1a\u4e3b\u52a8\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5 socket\u662f\u4e00\u5957\u901a\u4fe1\u7684\u63a5\u53e3\uff0cLinux \u548c Windows \u90fd\u6709\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u522b","title":"socket\u4ecb\u7ecd"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_27","text":"","title":"\u5b57\u8282\u5e8f"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_28","text":"\u5b57\u8282\u5e8f \uff0c\u987e\u540d\u601d\u4e49\u5b57\u8282\u7684\u987a\u5e8f\uff0c\u5c31\u662f \u5927\u4e8e\u4e00\u4e2a\u5b57\u8282\u7c7b\u578b\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u653e\u987a\u5e8f (\u4e00\u4e2a\u5b57\u8282\u7684\u6570\u636e\u5f53\u7136\u5c31\u65e0\u9700\u8c08\u987a\u5e8f\u7684\u95ee\u9898\u4e86) \u5b57\u8282\u5e8f\u5206\u4e3a \u5927\u7aef\u5b57\u8282\u5e8f\uff08Big-Endian\uff09 \u548c \u5c0f\u7aef\u5b57\u8282\u5e8f\uff08Little-Endian\uff09 \u5927\u7aef\u5b57\u8282\u5e8f \uff1a\u6307\u4e00\u4e2a\u6574\u6570\u7684\u6700\u9ad8\u4f4d\u5b57\u8282\uff0823 ~ 31 bit\uff09\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5904\uff0c\u4f4e\u4f4d\u5b57\u8282\uff080 ~ 7 bit\uff09\u5b58\u50a8\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5904 \u5c0f\u7aef\u5b57\u8282\u5e8f \uff1a\u6307\u6574\u6570\u7684\u9ad8\u4f4d\u5b57\u8282\u5b58\u50a8\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u5904\uff0c\u800c\u4f4e\u4f4d\u5b57\u8282\u5219\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u5904 \u73b0\u4ee3 CPU \u7684\u7d2f\u52a0\u5668\u4e00\u6b21\u90fd\u80fd\u88c5\u8f7d\uff08\u81f3\u5c11\uff094 \u5b57\u8282\uff08\u8fd9\u91cc\u8003\u8651 32 \u4f4d\u673a\uff09\uff0c\u5373\u4e00\u4e2a\u6574\u6570\u3002\u90a3\u4e48\u8fd9 4\u5b57\u8282\u5728\u5185\u5b58\u4e2d\u6392\u5217\u7684\u987a\u5e8f\u5c06\u5f71\u54cd\u5b83\u88ab\u7d2f\u52a0\u5668\u88c5\u8f7d\u6210\u7684\u6574\u6570\u7684\u503c\uff0c\u8fd9\u5c31\u662f\u5b57\u8282\u5e8f\u95ee\u9898 \u5728\u5404\u79cd\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u5bf9\u4e8e\u5b57\u8282\u3001\u5b57\u7b49\u7684\u5b58\u50a8\u673a\u5236\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u800c\u5f15\u53d1\u4e86\u8ba1\u7b97\u673a\u901a\u4fe1\u9886\u57df\u4e2d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u5373\u901a\u4fe1\u53cc\u65b9\u4ea4\u6d41\u7684\u4fe1\u606f\u5355\u5143\uff08\u6bd4\u7279\u3001\u5b57\u8282\u3001\u5b57\u3001\u53cc\u5b57\u7b49\u7b49\uff09\u5e94\u8be5\u4ee5\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u8fdb\u884c\u4f20\u9001\u3002\u5982\u679c\u4e0d\u8fbe\u6210\u4e00\u81f4\u7684\u89c4\u5219\uff0c\u901a\u4fe1\u53cc\u65b9\u5c06\u65e0\u6cd5\u8fdb\u884c\u6b63\u786e\u7684\u7f16\u7801/\u8bd1\u7801\u4ece\u800c\u5bfc\u81f4\u901a\u4fe1\u5931\u8d25","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_29","text":"\u5927\u7aef\u5b57\u8282\u5e8f \u5c0f\u7aef\u5b57\u8282\u5e8f","title":"\u5b57\u8282\u5e8f\u4e3e\u4f8b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_30","text":"#include <stdio.h> int main() { union{ short value; // \u4e24\u5b57\u8282 char bytes[sizeof(short)]; // \u4e24\u5b57\u8282 }test; test.value = 0x0102; if (test.bytes[0] == 1 && test.bytes[1] == 2) { printf(\"\u5927\u7aef\u673a\u5668\\n\"); } else if (test.bytes[0] == 2 && test.bytes[1] == 1) { printf(\"\u5c0f\u7aef\u673a\u5668\\n\"); } else { printf(\"\u672a\u77e5\\n\"); } return 0; }","title":"\u67e5\u770b\u673a\u5668\u5b57\u8282\u5e8f"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_31","text":"\u5f53\u683c\u5f0f\u5316\u7684\u6570\u636e\u5728\u4e24\u53f0\u4f7f\u7528\u4e0d\u540c\u5b57\u8282\u5e8f\u7684\u4e3b\u673a\u4e4b\u95f4\u76f4\u63a5\u4f20\u9012\u65f6\uff0c\u63a5\u6536\u7aef\u5fc5\u7136\u9519\u8bef\u7684\u89e3\u91ca\u4e4b\u3002\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u662f\uff1a \u53d1\u9001\u7aef\u603b\u662f\u628a\u8981\u53d1\u9001\u7684\u6570\u636e\u8f6c\u6362\u6210\u5927\u7aef\u5b57\u8282\u5e8f\u6570\u636e\u540e\u518d\u53d1\u9001 \uff0c\u800c\u63a5\u6536\u7aef\u77e5\u9053\u5bf9\u65b9\u4f20\u9001\u8fc7\u6765\u7684\u6570\u636e\u603b\u662f\u91c7\u7528\u5927\u7aef\u5b57\u8282\u5e8f\uff0c\u6240\u4ee5\u63a5\u6536\u7aef\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u91c7\u7528\u7684\u5b57\u8282\u5e8f\u51b3\u5b9a\u662f\u5426\u5bf9\u63a5\u6536\u5230\u7684\u6570\u636e\u8fdb\u884c\u8f6c\u6362\uff08\u5c0f\u7aef\u673a\u8f6c\u6362\uff0c\u5927\u7aef\u673a\u4e0d\u8f6c\u6362\uff09 \u7f51\u7edc\u5b57\u8282\u987a\u5e8f \u662f TCP/IP \u4e2d\u89c4\u5b9a\u597d\u7684\u4e00\u79cd\u6570\u636e\u8868\u793a\u683c\u5f0f\uff0c\u5b83\u4e0e\u5177\u4f53\u7684 CPU \u7c7b\u578b\u3001\u64cd\u4f5c\u7cfb\u7edf\u7b49\u65e0\u5173\uff0c\u4ece\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u5728\u4e0d\u540c\u4e3b\u673a\u4e4b\u95f4\u4f20\u8f93\u65f6\u80fd\u591f\u88ab\u6b63\u786e\u89e3\u91ca\uff0c\u7f51\u7edc\u5b57\u8282\u987a\u5e8f\u91c7\u7528\u5927\u7aef\u6392\u5e8f\u65b9\u5f0f BSD Socket\u63d0\u4f9b\u4e86\u5c01\u88c5\u597d\u7684\u8f6c\u6362\u63a5\u53e3\uff0c\u65b9\u4fbf\u7a0b\u5e8f\u5458\u4f7f\u7528 \u4ece\u4e3b\u673a\u5b57\u8282\u5e8f\u5230\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u8f6c\u6362\u51fd\u6570\uff1a htons \u3001 htonl \u4ece\u7f51\u7edc\u5b57\u8282\u5e8f\u5230\u4e3b\u673a\u5b57\u8282\u5e8f\u7684\u8f6c\u6362\u51fd\u6570\uff1a ntohs \u3001 ntohl ```c h - host \u4e3b\u673a\uff0c\u4e3b\u673a\u5b57\u8282\u5e8f to - \u8f6c\u6362\u6210\u4ec0\u4e48 n - network \u7f51\u7edc\u5b57\u8282\u5e8f s - short unsigned short l - long unsigned int #include // \u8f6c\u6362\u7aef\u53e3 uint16_t htons(uint16_t hostshort); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f uint16_t ntohs(uint16_t netshort); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f // \u8f6cIP uint32_t htonl(uint32_t hostlong); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f uint32_t ntohl(uint32_t netlong); // \u4e3b\u673a\u5b57\u8282\u5e8f => \u7f51\u7edc\u5b57\u8282\u5e8f ``` \u5b9e\u4f8b\uff1a\u6a21\u62df\u4e3b\u673a\u4e0e\u7f51\u7edcIP\u53ca\u7aef\u53e3\u8f6c\u6362\uff08\u672c\u673a\u4e3a\u5c0f\u7aef\u673a\u5668\uff09 ```c #include #include int main() { // \u4e3b\u673a\u5b57\u8282\u5e8f\u8f6c\u7f51\u7edc\u5b57\u8282\u5e8f // IP\u8f6c\u6362 char ip1[4] = {192, 168, 1, 1}; int num1 = (int )ip1; int convet1 = htonl(num1); unsigned char p1 = (char )&convet1; for (int i = 0; i < 4; i++) { printf(\"%d \", *(p1 + i)); } printf(\"\\n\"); // \u7aef\u53e3\u8f6c\u6362 unsigned short port1 = 0x0102; unsigned short conv_port1 = htons(port1); printf(\"port1: %x\\n\", port1); printf(\"conv_port1: %x\\n\", conv_port1); printf(\"====================\\n\"); // \u7f51\u7edc\u5b57\u8282\u5e8f\u8f6c\u4e3b\u673a\u5b57\u8282\u5e8f // IP\u8f6c\u6362 char ip2[4] = {2, 1, 168, 192}; int num2 = *(int*)ip2; int convet2 = ntohl(num2); unsigned char *p2 = (char*)&convet2; for (int i = 0; i < 4; i++) { printf(\"%d \", *(p2 + i)); } printf(\"\\n\"); // \u7aef\u53e3\u8f6c\u6362 unsigned short port2 = 0x0201; unsigned short conv_port2 = htons(port2); printf(\"port2: %x\\n\", port2); printf(\"conv_port2: %x\\n\", conv_port2); return 0; } ```","title":"\u5b57\u8282\u5e8f\u8f6c\u6362\u51fd\u6570"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#socket_2","text":"","title":"socket\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_32","text":"socket\u5730\u5740\u5176\u5b9e\u662f\u4e00\u4e2a \u7ed3\u6784\u4f53 \uff0c \u5c01\u88c5\u7aef\u53e3\u53f7\u548cIP\u7b49\u4fe1\u606f \u540e\u9762\u7684socket\u76f8\u5173\u7684api\u4e2d\u9700\u8981\u4f7f\u7528\u5230\u8fd9\u4e2a socket\u5730\u5740","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#socket_3","text":"socket \u7f51\u7edc\u7f16\u7a0b\u63a5\u53e3\u4e2d\u8868\u793a socket \u5730\u5740\u7684\u662f\u7ed3\u6784\u4f53 sockaddr \uff0c\u5176\u5b9a\u4e49\u5982\u4e0b ```c #include struct sockaddr { sa_family_t sa_family; char sa_data[14]; }; typedef unsigned short int sa_family_t; ``` sa_family sa_family \u6210\u5458\u662f\u5730\u5740\u65cf\u7c7b\u578b\uff08 sa_family_t \uff09\u7684\u53d8\u91cf \u5730\u5740\u65cf\u7c7b\u578b \u901a\u5e38\u4e0e \u534f\u8bae\u65cf\u7c7b\u578b \u5bf9\u5e94 \u5b8f PF_* \u548c AF_* \u90fd\u5b9a\u4e49\u5728 bits/socket.h \u5934\u6587\u4ef6\u4e2d\uff0c\u4e14\u540e\u8005\u4e0e\u524d\u8005\u6709\u5b8c\u5168\u76f8\u540c\u7684\u503c\uff0c\u6240\u4ee5\u4e8c\u8005\u901a\u5e38\u6df7\u7528 \u534f\u8bae\u65cf \u5730\u5740\u65cf \u63cf\u8ff0 PF_UNIX AF_UNIX UNIX\u672c\u5730\u57df\u534f\u8bae\u65cf PF_INET AF_INET TCP/IPv4\u534f\u8bae\u65cf PF_INET6 AF_INET6 TCP/IPv6\u534f\u8bae\u65cf sa_data sa_data \u6210\u5458\u7528\u4e8e\u5b58\u653e socket \u5730\u5740\u503c\uff0c\u4e0d\u540c\u7684\u534f\u8bae\u65cf\u7684\u5730\u5740\u503c\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u548c\u957f\u5ea6 \u534f\u8bae\u65cf \u5730\u5740\u503c\u542b\u4e49\u548c\u957f\u5ea6 PF_UNIX \u6587\u4ef6\u7684\u8def\u5f84\u540d\uff0c\u957f\u5ea6\u53ef\u8fbe\u5230108\u5b57\u8282 PF_INET 16 bit \u7aef\u53e3\u53f7\u548c 32 bit IPv4 \u5730\u5740\uff0c\u5171 6 \u5b57\u8282 PF_INET6 16 bit \u7aef\u53e3\u53f7\uff0c32 bit \u6d41\u6807\u8bc6\uff0c128 bit IPv6 \u5730\u5740\uff0c32 bit \u8303\u56f4 ID\uff0c\u5171 26 \u5b57\u8282 \u7531\u4e0a\u8868\u53ef\u77e5\uff0c14 \u5b57\u8282\u7684 sa_data \u6839\u672c\u65e0\u6cd5\u5bb9\u7eb3\u591a\u6570\u534f\u8bae\u65cf\u7684\u5730\u5740\u503c\u3002\u56e0\u6b64\uff0cLinux \u5b9a\u4e49\u4e86\u4e0b\u9762\u8fd9\u4e2a\u65b0\u7684\u901a\u7528\u7684 socket \u5730\u5740\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u8db3\u591f\u5927\u7684\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e\u5730\u5740\u503c\uff0c\u800c\u4e14\u662f\u5185\u5b58\u5bf9\u9f50\u7684 ```c","title":"\u901a\u7528 socket \u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#include","text":"struct sockaddr_storage { sa_family_t sa_family; unsigned long int __ss_align; char __ss_padding[ 128 - sizeof(__ss_align) ]; }; typedef unsigned short int sa_family_t; ```","title":"include "},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#socket_4","text":"","title":"\u4e13\u7528socket\u5730\u5740"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_33","text":"\u5f88\u591a\u7f51\u7edc\u7f16\u7a0b\u51fd\u6570\u8bde\u751f\u65e9\u4e8e IPv4 \u534f\u8bae\uff0c\u90a3\u65f6\u5019\u90fd\u4f7f\u7528\u7684\u662f struct sockaddr \u7ed3\u6784\u4f53\uff0c\u4e3a\u4e86\u5411\u524d\u517c\u5bb9\uff0c\u73b0\u5728 sockaddr \u9000\u5316\u6210\u4e86\uff08void *\uff09\u7684\u4f5c\u7528\uff0c\u4f20\u9012\u4e00\u4e2a\u5730\u5740\u7ed9\u51fd\u6570\uff0c\u81f3\u4e8e\u8fd9\u4e2a\u51fd\u6570\u662f sockaddr_in \u8fd8\u662f sockaddr_in6 \uff0c\u7531\u5730\u5740\u65cf\u786e\u5b9a\uff0c\u7136\u540e\u51fd\u6570\u5185\u90e8\u518d\u5f3a\u5236\u7c7b\u578b\u8f6c\u5316\u4e3a\u6240\u9700\u7684\u5730\u5740\u7c7b\u578b \u4e0d\u540csocket\u5730\u5740\u5bf9\u6bd4\u56fe \u6240\u6709\u4e13\u7528 socket \u5730\u5740\uff08\u4ee5\u53ca sockaddr_storage\uff09\u7c7b\u578b\u7684\u53d8\u91cf\u5728\u5b9e\u9645\u4f7f\u7528\u65f6\u90fd\u9700\u8981\u8f6c\u5316\u4e3a\u901a\u7528 socket \u5730\u5740\u7c7b\u578b sockaddr\uff08\u5f3a\u5236\u8f6c\u5316\u5373\u53ef\uff09\uff0c\u56e0\u4e3a\u6240\u6709 socket \u7f16\u7a0b\u63a5\u53e3\u4f7f\u7528\u7684\u5730\u5740\u53c2\u6570\u7c7b\u578b\u90fd\u662f sockaddr","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#unix","text":"#include <sys/un.h> struct sockaddr_un { sa_family_t sin_family; char sun_path[108]; };","title":"UNIX \u672c\u5730\u57df\u534f\u8bae\u65cf"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcpip_1","text":"// IPV4 #include <netinet/in.h> struct sockaddr_in { sa_family_t sin_family; /* __SOCKADDR_COMMON(sin_) */ in_port_t sin_port; /* Port number. */ struct in_addr sin_addr; /* Internet address. */ /* Pad to size of `struct sockaddr'. */ unsigned char sin_zero[sizeof (struct sockaddr) - __SOCKADDR_COMMON_SIZE - sizeof (in_port_t) - sizeof (struct in_addr)]; }; struct in_addr { in_addr_t s_addr; }; // IPV6 struct sockaddr_in6 { sa_family_t sin6_family; in_port_t sin6_port; /* Transport layer port # */ uint32_t sin6_flowinfo; /* IPv6 flow information */ struct in6_addr sin6_addr; /* IPv6 address */ uint32_t sin6_scope_id; /* IPv6 scope-id */ }; // \u76f8\u5173\u5b9a\u4e49 typedef unsigned short uint16_t; typedef unsigned int uint32_t; typedef uint16_t in_port_t; typedef uint32_t in_addr_t; #define __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))","title":"TCP/IP\u534f\u8bae\u65cf"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ip_3","text":"\u70b9\u5206\u5341\u8fdb\u5236 IP\u5730\u5740\u4e0e \u7f51\u7edc\u5b57\u8282\u5e8f\u6574\u6570 IP\u5730\u5740\u76f8\u4e92\u8f6c\u6362 \u901a\u5e38\uff0c\u4eba\u4eec\u4e60\u60ef\u7528\u53ef\u8bfb\u6027\u597d\u7684\u5b57\u7b26\u4e32\u6765\u8868\u793a IP \u5730\u5740\uff0c\u6bd4\u5982\u7528\u70b9\u5206\u5341\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a IPv4 \u5730\u5740\uff0c\u4ee5\u53ca\u7528\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a IPv6 \u5730\u5740\u3002\u4f46\u7f16\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u5148\u628a\u5b83\u4eec\u8f6c\u5316\u4e3a\u6574\u6570\uff08\u4e8c\u8fdb\u5236\u6570\uff09\u65b9\u80fd\u4f7f\u7528\u3002\u800c\u8bb0\u5f55\u65e5\u5fd7\u65f6\u5219\u76f8\u53cd\uff0c\u6211\u4eec\u8981\u628a\u6574\u6570\u8868\u793a\u7684 IP \u5730\u5740\u8f6c\u5316\u4e3a\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32 \u65e7\u7248\uff08\u5df2\u5f03\u7528\uff09\uff1a\u53ea\u9002\u7528\u4e8eIPV4\u95f4\u7684\u8f6c\u6362 c #include <arpa/inet.h> in_addr_t inet_addr(const char *cp); int inet_aton(const char *cp, struct in_addr *inp); char *inet_ntoa(struct in_addr in); \u65b0\u7248\uff1a\u540c\u65f6\u9002\u7528\u4e8eIPV4\u548cIPV6 \u5b57\u6bcd\u542b\u4e49 p \uff1a\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32 n \uff1a\u8868\u793anetwork\uff0c\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570 int inet_pton(int af, const char *src, void *dst); \u4f7f\u7528 man inet_pton \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5c06\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5730\u5740\u5b57\u7b26\u4e32\uff0c\u8f6c\u6362\u6210\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570 \u53c2\u6570 af \uff1a\u5730\u5740\u65cf IPV4\uff1a AF_INET IPV6\uff1a AF_INET6(IPV6) src \uff1a\u9700\u8981\u8f6c\u6362\u7684\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32 dst \uff1a\u8f6c\u6362\u540e\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u8fd9\u4e2a\u91cc\u9762 \u8fd4\u56de\u503c 1\uff1a\u6210\u529f 0\uff1a\u6e90IP\u5730\u5740\u6709\u8bef -1\uff1a\u5730\u5740\u65cf\u5305\u542b\u4e0d\u53ef\u7528\u7684\u5730\u5740\u534f\u8bae const char *inet_ntop(int af, const void *src, char *dst, socklen_t size); \u4f7f\u7528 man inet_ntop \u67e5\u770b\u5e2e\u52a9 \u529f\u80fd\uff1a\u5c06\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570\uff0c\u8f6c\u6362\u6210\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5730\u5740\u5b57\u7b26\u4e32 \u53c2\u6570 af \uff1a\u5730\u5740\u65cf IPV4\uff1a AF_INET IPV6\uff1a AF_INET6(IPV6) src \uff1a\u8981\u8f6c\u6362\u7684ip\u7684\u6574\u6570\u7684\u5730\u5740 dst \uff1a\u8f6c\u6362\u6210IP\u5730\u5740\u5b57\u7b26\u4e32\u4fdd\u5b58\u7684\u5730\u65b9 size \uff1a\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u5927\u5c0f\uff08\u6570\u7ec4\u7684\u5927\u5c0f\uff09 \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8f6c\u6362\u540e\u7684\u6570\u636e\u7684\u5730\u5740\uff08\u5b57\u7b26\u4e32\uff09\uff0c\u548c dst \u662f\u4e00\u6837\u7684 ```c #include #include int main() { // \u521b\u5efa\u4e00\u4e2aip\u5b57\u7b26\u4e32,\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5730\u5740\u5b57\u7b26\u4e32 char buf[] = \"192.168.1.4\"; unsigned int num = 0; // \u5c06\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u7f51\u7edc\u5b57\u8282\u5e8f\u7684\u6574\u6570 inet_pton(AF_INET, buf, &num); unsigned char * p = (unsigned char *)&num; printf(\"%d %d %d %d\\n\", *p, *(p+1), *(p+2), *(p+3)); // \u5c06\u7f51\u7edc\u5b57\u8282\u5e8f\u7684IP\u6574\u6570\u8f6c\u6362\u6210\u70b9\u5206\u5341\u8fdb\u5236\u7684IP\u5b57\u7b26\u4e32 char ip[16] = \"\"; const char * str = inet_ntop(AF_INET, &num, ip, 16); printf(\"str : %s\\n\", str); printf(\"ip : %s\\n\", ip); return 0; } ```","title":"IP\u5730\u5740\u8f6c\u6362"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcpudp","text":"","title":"TCP\u4e0eUDP\u533a\u522b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_34","text":"UDP \uff1a\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff0c\u9762\u5411\u65e0\u8fde\u63a5\uff0c\u53ef\u4ee5\u5355\u64ad\uff0c\u591a\u64ad\uff0c\u5e7f\u64ad\uff0c \u9762\u5411\u6570\u636e\u62a5\uff0c\u4e0d\u53ef\u9760 TCP \uff1a\u4f20\u8f93\u63a7\u5236\u534f\u8bae\uff0c\u9762\u5411\u8fde\u63a5\u7684\uff0c\u53ef\u9760\u7684\uff0c\u57fa\u4e8e\u5b57\u8282\u6d41\uff0c\u4ec5\u652f\u6301\u5355\u64ad\u4f20\u8f93","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_35","text":"UDP TCP \u662f\u5426\u521b\u5efa\u8fde\u63a5 \u65e0\u8fde\u63a5 \u9762\u5411\u8fde\u63a5 \u662f\u5426\u53ef\u9760 \u4e0d\u53ef\u9760 \u53ef\u9760\u7684 \u8fde\u63a5\u7684\u5bf9\u8c61\u4e2a\u6570 \u4e00\u5bf9\u4e00\u3001\u4e00\u5bf9\u591a\u3001\u591a\u5bf9\u4e00\u3001\u591a\u5bf9\u591a \u4ec5\u652f\u6301\u4e00\u5bf9\u4e00 \u4f20\u8f93\u7684\u65b9\u5f0f \u9762\u5411\u6570\u636e\u62a5 \u9762\u5411\u5b57\u8282\u6d41 \u9996\u90e8\u5f00\u9500 8\u4e2a\u5b57\u8282 \u6700\u5c1120\u4e2a\u5b57\u8282 \u9002\u7528\u573a\u666f \u5b9e\u65f6\u5e94\u7528\uff08\u89c6\u9891\u4f1a\u8bae\uff0c\u76f4\u64ad\uff09 \u53ef\u9760\u6027\u9ad8\u7684\u5e94\u7528\uff08\u6587\u4ef6\u4f20\u8f93\uff09","title":"\u5bf9\u6bd4"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_1","text":"","title":"TCP\u901a\u4fe1\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_36","text":"","title":"\u6d41\u7a0b\u56fe"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_37","text":"\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57 \u76d1\u542c\uff1a\u76d1\u542c\u6709\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 \u5957\u63a5\u5b57\uff1a\u8fd9\u4e2a\u5957\u63a5\u5b57\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5c06\u8fd9\u4e2a \u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26 \u548c \u672c\u5730\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a \uff08IP\u548c\u7aef\u53e3\u5c31\u662f\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f\uff09 \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u7684\u65f6\u5019\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2aIP\u548c\u7aef\u53e3 \u8bbe\u7f6e\u76d1\u542c\uff0c \u76d1\u542c\u7684fd \u5f00\u59cb\u5de5\u4f5c \u963b\u585e\u7b49\u5f85\uff0c\u5f53\u6709\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\uff0c\u89e3\u9664\u963b\u585e\uff0c\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a \u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5957\u63a5\u5b57(fd) \u901a\u4fe1 \u63a5\u6536\u6570\u636e \u53d1\u9001\u6570\u636e \u901a\u4fe1\u7ed3\u675f\uff0c\u65ad\u5f00\u8fde\u63a5","title":"\u670d\u52a1\u5668\u7aef\uff08\u88ab\u52a8\u63a5\u6536\u8fde\u63a5\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_38","text":"\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57(fd) \u8fde\u63a5\u670d\u52a1\u5668\uff0c\u9700\u8981\u6307\u5b9a\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684 IP \u548c \u7aef\u53e3 \u8fde\u63a5\u6210\u529f\u4e86\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u548c\u670d\u52a1\u5668\u901a\u4fe1 \u63a5\u6536\u6570\u636e \u53d1\u9001\u6570\u636e \u901a\u4fe1\u7ed3\u675f\uff0c\u65ad\u5f00\u8fde\u63a5","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_39","text":"\u5305\u542b\u5728\u4e0b\u5217\u5934\u6587\u4ef6\u4e2d c #include <sys/types.h> #include <sys/socket.h> #include <arpa/inet.h> // \u5305\u542b\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0a\u9762\u4e24\u4e2a\u5c31\u53ef\u4ee5\u7701\u7565(\u56e0\u4e3a\u5df2\u7ecf\u5305\u542b\u4e0a\u9762\u4e24\u4e2a) \u51fd\u6570\u4e00\u89c8 c int socket(int domain, int type, int protocol); int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); int listen(int sockfd, int backlog); int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen); int socket(int domain, int type, int protocol); \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 \u53c2\u6570\uff1a domain \uff1a\u534f\u8bae\u65cf(\u5e38\u7528\u5982\u4e0b) AF_INET \uff1a ipv4 AF_INET 6 \uff1a ipv6 AF_UNIX , AF_LOCAL \uff1a\u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\uff08\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff09 type \uff1a\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\u7c7b\u578b SOCK_STREAM : \u6d41\u5f0f\u534f\u8bae SOCK_DGRAM : \u62a5\u5f0f\u534f\u8bae protocol \uff1a\u5177\u4f53\u7684\u4e00\u4e2a\u534f\u8bae\uff0c\u4e00\u822c\u51990\uff0c\u7528\u4e8e\u6307\u5b9atype\u53c2\u6570\u7684\u9ed8\u8ba4\u534f\u8bae\u7c7b\u578b SOCK_STREAM : \u6d41\u5f0f\u534f\u8bae\u9ed8\u8ba4\u4f7f\u7528 TCP SOCK_DGRAM : \u62a5\u5f0f\u534f\u8bae\u9ed8\u8ba4\u4f7f\u7528 UDP \u8fd4\u56de\u503c \u6210\u529f\uff1a\u8fd4\u56de\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u64cd\u4f5c\u7684\u5c31\u662f\u5185\u6838\u7f13\u51b2\u533a \u5931\u8d25\uff1a-1 int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); \u529f\u80fd\uff1a\u7ed1\u5b9a\uff0c\u5c06fd \u548c\u672c\u5730\u7684IP\u548c\u7aef\u53e3\u8fdb\u884c\u7ed1\u5b9a \u53c2\u6570\uff1a sockfd \uff1a\u901a\u8fc7socket\u51fd\u6570\u5f97\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 addr \uff1a\u9700\u8981\u7ed1\u5b9a\u7684socket\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u5c01\u88c5\u4e86 \u672c\u5730\u7684ip\u548c\u7aef\u53e3\u53f7\u7684\u4fe1\u606f addrlen \uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed3\u6784\u4f53\u5360\u7684\u5185\u5b58\u5927\u5c0f \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff1a0\uff0c\u5931\u8d25\uff1a-1 int listen(int sockfd, int backlog); \u529f\u80fd\uff1a\u76d1\u542c\u8fd9\u4e2asocket\u4e0a\u7684\u8fde\u63a5 \u53c2\u6570\uff1a sockfd \uff1a\u901a\u8fc7socket()\u51fd\u6570\u5f97\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 backlog \uff1a\u672a\u8fde\u63a5\u7684\u548c\u5df2\u7ecf\u8fde\u63a5\u7684\u548c\u7684\u6700\u5927\u503c\uff0c\u53ef\u7528 cat /proc/sys/net/core/somaxconn \u67e5\u770bLinux\u8bbe\u7f6e\u503c\uff0c==\u4e00\u822c\u6307\u5b9a5\u5c31\u53ef\u4ee5\uff08\u89c6\u9891\u8bf4\u7684\uff0c\u662f\u5426\u6b63\u786e\u5f85\u9a8c\u8bc1\uff09== \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff1a0\uff0c\u5931\u8d25\uff1a-1 int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); \u529f\u80fd\uff1a\u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u9ed8\u8ba4\u662f\u4e00\u4e2a\u963b\u585e\u7684\u51fd\u6570\uff0c\u963b\u585e\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 \u53c2\u6570\uff1a sockfd : \u7528\u4e8e\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 addr : \u4f20\u51fa\u53c2\u6570\uff0c\u8bb0\u5f55\u4e86\u8fde\u63a5\u6210\u529f\u540e \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f \uff08ip\uff0cport\uff09 addrlen : \u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u7684\u5185\u5b58\u5927\u5c0f \u8fd4\u56de\u503c\uff1a \u6210\u529f\uff1a\u7528\u4e8e\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5931\u8d25\uff1a-1 int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen); \u529f\u80fd\uff1a \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668 \u53c2\u6570\uff1a sockfd : \u7528\u4e8e \u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 addr : \u5ba2\u6237\u7aef\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f addrlen : \u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u7684\u5185\u5b58\u5927\u5c0f \u8fd4\u56de\u503c\uff1a\u6210\u529f 0\uff0c \u5931\u8d25 -1 \u5176\u4ed6\u8bfb\u5199\u51fd\u6570\uff1a c ssize_t write(int fd, const void *buf, size_t count); // \u5199\u6570\u636e ssize_t read(int fd, void *buf, size_t count); // \u8bfb\u6570\u636e","title":"\u5957\u63a5\u5b57\u51fd\u6570"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_2","text":"","title":"\u5b9e\u4f8b\uff1aTCP\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_40","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // 5. \u5f00\u59cb\u901a\u4fe1 // \u670d\u52a1\u7aef\u5148\u63a5\u6536\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u518d\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e // \u63a5\u6536\u6570\u636e char recv_buf[1024] = {0}; while (1) { ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); break; } // \u53d1\u9001\u6570\u636e char *send_buf = \"hello, i am server\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); } // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 close(connfd); close(listenfd); return 0; }","title":"\u670d\u52a1\u5668\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_41","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); sleep(1); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u670d\u52a1\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"server closed...\\n\"); break; } } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_42","text":"","title":"\u901a\u4fe1\u6548\u679c"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_3","text":"\u6b64\u8282\u9700\u8981\u7ed3\u5408 \u7f51\u7edc\u57fa\u7840->\u534f\u8bae->TCP\u534f\u8bae \u4e00\u8d77\u770b","title":"TCP\u4e09\u6b21\u63e1\u624b\u2014\u2014\u5efa\u7acb\u8fde\u63a5"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_43","text":"","title":"\u7b80\u6613\u56fe\u793a"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_44","text":"","title":"\u63e1\u624b\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_45","text":"\u5ba2\u6237\u7aef\u5c06SYN\u6807\u5fd7\u4f4d\u7f6e\u4e3a1 \u751f\u6210\u4e00\u4e2a\u968f\u673a\u768432\u4f4d\u7684\u5e8f\u53f7seq=J \uff0c \u8fd9\u4e2a\u5e8f\u53f7\u540e\u8fb9\u662f\u53ef\u4ee5\u643a\u5e26\u6570\u636e\uff08\u6570\u636e\u7684\u5927\u5c0f\uff09","title":"\u7b2c\u4e00\u6b21\u63e1\u624b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_46","text":"\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff1a ACK=1 \u670d\u52a1\u5668\u4f1a\u56de\u53d1\u4e00\u4e2a\u786e\u8ba4\u5e8f\u53f7\uff1a ack=\u5ba2\u6237\u7aef\u7684\u5e8f\u53f7 + \u6570\u636e\u957f\u5ea6 + SYN/FIN(\u6309\u4e00\u4e2a\u5b57\u8282\u7b97) \u670d\u52a1\u5668\u7aef\u4f1a\u5411\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff1a SYN=1 \u670d\u52a1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5e8f\u53f7\uff1aseq = K","title":"\u7b2c\u4e8c\u6b21\u63e1\u624b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_47","text":"\u5ba2\u6237\u7aef\u5e94\u7b54\u670d\u52a1\u5668\u7684\u8fde\u63a5\u8bf7\u6c42\uff1aACK=1 \u5ba2\u6237\u7aef\u56de\u590d\u6536\u5230\u4e86\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff1aack=\u670d\u52a1\u7aef\u7684\u5e8f\u53f7 + \u6570\u636e\u957f\u5ea6 + SYN/FIN(\u6309\u4e00\u4e2a\u5b57\u8282\u7b97)","title":"\u7b2c\u4e09\u6b21\u63e1\u624b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_48","text":"\u62ec\u53f7\u5185\u6570\u5b57\u4ee3\u8868\u643a\u5e26\u6570\u636e\u5927\u5c0f","title":"\u793a\u4f8b\uff1a\u643a\u5e26\u6570\u636e\u901a\u4fe1\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_4","text":"","title":"TCP\u6ed1\u52a8\u7a97\u53e3\u2014\u2014\u6d41\u91cf\u63a7\u5236"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_49","text":"\u6ed1\u52a8\u7a97\u53e3 \u662f TCP \u4e2d\u5b9e\u73b0\u8bf8\u5982 ACK \u786e\u8ba4\u3001\u6d41\u91cf\u63a7\u5236\u3001\u62e5\u585e\u63a7\u5236\u7684\u627f\u8f7d\u7ed3\u6784 TCP \u4e2d\u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u6765\u8fdb\u884c\u4f20\u8f93\u63a7\u5236\uff0c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u610f\u5473\u7740 \u63a5\u6536\u65b9\u8fd8\u6709\u591a\u5927\u7684\u7f13\u51b2\u533a\u53ef\u4ee5\u7528\u4e8e\u63a5\u6536\u6570\u636e \u3002 \u53d1\u9001\u65b9\u53ef\u4ee5\u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u5e94\u8be5\u53d1\u9001\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e \u3002\u5f53\u6ed1\u52a8\u7a97\u53e3\u4e3a 0\u65f6\uff0c\u53d1\u9001\u65b9\u4e00\u822c\u4e0d\u80fd\u518d\u53d1\u9001\u6570\u636e\u62a5 \u6ed1\u52a8\u7a97\u53e3\uff08Sliding window\uff09\u662f\u4e00\u79cd\u6d41\u91cf\u63a7\u5236\u6280\u672f\u3002\u65e9\u671f\u7684\u7f51\u7edc\u901a\u4fe1\u4e2d\uff0c\u901a\u4fe1\u53cc\u65b9\u4e0d\u4f1a\u8003\u8651\u7f51\u7edc\u7684\u62e5\u6324\u60c5\u51b5\u76f4\u63a5\u53d1\u9001\u6570\u636e\u3002\u7531\u4e8e\u5927\u5bb6\u4e0d\u77e5\u9053\u7f51\u7edc\u62e5\u585e\u72b6\u51b5\uff0c\u540c\u65f6\u53d1\u9001\u6570\u636e\uff0c\u5bfc\u81f4\u4e2d\u95f4\u8282\u70b9\u963b\u585e\u6389\u5305\uff0c\u8c01\u4e5f\u53d1\u4e0d\u4e86\u6570\u636e\uff0c\u6240\u4ee5\u5c31\u6709\u4e86\u6ed1\u52a8\u7a97\u53e3\u673a\u5236\u6765\u89e3\u51b3\u6b64\u95ee\u9898 \u6ed1\u52a8\u7a97\u53e3\u534f\u8bae\u662f\u7528\u6765\u6539\u5584\u541e\u5410\u91cf\u7684\u4e00\u79cd\u6280\u672f\uff0c\u5373\u5bb9\u8bb8\u53d1\u9001\u65b9\u5728\u63a5\u6536\u4efb\u4f55\u5e94\u7b54\u4e4b\u524d\u4f20\u9001\u9644\u52a0\u7684\u5305\u3002\u63a5\u6536\u65b9\u544a\u8bc9\u53d1\u9001\u65b9\u5728\u67d0\u4e00\u65f6\u523b\u80fd\u9001\u591a\u5c11\u5305\uff08\u79f0\u7a97\u53e3\u5c3a\u5bf8\uff09","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_50","text":"\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u7406\u89e3\u4e3a\u7f13\u51b2\u533a\u7684\u5927\u5c0f \u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u4f1a\u968f\u7740\u53d1\u9001\u6570\u636e\u548c\u63a5\u6536\u6570\u636e\u800c\u53d8\u5316\uff0c\u901a\u4fe1\u7684\u53cc\u65b9\u90fd\u6709\u53d1\u9001\u7f13\u51b2\u533a\u548c\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a \u56fe\u793a\u8bf4\u660e\uff1a\u5355\u5411\u53d1\u9001\u6570\u636e\uff08\u53d1\u9001\u7aef->\u63a5\u6536\u7aef\uff09 \u53d1\u9001\u65b9\u7684\u7f13\u51b2\u533a \u767d\u8272\u683c\u5b50\uff1a\u7a7a\u95f2\u7684\u7a7a\u95f4 \u7070\u8272\u683c\u5b50\uff1a\u6570\u636e\u5df2\u7ecf\u88ab\u53d1\u9001\u51fa\u53bb\u4e86\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u88ab\u63a5\u6536 \u7d2b\u8272\u683c\u5b50\uff1a\u8fd8\u6ca1\u6709\u53d1\u9001\u51fa\u53bb\u7684\u6570\u636e \u63a5\u6536\u65b9\u7684\u7f13\u51b2\u533a \u767d\u8272\u683c\u5b50\uff1a\u7a7a\u95f2\u7684\u7a7a\u95f4 \u7d2b\u8272\u683c\u5b50\uff1a\u5df2\u7ecf\u63a5\u6536\u5230\u7684\u6570\u636e","title":"\u6ed1\u52a8\u7a97\u53e3\u4e0e\u7f13\u51b2\u533a"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_5","text":"","title":"TCP\u56db\u6b21\u6325\u624b\u2014\u2014\u65ad\u5f00\u8fde\u63a5"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_51","text":"","title":"\u7b80\u6613\u56fe\u793a"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_52","text":"\u56db\u6b21\u6325\u624b\u53d1\u751f\u5728\u65ad\u5f00\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u5728\u7a0b\u5e8f\u4e2d\u5f53\u8c03\u7528\u4e86 close() \u4f1a\u4f7f\u7528TCP\u534f\u8bae\u8fdb\u884c\u56db\u6b21\u6325\u624b \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u90fd\u53ef\u4ee5\u4e3b\u52a8\u53d1\u8d77\u65ad\u5f00\u8fde\u63a5\uff0c\u8c01\u5148\u8c03\u7528 close() \u8c01\u5c31\u662f\u53d1\u8d77\u65b9 \u56e0\u4e3a\u5728TCP\u8fde\u63a5\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u7684\u7684\u8fde\u63a5\u662f\u53cc\u5411\u7684\uff0c\u5728\u65ad\u5f00\u7684\u65f6\u5019\u9700\u8981\u53cc\u5411\u65ad\u5f00","title":"\u6325\u624b\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_6","text":"","title":"\u5b9e\u4f8b\uff1a\u5b8c\u6574\u7684TCP\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_53","text":"\u56fe\u4e2d MSS \u8868\u793aMaximum Segment Size(\u4e00\u6761\u6570\u636e\u7684\u6700\u5927\u7684\u6570\u636e\u91cf) win \u8868\u793a\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f \u56fe\u4e2d\u90e8\u5206 ACK \u5e94\u4e3a\u786e\u8ba4\u53f7 ack \uff0c\u800c\u975e\u6807\u5fd7\u4f4d ACK","title":"\u6ce8\u89e3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_54","text":"\u7b2c1\u6b21\uff0c \u7b2c\u4e00\u6b21\u63e1\u624b \uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5\uff0c\u5ba2\u6237\u7aef\u7684\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u662f4096\uff0c\u4e00\u6b21\u53d1\u9001\u7684\u6700\u5927\u6570\u636e\u91cf\u662f1460 \u7b2c2\u6b21\uff0c \u7b2c\u4e8c\u6b21\u63e1\u624b \uff0c\u670d\u52a1\u5668\u63a5\u6536\u8fde\u63a5\u60c5\u51b5\uff0c\u544a\u8bc9\u5ba2\u6237\u7aef\u670d\u52a1\u5668\u7684\u7a97\u53e3\u5927\u5c0f\u662f6144\uff0c\u4e00\u6b21\u53d1\u9001\u7684\u6700\u5927\u6570\u636e\u91cf\u662f1024 \u7b2c3\u6b21\uff0c \u7b2c\u4e09\u6b21\u63e1\u624b \u7b2c4-9\u6b21\uff0c\u5ba2\u6237\u7aef\u8fde\u7eed\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e866k\u7684\u6570\u636e\uff0c\u6bcf\u6b21\u53d1\u90011k \u7b2c10\u6b21\uff0c\u670d\u52a1\u5668\u544a\u8bc9\u5ba2\u6237\u7aef\uff1a\u53d1\u9001\u76846k\u6570\u636e\u4ee5\u53ca\u63a5\u6536\u5230\uff0c\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u7f13\u51b2\u533a\u6570\u636e\u5df2\u7ecf\u5904\u7406\u4e862k\uff0c\u7a97\u53e3\u5927\u5c0f\u662f2k(\u8fd8\u52694k\u672a\u5904\u7406\uff0c\u540e\u9762\u540c\u7406\uff0c\u4e0d\u518d\u505a\u5355\u72ec\u8bf4\u660e) \u7b2c11\u6b21\uff0c\u670d\u52a1\u5668\u544a\u8bc9\u5ba2\u6237\u7aef\uff1a\u53d1\u9001\u76846k\u6570\u636e\u4ee5\u53ca\u63a5\u6536\u5230\uff0c\u5b58\u50a8\u5728\u7f13\u51b2\u533a\u4e2d\uff0c\u7f13\u51b2\u533a\u6570\u636e\u5df2\u7ecf\u5904\u7406\u4e864k\uff0c\u7a97\u53e3\u5927\u5c0f\u662f4k \u7b2c12\u6b21\uff0c\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e861k\u7684\u6570\u636e \u7b2c13\u6b21\uff0c \u7b2c\u4e00\u6b21\u6325\u624b \uff0c\u5ba2\u6237\u7aef\u4e3b\u52a8\u8bf7\u6c42\u548c\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\uff0c\u5e76\u4e14\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e861k\u7684\u6570\u636e \u7b2c14-16\u6b21\uff0c \u7b2c\u4e8c\u6b21\u6325\u624b \uff0c\u670d\u52a1\u5668\u56de\u590dACK 8194(\u5305\u542bFIN\u6807\u8bb0\uff0c\u6240\u4ee5\u7ed3\u679c\u4e0a\u591a\u52a0\u4e861)\uff0c\u8868\u793a \u540c\u610f\u65ad\u5f00\u8fde\u63a5\u7684\u8bf7\u6c42 \uff0c\u5e76\u901a\u77e5\u5ba2\u6237\u7aef\u4f9d\u6b21\u5df2\u7ecf\u5904\u7406\u4e862k\uff0c4k\uff0c6k\u6570\u636e\uff0c\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u4f9d\u6b21\u4e3a2k\uff0c4k\uff0c6k \u7b2c17\u6b21\uff0c \u7b2c\u4e09\u6b21\u6325\u624b \uff0c\u670d\u52a1\u5668\u7aef\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001FIN\uff0c\u8bf7\u6c42\u65ad\u5f00\u8fde\u63a5 \u7b2c18\u6b21\uff0c \u7b2c\u56db\u6b21\u56de\u6536 \uff0c\u5ba2\u6237\u7aef\u540c\u610f\u4e86\u670d\u52a1\u5668\u7aef\u7684\u65ad\u5f00\u8bf7\u6c42","title":"\u6d41\u7a0b\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_7","text":"","title":"TCP\u901a\u4fe1\u5e76\u53d1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_55","text":"\u8981\u5b9e\u73b0TCP\u901a\u4fe1\u670d\u52a1\u5668\u5904\u7406\u5e76\u53d1\u7684\u4efb\u52a1\uff0c\u4f7f\u7528\u591a\u8fdb\u7a0b\u6216\u8005\u591a\u7ebf\u7a0b\u6765\u89e3\u51b3","title":"\u6ce8\u89e3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_8","text":"","title":"\u5b9e\u4f8b\uff1a\u591a\u8fdb\u7a0b\u5b9e\u73b0TCP\u5e76\u53d1\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_56","text":"\u670d\u52a1\u7aef\u4f7f\u7528\u4e00\u4e2a\u7236\u8fdb\u7a0b\uff0c\u591a\u4e2a\u5b50\u8fdb\u7a0b \u7236\u8fdb\u7a0b\u8d1f\u8d23\u7b49\u5f85\u5e76\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 \u5b50\u8fdb\u7a0b\uff1a\u5b8c\u6210\u901a\u4fe1\uff0c\u63a5\u53d7\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7528\u4e8e\u901a\u4fe1 \u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u6539\u53d8\uff08\u540c\u4e00\u5bf9\u4e00\u901a\u4fe1\uff09","title":"\u601d\u8def"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_57","text":"\u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u5982\u4f55\u5904\u7406\u5b50\u8fdb\u7a0b\uff0c\u56de\u6536\u8d44\u6e90\uff1f \u4f7f\u7528\u4fe1\u53f7\u5904\u7406 \u4f7f\u7528\u4fe1\u53f7\u6355\u6349\u56de\u6536\u5b50\u8fdb\u7a0b\u8d44\u6e90\u540e\uff0c\u51fa\u73b0\u670d\u52a1\u7aef accept: Interrupted system call \uff0c\u4e14\u4e0d\u80fd\u6709\u65b0\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u4ea7\u751f EINTR \u4fe1\u53f7\uff0c\u5177\u4f53\u8bf4\u660e\u901a\u8fc7 man 2 accept \u67e5\u770b \u5728 accept \u8fd4\u56de\u503c\u5904\u8fdb\u884c\u5224\u65ad\u5904\u7406\uff0c\u4e0d\u8f93\u51fa\u9519\u8bef\u5373\u53ef \u5f53\u505c\u6b62\u6240\u6709\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u540e\uff0c\u51fa\u73b0 read: Connection reset by peer \uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u4ea7\u751f\u7684\u539f\u56e0\uff1a\u8fde\u63a5\u65ad\u5f00\u540e\u7684\u8bfb\u548c\u5199\u64cd\u4f5c\u5f15\u8d77\u7684 \u7b80\u5355\u4fee\u6539\uff1a\u5c06\u5ba2\u6237\u7aef\u4e2d\u4f11\u7720\u8bed\u53e5\u7684\u4f4d\u7f6e\u8fdb\u884c\u66f4\u6539 \u65b9\u6cd5\uff1a [261]Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0\u53ca\u89e3\u51b3\u529e\u6cd5 \u89e3\u51b3\u4e0a\u4e00\u4e2a\u95ee\u9898\u540e\uff0c\u670d\u52a1\u7aef\u51fa\u73b0\u4e24\u6b21 client closed... \uff0c\u5982\u4f55\u89e3\u51b3\uff1f \u662f\u56e0\u4e3a\u5728\u5173\u95ed\u8fde\u63a5\u540e\uff0c\u5e94\u8be5\u9000\u51fa\u5faa\u73af\uff0c\u6240\u4ee5\u5728\u8be5 printf \u8bed\u53e5\u540e\uff0c\u6dfb\u52a0 break \u5373\u53ef","title":"\u9047\u5230\u95ee\u9898\u53ca\u89e3\u51b3*"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_58","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <signal.h> #include <sys/wait.h> #include <errno.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 void recycleChild(int arg) { // \u5199while\u662f\u4e3a\u4e86\u5904\u7406\u591a\u4e2a\u4fe1\u53f7 while (1) { int ret = waitpid(-1, NULL, WNOHANG); if (ret == -1) { // \u6240\u6709\u5b50\u8fdb\u7a0b\u90fd\u56de\u6536\u4e86 break; } else if (ret == 0) { // \u8fd8\u6709\u5b50\u8fdb\u7a0b\u6d3b\u7740 break; } else { // \u56de\u6536\u5b50\u8fdb\u7a0b printf(\"\u5b50\u8fdb\u7a0b %d \u88ab\u56de\u6536\u4e86\\n\", ret); } } } int main() { // \u6ce8\u518c\u4fe1\u53f7\u6355\u6349 struct sigaction act; act.sa_flags = 0; sigemptyset(&act.sa_mask); act.sa_handler = recycleChild; sigaction(SIGCHLD, &act, NULL); // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { // \u7528\u4e8e\u5904\u7406\u4fe1\u53f7\u6355\u6349\u5bfc\u81f4\u7684accept: Interrupted system call if (errno == EINTR) { continue; } perror(\"accept\"); exit(-1); } pid_t pid = fork(); if (pid == 0) { // \u5b50\u8fdb\u7a0b // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // 5. \u5f00\u59cb\u901a\u4fe1 // \u670d\u52a1\u7aef\u5148\u63a5\u6536\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u518d\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e // \u63a5\u6536\u6570\u636e char recv_buf[1024] = {0}; while (1) { ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); // \u9000\u51fa\u5faa\u73af\uff0c\u7528\u6765\u89e3\u51b3\u51fa\u73b0\u4e24\u6b21client closed... break; } // \u53d1\u9001\u6570\u636e char *send_buf = \"hello, i am server\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); } // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 close(connfd); } } close(listenfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_59","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u6b64\u5904\u4f7f\u7528sleep\u8bed\u53e5\u4f1a\u5bfc\u81f4read: Connection reset by peer // sleep(1); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_60","text":"","title":"\u901a\u4fe1\u6548\u679c"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_9","text":"","title":"\u5b9e\u4f8b\uff1a\u591a\u7ebf\u7a0b\u5b9e\u73b0TCP\u5e76\u53d1\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_61","text":"\u670d\u52a1\u7aef\u4f7f\u7528\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u591a\u4e2a\u5b50\u7ebf\u7a0b \u4e3b\u7ebf\u7a0b\u8d1f\u8d23\u7b49\u5f85\u5e76\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 \u5b50\u7ebf\u7a0b\uff1a\u5b8c\u6210\u901a\u4fe1\uff0c\u63a5\u53d7\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7528\u4e8e\u901a\u4fe1 \u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u6539\u53d8\uff08\u540c\u4e00\u5bf9\u4e00\u901a\u4fe1\uff09","title":"\u601d\u8def"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_62","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <pthread.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 struct sockInfo{ int fd; // \u901a\u4fe1\u6587\u4ef6\u63cf\u8ff0\u7b26 pthread_t tid; // \u7ebf\u7a0b\u53f7 struct sockaddr_in addr; // \u5ba2\u6237\u7aef\u4fe1\u606f }; struct sockInfo sockinfos[128]; // \u8868\u793a\u6700\u5927\u6709128\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5 void* working(void *arg) { // \u5b50\u7ebf\u7a0b\u4e0e\u5ba2\u6237\u7aef\u901a\u4fe1 struct sockInfo *pinfo = (struct sockInfo*)arg; // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &pinfo->addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(pinfo->addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // 5. \u5f00\u59cb\u901a\u4fe1 // \u670d\u52a1\u7aef\u5148\u63a5\u6536\u5ba2\u6237\u7aef\u4fe1\u606f\uff0c\u518d\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e // \u63a5\u6536\u6570\u636e char recv_buf[1024] = {0}; while (1) { int ret = read(pinfo->fd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv client data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); break; } // \u53d1\u9001\u6570\u636e char *send_buf = \"hello, i am server\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(pinfo->fd, send_buf, strlen(send_buf)); } // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 close(pinfo->fd); } int main() { // \u521d\u59cb\u5316\u7ebf\u7a0b\u7ed3\u6784\u4f53\u6570\u636e int sockinfo_maxLen = sizeof(sockinfos) / sizeof(sockinfos[0]); for (int i = 0; i < sockinfo_maxLen; i++) { bzero(&sockinfos[i], sizeof(sockinfos[i])); sockinfos[i].fd = -1; sockinfos[i].tid = -1; } // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u521b\u5efa\u5b50\u7ebf\u7a0b struct sockInfo *pinfo; // \u4ece\u7ebf\u7a0b\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u4e2a\u53ef\u7528\u7684\u5143\u7d20\u8fdb\u884c\u8d4b\u503c for (int i = 0; i < sockinfo_maxLen; i++) { if (sockinfos[i].tid == -1) { pinfo = &sockinfos[i]; break; } // \u5f53\u904d\u5386\u5230\u6700\u540e\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u90a3\u4e48\u4f11\u7720\u4e00\u79d2\u540e\uff0c\u4ece\u5934\u5f00\u59cb\u627e if (i == sockinfo_maxLen - 1) { sleep(1); i = -1; } } // \u7ed3\u6784\u4f53\u8d4b\u503c pinfo->fd = connfd; memcpy(&pinfo->addr, &client_addr, client_addr_len); pthread_create(&pinfo->tid, NULL, working, pinfo); // \u91ca\u653e\u8d44\u6e90 pthread_detach(pinfo->tid); } close(listenfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_63","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; // \u7c97\u5fc3\u5199\u6210sizeof\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u9047\u5230\u7a7a\u683c\u7ec8\u6b62 write(connfd, send_buf, strlen(send_buf)); // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u6b64\u5904\u4f7f\u7528sleep\u8bed\u53e5\u4f1a\u5bfc\u81f4read: Connection reset by peer // sleep(1); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_64","text":"","title":"\u901a\u4fe1\u6548\u679c"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#tcp_10","text":"","title":"TCP\u72b6\u6001\u8f6c\u6362"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#1","text":"","title":"\u901a\u4fe1\u8fc7\u7a0b\u72b6\u6001\u8f6c\u6362\u56fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#2","text":"\u7ea2\u8272\u5b9e\u7ebf\u4ee3\u8868\u5ba2\u6237\u7aef\uff08\u4e3b\u52a8\u53d1\u8d77\u8fde\u63a5\uff09 \u7eff\u8272\u865a\u7ebf\u4ee3\u8868\u670d\u52a1\u7aef\uff08\u88ab\u52a8\u63a5\u6536\u8fde\u63a5\uff09 \u9ed1\u8272\u5b9e\u73b0\u4ee3\u8868\u7279\u6b8a\u60c5\u51b5 \u6570\u5b57\u4ee3\u8868\u4e09\u6b21\u63e1\u624b\u6d41\u7a0b","title":"\u901a\u4fe1\u8fc7\u7a0b\u72b6\u6001\u8f6c\u6362\u56fe2"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#msl","text":"\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u7684\u4e00\u65b9\uff0c\u6700\u540e\u4f1a\u8fdb\u5165\u4e00\u4e2a TIME_WAIT \u72b6\u6001\uff0c\u8fd9\u4e2a\u72b6\u6001\u4f1a\u6301\u7eed 2msl msl \uff1a\u5b98\u65b9\u5efa\u8bae2\u5206\u949f\uff0c\u5b9e\u9645\u662f30s\uff0c \u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6325\u624b\u4fe1\u606f\u4e22\u5931 \u5f53 TCP \u8fde\u63a5\u4e3b\u52a8\u5173\u95ed\u65b9\u63a5\u6536\u5230\u88ab\u52a8\u5173\u95ed\u65b9\u53d1\u9001\u7684 FIN \u548c\u6700\u7ec8\u7684 ACK \u540e\uff0c\u8fde\u63a5\u7684\u4e3b\u52a8\u5173\u95ed\u65b9\u5fc5\u987b\u5904\u4e8eTIME_WAIT \u72b6\u6001\u5e76\u6301\u7eed 2MSL \u65f6\u95f4 \u8fd9\u6837\u5c31\u80fd\u591f\u8ba9 TCP \u8fde\u63a5\u7684\u4e3b\u52a8\u5173\u95ed\u65b9\u5728\u5b83\u53d1\u9001\u7684 ACK \u4e22\u5931\u7684\u60c5\u51b5\u4e0b\u91cd\u65b0\u53d1\u9001\u6700\u7ec8\u7684 ACK \u4e3b\u52a8\u5173\u95ed\u65b9\u91cd\u65b0\u53d1\u9001\u7684\u6700\u7ec8 ACK \u5e76\u4e0d\u662f\u56e0\u4e3a\u88ab\u52a8\u5173\u95ed\u65b9\u91cd\u4f20\u4e86 ACK\uff08\u5b83\u4eec\u5e76\u4e0d\u6d88\u8017\u5e8f\u5217\u53f7\uff0c\u88ab\u52a8\u5173\u95ed\u65b9\u4e5f\u4e0d\u4f1a\u91cd\u4f20\uff09\uff0c\u800c\u662f\u56e0\u4e3a\u88ab\u52a8\u5173\u95ed\u65b9\u91cd\u4f20\u4e86\u5b83\u7684 FIN\u3002\u4e8b\u5b9e\u4e0a\uff0c\u88ab\u52a8\u5173\u95ed\u65b9\u603b\u662f\u91cd\u4f20 FIN \u76f4\u5230\u5b83\u6536\u5230\u4e00\u4e2a\u6700\u7ec8\u7684 ACK \u534a\u5173\u95ed \uff1a\u5f53 TCP \u8fde\u63a5\u4e2d A \u5411 B \u53d1\u9001 FIN \u8bf7\u6c42\u5173\u95ed\uff0c\u53e6\u4e00\u7aef B \u56de\u5e94 ACK \u4e4b\u540e\uff08A \u7aef\u8fdb\u5165 FIN_WAIT_2\u72b6\u6001\uff09\uff0c\u5e76\u6ca1\u6709\u7acb\u5373\u53d1\u9001 FIN \u7ed9 A\uff0cA \u65b9\u5904\u4e8e\u534a\u8fde\u63a5\u72b6\u6001\uff08\u534a\u5f00\u5173\uff09\uff0c\u6b64\u65f6 A \u53ef\u4ee5\u63a5\u6536 B \u53d1\u9001\u7684\u6570\u636e\uff0c\u4f46\u662f A \u5df2\u7ecf\u4e0d\u80fd\u518d\u5411 B \u53d1\u9001\u6570\u636e API \u6765\u63a7\u5236\u5b9e\u73b0\u534a\u8fde\u63a5\u72b6\u6001\u7684\u65b9\u6cd5\uff1a shutdown\u51fd\u6570 int shutdown(int sockfd, int how); \u529f\u80fd\uff1a\u5b9e\u73b0\u534a\u8fde\u63a5\u72b6\u6001 \u53c2\u6570 sockfd \uff1a\u9700\u8981\u5173\u95ed\u7684socket\u7684\u63cf\u8ff0\u7b26 how \uff1a\u5141\u8bb8\u4e3ashutdown\u64cd\u4f5c\u9009\u62e9\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f SHUT_RD(0) \uff1a\u5173\u95edsockfd\u4e0a\u7684\u8bfb\u529f\u80fd\uff0c\u6b64\u9009\u9879\u5c06\u4e0d\u5141\u8bb8sockfd\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u8be5\u5957\u63a5\u5b57\u4e0d\u518d\u63a5\u6536\u6570\u636e\uff0c\u4efb\u4f55\u5f53\u524d\u5728\u5957\u63a5\u5b57\u63a5\u53d7\u7f13\u51b2\u533a\u7684\u6570\u636e\u5c06\u88ab\u65e0\u58f0\u7684\u4e22\u5f03\u6389 SHUT_WR(1) \uff1a\u5173\u95edsockfd\u7684\u5199\u529f\u80fd\uff0c\u6b64\u9009\u9879\u5c06\u4e0d\u5141\u8bb8sockfd\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u8fdb\u7a0b\u4e0d\u80fd\u5728\u5bf9\u6b64\u5957\u63a5\u5b57\u53d1 \u51fa\u5199\u64cd\u4f5c SHUT_RDWR(2) \uff1a\u5173\u95edsockfd\u7684\u8bfb\u5199\u529f\u80fd\u3002\u76f8\u5f53\u4e8e\u8c03\u7528shutdown\u4e24\u6b21\uff1a\u9996\u5148\u8c03\u7528 SHUT_RD ,\u7136\u540e\u8c03\u7528 SHUT_WR","title":"MSL\u4e0e\u534a\u5173\u95ed"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#shutdownclose","text":"\u4f7f\u7528 close \u4e2d\u6b62\u4e00\u4e2a\u8fde\u63a5\uff0c\u4f46\u5b83\u53ea\u662f \u51cf\u5c11\u63cf\u8ff0\u7b26\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u5e76\u4e0d\u76f4\u63a5\u5173\u95ed\u8fde\u63a5 \uff0c\u53ea\u6709\u5f53\u63cf\u8ff0\u7b26\u7684\u5f15\u7528\u8ba1\u6570\u4e3a 0 \u65f6\u624d\u5173\u95ed\u8fde\u63a5 shutdown \u4e0d\u8003\u8651\u63cf\u8ff0\u7b26\u7684\u5f15\u7528\u8ba1\u6570\uff0c \u76f4\u63a5\u5173\u95ed\u63cf\u8ff0\u7b26 \u3002\u4e5f\u53ef\u9009\u62e9\u4e2d\u6b62\u4e00\u4e2a\u65b9\u5411\u7684\u8fde\u63a5\uff0c\u53ea\u4e2d\u6b62\u8bfb\u6216\u53ea\u4e2d\u6b62\u5199 \u5982\u679c\u6709\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4e2a\u5957\u63a5\u5b57\uff0cclose \u6bcf\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u8ba1\u6570\u51cf 1 \uff0c\u76f4\u5230\u8ba1\u6570\u4e3a 0 \u65f6\uff0c\u4e5f\u5c31\u662f\u6240\u7528\u8fdb\u7a0b\u90fd\u8c03\u7528\u4e86 close\uff0c\u5957\u63a5\u5b57\u5c06\u88ab\u91ca\u653e \u5728\u591a\u8fdb\u7a0b\u4e2d\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528\u4e86 shutdown(sfd, SHUT_RDWR) \u540e\uff0c\u5176\u5b83\u7684\u8fdb\u7a0b\u5c06\u65e0\u6cd5\u8fdb\u884c\u901a\u4fe1 \u3002\u4f46\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b close(sfd) \u5c06\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u5b83\u8fdb\u7a0b=>==\u96be\u602a800\u90a3\u4e2a\u9879\u76ee\u8c03shutdown\u4e4b\u540e\u5176\u4ed6\u7ebf\u7a0b\u5c31\u4e0d\u80fd\u7528\u4e86==","title":"shutdown\u4e0eclose"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_65","text":"","title":"\u7aef\u53e3\u590d\u7528"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_66","text":"\u9632\u6b62\u670d\u52a1\u5668\u91cd\u542f\u65f6\u4e4b\u524d\u7ed1\u5b9a\u7684\u7aef\u53e3\u8fd8\u672a\u91ca\u653e \u7a0b\u5e8f\u7a81\u7136\u9000\u51fa\u800c\u7cfb\u7edf\u6ca1\u6709\u91ca\u653e\u7aef\u53e3","title":"\u7528\u9014"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#setsockopt","text":"int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); \u529f\u80fd\uff1a\u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u5c5e\u6027\uff08\u4e0d\u4ec5\u4ec5\u80fd\u8bbe\u7f6e\u7aef\u53e3\u590d\u7528\uff09\uff0c\u4ee5\u4e0b\u8bf4\u660e\u4ec5\u9488\u5bf9\u7aef\u53e3\u590d\u7528\uff0c\u5176\u4ed6\u8be6\u7ec6\u5185\u5bb9\u53ef\u67e5\u770b slide/04Linux\u7f51\u7edc\u7f16\u7a0b/02 socket\u901a\u4fe1/UNP\uff08Unix\u7f51\u7edc\u7f16\u7a0b\uff09.pdf \u7b2c\u4e03\u7ae0\u76f8\u5173\u5185\u5bb9 \u53c2\u6570 sockfd \uff1a\u8981\u64cd\u4f5c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 level \uff1a\u7ea7\u522b\uff0c SOL_SOCKET (\u7aef\u53e3\u590d\u7528\u7684\u7ea7\u522b) optname \uff1a\u9009\u9879\u7684\u540d\u79f0\uff0c\u4f7f\u7528 SO_REUSEADDR \u6216 SO_REUSEPORT optval \uff1a\u7aef\u53e3\u590d\u7528\u7684\u503c\uff08\u6574\u5f62\uff09 \uff0c1\u8868\u793a\u53ef\u590d\u7528\uff0c0\u8868\u793a\u4e0d\u53ef\u590d\u7528 optlen \uff1aoptval\u53c2\u6570\u7684\u5927\u5c0f","title":"\u65b9\u6cd5\u2014\u2014setsockopt"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_67","text":"\u7aef\u53e3\u590d\u7528\u7684\u8bbe\u7f6e\u65f6\u673a\u662f \u5728\u670d\u52a1\u5668\u7ed1\u5b9a\u7aef\u53e3\u4e4b\u524d \u5982\u679c\u4e0d\u8bbe\u7f6e\u7aef\u53e3\u590d\u7528\uff0c\u90a3\u4e48\u5728\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u540e\uff0c\u518d\u6b21\u542f\u52a8\u670d\u52a1\u4f1a\u51fa\u73b0 Bind error:Address already in use","title":"\u6ce8\u610f"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#netstat","text":"\u683c\u5f0f\uff1a netstat -\u53c2\u6570\u540d \u5e38\u7528\u53c2\u6570 a \uff1a\u6240\u6709\u7684socket p \uff1a\u663e\u793a\u6b63\u5728\u4f7f\u7528socket\u7684\u7a0b\u5e8f\u7684\u540d\u79f0 n \uff1a\u76f4\u63a5\u4f7f\u7528IP\u5730\u5740\uff0c\u800c\u4e0d\u901a\u8fc7\u57df\u540d\u670d\u52a1\u5668","title":"\u67e5\u770b\u770b\u7f51\u7edc\u76f8\u5173\u4fe1\u606f\u547d\u4ee4\u2014\u2014netstat"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ioio","text":"","title":"IO\u591a\u8def\u590d\u7528(IO\u591a\u8def\u8f6c\u63a5)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_68","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/03 IO\u591a\u8def\u590d\u7528","title":"\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#bio","text":"","title":"\u963b\u585e\u7b49\u5f85(BIO\u6a21\u578b)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_69","text":"\u9047\u5230 read / recv / accept \u65f6\uff0c\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u63a5\u6709\u6570\u636e\u6216\u8005\u8fde\u63a5\u65f6\u624d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_70","text":"\u597d\u5904\uff1a\u4e0d\u5360\u7528CPU\u5b9d\u8d35\u7684\u65f6\u95f4\u7247 \u7f3a\u70b9\uff1a\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u5904\u7406\u4e00\u4e2a\u64cd\u4f5c, \u6548\u7387\u4f4e \u514b\u670d\u7f3a\u70b9\uff1a\u591a\u7ebf\u7a0b\u6216\u8005\u591a\u8fdb\u7a0b\u89e3\u51b3\uff0c\u4e00\u4e2a\u7ebf\u7a0b/\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1","title":"\u5355\u4efb\u52a1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_71","text":"\u4f18\u70b9\uff1a\u80fd\u591f\u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1\uff0c\u4e00\u4e2a\u7ebf\u7a0b/\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u4efb\u52a1 \u7f3a\u70b9\uff1a \u7ebf\u7a0b\u6216\u8005\u8fdb\u7a0b\u4f1a\u6d88\u8017\u8d44\u6e90 \u7ebf\u7a0b\u6216\u8fdb\u7a0b\u8c03\u5ea6\u6d88\u8017CPU\u8d44\u6e90 \u6839\u672c\u95ee\u9898\uff1a\u963b\u585e( blocking )","title":"\u591a\u4efb\u52a1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#nio","text":"\u4f18\u70b9\uff1a\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387 \u7f3a\u70b9\uff1a\u9700\u8981\u5360\u7528\u66f4\u591a\u7684CPU\u548c\u7cfb\u7edf\u8d44\u6e90\uff0c\u6bcf\u5faa\u73af\u90fd\u9700\u8981 O(n) \u7cfb\u7edf\u8c03\u7528\uff08\u7528\u6765\u67e5\u627e\u54ea\u4e2a\u4efb\u52a1\u53ef\u6267\u884c\uff09 \u514b\u670d\u7f3a\u70b9\uff1a\u4f7f\u7528IO\u591a\u8def\u8f6c\u63a5\u6280\u672fselect/poll/epoll","title":"\u975e\u963b\u585e\uff0c\u5fd9\u8f6e\u8be2(NIO\u6a21\u578b)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#io","text":"","title":"IO\u591a\u8def\u8f6c\u63a5\u6280\u672f(\u7b80\u4ecb)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#selectpoll","text":"\u59d4\u6258\u5185\u6838\u8fdb\u884c\u64cd\u4f5c \u53ea\u4f1a\u901a\u77e5\u6709\u51e0\u4e2a\u4efb\u52a1\u53ef\u7528\uff0c\u4f46\u4e0d\u77e5\u9053\u5177\u4f53\u54ea\u51e0\u4e2a\u4efb\u52a1\uff0c\u8fd8\u9700\u904d\u5386\uff08\u4e0eNIO\u6a21\u578b\u7565\u6709\u4e0d\u540c\uff09","title":"select/poll"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#epoll","text":"\u59d4\u6258\u5185\u6838\u8fdb\u884c\u64cd\u4f5c \u4f1a\u901a\u77e5\u5177\u4f53\u6709\u54ea\u51e0\u4e2a\u4efb\u52a1\u53ef\u7528","title":"epoll"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#select","text":"","title":"select"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_72","text":"\u9996\u5148\u8981\u6784\u9020\u4e00\u4e2a\u5173\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5217\u8868\uff0c\u5c06\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6dfb\u52a0\u5230\u8be5\u5217\u8868\u4e2d \u8c03\u7528\u4e00\u4e2a\u7cfb\u7edf\u51fd\u6570( select )\uff0c\u76d1\u542c\u8be5\u5217\u8868\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u76f4\u5230\u8fd9\u4e9b\u63cf\u8ff0\u7b26\u4e2d\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8fdb\u884cI/O\u64cd\u4f5c\u65f6\uff0c\u8be5\u51fd\u6570\u624d\u8fd4\u56de \u8fd9\u4e2a\u51fd\u6570\u662f\u963b\u585e \u51fd\u6570\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u68c0\u6d4b\u7684\u64cd\u4f5c\u662f\u7531\u5185\u6838\u5b8c\u6210\u7684 \u5728\u8fd4\u56de\u65f6\uff0c\u5b83\u4f1a\u544a\u8bc9\u8fdb\u7a0b\u6709\u591a\u5c11\uff08\u54ea\u4e9b\uff09\u63cf\u8ff0\u7b26\u8981\u8fdb\u884cI/O\u64cd\u4f5c","title":"\u4e3b\u65e8\u601d\u60f3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_73","text":"\u6982\u89c8 ```c++ #include #include #include #include int select(int nfds, fd_set readfds, fd_set writefds, fd_set exceptfds, struct timeval timeout); // \u5c06\u53c2\u6570\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u8bbe\u7f6e\u4e3a0 void FD_CLR(int fd, fd_set set); // \u5224\u65adfd\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u662f0\u8fd8\u662f1\uff0c \u8fd4\u56de\u503c \uff1a fd\u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\u7684\u503c\uff0c0\uff0c\u8fd4\u56de0\uff0c 1\uff0c\u8fd4\u56de1 int FD_ISSET(int fd, fd_set set); // \u5c06\u53c2\u6570\u6587\u4ef6\u63cf\u8ff0\u7b26fd \u5bf9\u5e94\u7684\u6807\u5fd7\u4f4d\uff0c\u8bbe\u7f6e\u4e3a1 void FD_SET(int fd, fd_set set); // fd_set\u4e00\u5171\u67091024 bit, \u5168\u90e8\u521d\u59cb\u5316\u4e3a0 void FD_ZERO(fd_set set); ``` int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); \u901a\u8fc7 man select \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 nfds \uff1a\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u7684\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c + 1\uff08+1\u662f\u56e0\u4e3a\u904d\u5386\u662f\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0cfor\u5faa\u73af\uff1c\u8bbe\u5b9a\uff09 readfds \uff1a\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u7684\u96c6\u5408\uff0c\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u7684\u5c5e\u6027 \u4e00\u822c\u68c0\u6d4b\u8bfb\u64cd\u4f5c \u5bf9\u5e94\u7684\u662f\u5bf9\u65b9\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u8bfb\u662f\u88ab\u52a8\u7684\u63a5\u6536\u6570\u636e\uff0c\u68c0\u6d4b\u7684\u5c31\u662f\u8bfb\u7f13\u51b2\u533a \u662f\u4e00\u4e2a\u4f20\u5165\u4f20\u51fa\u53c2\u6570 writefds \uff1a\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5199\u7684\u96c6\u5408\uff0c\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5199\u7684\u5c5e\u6027 \u59d4\u6258\u5185\u6838\u68c0\u6d4b\u5199\u7f13\u51b2\u533a\u662f\u4e0d\u662f\u8fd8\u53ef\u4ee5\u5199\u6570\u636e\uff08\u4e0d\u6ee1\u7684\u5c31\u53ef\u4ee5\u5199\uff09 exceptfds \uff1a\u68c0\u6d4b\u53d1\u751f\u5f02\u5e38\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u96c6\u5408\uff0c\u4e00\u822c\u4e0d\u7528 timeout \uff1a\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u542b\u4e49\u89c1 select \u53c2\u6570\u5217\u8868\u8bf4\u660e NULL \uff1a\u6c38\u4e45\u963b\u585e\uff0c\u76f4\u5230\u68c0\u6d4b\u5230\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316 tv_sec = tv_usec = 0 \uff0c \u4e0d\u963b\u585e tv_sec > 0,tv_usec > 0 \uff1a\u963b\u585e\u5bf9\u5e94\u7684\u65f6\u95f4 \u8fd4\u56de\u503c -1\uff1a\u5931\u8d25 >0(n)\uff1a\u68c0\u6d4b\u7684\u96c6\u5408\u4e2d\u6709n\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u53d8\u5316 select \u53c2\u6570\u5217\u8868\u8bf4\u660e fd_set \uff1a\u662f\u4e00\u5757\u56fa\u5b9a\u5927\u5c0f\u7684\u7f13\u51b2\u533a(\u7ed3\u6784\u4f53)\uff0c sizeof(fd_set)=128 \uff0c\u5373\u5bf9\u5e941024\u4e2a\u6bd4\u7279\u4f4d timeval \uff1a\u7ed3\u6784\u4f53\u7c7b\u578b c++ struct timeval { long tv_sec; /* seconds */ long tv_usec; /* microseconds */ };","title":"\u51fd\u6570\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_74","text":"\u521d\u59cb\u8bbe\u5b9a \u8bbe\u7f6e\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c06 fd_set \u96c6\u5408\u76f8\u5e94\u4f4d\u7f6e\u4e3a1 \u8c03\u7528 select \u59d4\u6258\u5185\u6838\u68c0\u6d4b \u5185\u6838\u68c0\u6d4b\u5b8c\u6bd5\u540e\uff0c\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u7ed3\u679c","title":"\u5de5\u4f5c\u8fc7\u7a0b\u5206\u6790"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_75","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_76","text":"select \u4e2d\u9700\u8981\u7684\u76d1\u542c\u96c6\u5408\u9700\u8981\u4e24\u4e2a \u4e00\u4e2a\u662f\u7528\u6237\u6001\u771f\u6b63\u9700\u8981\u76d1\u542c\u7684\u96c6\u5408 rSet \u4e00\u4e2a\u662f\u5185\u6838\u6001\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u7684\u4fee\u6539\u96c6\u5408 tmpSet \u9700\u8981\u5148\u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8 \u5982\u679c\u6539\u53d8\u4e86\uff0c\u8bf4\u660e\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u6b64\u65f6\u9700\u8981\u5c06 \u65b0\u7684\u8fde\u63a5\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u5230 rSet \uff0c\u5e76\u66f4\u65b0\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5982\u679c\u6ca1\u6709\u6539\u53d8\uff0c\u8bf4\u660e\u6ca1\u6709\u5ba2\u6237\u7aef\u8fde\u63a5 \u7531\u4e8e select \u65e0\u6cd5\u786e\u5207\u77e5\u9053\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u6240\u4ee5\u9700\u8981\u6267\u884c\u904d\u5386\u64cd\u4f5c\uff0c\u4f7f\u7528 FD_ISSET \u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u6539\u53d8 \u5982\u679c\u5ba2\u6237\u7aef\u65ad\u5f00\u4e86\u8fde\u63a5\uff0c\u9700\u8981\u4ece rSet \u4e2d\u6e05\u9664\u9700\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u7a0b\u5e8f\u5b58\u5728\u7684\u95ee\u9898\uff1a\u4e2d\u95f4\u7684\u4e00\u4e9b\u65ad\u5f00\u8fde\u63a5\u540e\uff0c\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u600e\u4e48\u66f4\u65b0\uff1f =>==\u4f30\u8ba1\u4e0d\u66f4\u65b0\uff0c\u6bcf\u6b21\u90fd\u4f1a\u904d\u5386\u5230\u4e4b\u524d\u7684\u6700\u5927\u503c\u5904==\uff0c\u89e3\u51b3\u65b9\u6848\u89c1 \u9ad8\u5e76\u53d1\u4f18\u5316\u601d\u8003","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_77","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/select.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u521b\u5efa\u8bfb\u68c0\u6d4b\u96c6\u5408 // rSet\u7528\u4e8e\u8bb0\u5f55\u6b63\u5728\u7684\u76d1\u542c\u96c6\u5408\uff0ctmpSet\u7528\u4e8e\u8bb0\u5f55\u5728\u8f6e\u8bad\u8fc7\u7a0b\u4e2d\u7531\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u7684\u96c6\u5408 fd_set rSet, tmpSet; // \u6e05\u7a7a FD_ZERO(&rSet); // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165 FD_SET(listenfd, &rSet); // \u6b64\u65f6\u6700\u5927\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e3a\u76d1\u542c\u63cf\u8ff0\u7b26 int maxfd = listenfd; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { tmpSet = rSet; // \u4f7f\u7528select\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = select(maxfd + 1, &tmpSet, NULL, NULL, NULL); if (num == -1) { perror(\"select\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u9996\u5148\u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 if (FD_ISSET(listenfd, &tmpSet)) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); FD_SET(connfd, &rSet); // \u66f4\u65b0\u6700\u5927\u6587\u4ef6\u7b26 maxfd = maxfd > connfd ? maxfd : connfd; } // \u904d\u5386\u96c6\u5408\u5224\u65ad\u662f\u5426\u6709\u53d8\u52a8\uff0c\u5982\u679c\u6709\u53d8\u52a8\uff0c\u90a3\u4e48\u901a\u4fe1 char recv_buf[1024] = {0}; for (int i = listenfd + 1; i <= maxfd; i++) { if (FD_ISSET(i, &tmpSet)) { ret = read(i, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); write(i, recv_buf, strlen(recv_buf)); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(i); FD_CLR(i, &rSet); break; } } } } } close(listenfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_78","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; write(connfd, send_buf, strlen(send_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_79","text":"","title":"\u9ad8\u5e76\u53d1\u4f18\u5316\u601d\u8003"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_80","text":"\u6bcf\u6b21\u90fd\u9700\u8981\u5229\u7528 FD_ISSET \u8f6e\u8bad [0, maxfd] \u4e4b\u95f4\u7684\u8fde\u63a5\u72b6\u6001\uff0c \u5982\u679c\u4f4d\u4e8e\u4e2d\u95f4\u7684\u67d0\u4e00\u4e2a\u5ba2\u6237\u7aef\u65ad\u5f00\u4e86\u8fde\u63a5 \uff0c\u6b64\u65f6\u4e0d\u5e94\u8be5\u518d\u53bb\u5229\u7528 FD_ISSET \u8f6e\u8bad\uff0c\u9020\u6210\u8d44\u6e90\u6d6a\u8d39 \u5982\u679c\u5728\u5904\u7406\u5ba2\u6237\u7aef\u6570\u636e\u65f6\uff0c\u67d0\u4e00\u6b21read\u6ca1\u6709\u5bf9\u6570\u636e\u8bfb\u5b8c\uff0c\u90a3\u4e48\u9020\u6210\u91cd\u65b0\u8fdb\u884c\u4e0b\u4e00\u6b21\u65f6select\uff0c\u83b7\u53d6\u4e0a\u4e00\u6b21\u672a\u5904\u7406\u5b8c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ece0\u5f00\u59cb\u904d\u5386\u5230maxfd\uff0c\u5bf9\u4e0a\u4e00\u6b21\u7684\u8fdb\u884c\u518d\u4e00\u6b21\u64cd\u4f5c\uff0c\u6548\u7387\u5341\u5206\u4f4e\u4e0b","title":"\u95ee\u9898"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_81","text":"\u8003\u8651\u5230 select \u53ea\u6709 1024 \u4e2a\u6700\u5927\u53ef\u76d1\u542c\u6570\u91cf\uff0c\u53ef\u4ee5 \u7533\u8bf7\u7b49\u91cf\u5ba2\u6237\u7aef\u6570\u7ec4 \u521d\u59cb\u7f6e\u4e3a-1\uff0c\u5f53\u6709\u72b6\u6001\u6539\u53d8\u65f6\uff0c\u7f6e\u4e3a\u76f8\u5e94\u6587\u4ef6\u63cf\u8ff0\u7b26 \u6b64\u65f6\u518d\u7528 FD_ISSET \u8f6e\u8bad\u65f6\uff0c\u8df3\u8fc7\u6807\u8bb0\u4e3a-1\u7684\u5ba2\u6237\u7aef\uff0c\u52a0\u5feb\u904d\u5386\u901f\u5ea6 \u5bf9\u4e8e\u95ee\u9898\u4e8c\uff1a\u5bf9\u8bfb\u7f13\u5b58\u533a\u5faa\u73af\u8bfb\uff0c\u76f4\u5230\u8fd4\u56de EAGAIN \u518d\u5904\u7406\u6570\u636e","title":"\u89e3\u51b3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_82","text":"\u591a\u8def\u590d\u7528IO\u6a21\u578b\u4e4bselect\u4e0e\u5e76\u53d1\u95ee\u9898\u8fdb\u4e00\u6b65\u4f18\u5316","title":"\u53c2\u8003"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_83","text":"\u6bcf\u6b21\u8c03\u7528select\uff0c\u90fd\u9700\u8981\u628afd\u96c6\u5408\u4ece\u7528\u6237\u6001\u62f7\u8d1d\u5230\u5185\u6838\u6001\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4f1a\u5f88\u5927 \u540c\u65f6\u6bcf\u6b21\u8c03\u7528select\u90fd\u9700\u8981\u5728\u5185\u6838\u904d\u5386\u4f20\u9012\u8fdb\u6765\u7684\u6240\u6709fd\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4e5f\u5f88\u5927 select\u652f\u6301\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u91cf\u592a\u5c0f\u4e86\uff0c\u9ed8\u8ba4\u662f1024 fds\u96c6\u5408\u4e0d\u80fd\u91cd\u7528\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u7f6e","title":"\u5b58\u5728\u95ee\u9898(\u7f3a\u70b9)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#poll","text":"","title":"poll"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_84","text":"\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u8bb0\u5f55\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\uff0c\u5e76\u8bb0\u5f55\u7528\u6237\u6001\u72b6\u6001\u548c\u5185\u6838\u6001\u72b6\u6001","title":"\u4e3b\u65e8\u601d\u60f3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_85","text":"\u6982\u89c8 ```c++ #include struct pollfd { int fd; / \u59d4\u6258\u5185\u6838\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 / short events; / \u59d4\u6258\u5185\u6838\u68c0\u6d4b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4ec0\u4e48\u4e8b\u4ef6 / short revents; / \u6587\u4ef6\u63cf\u8ff0\u7b26\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u4ef6 / }; int poll(struct pollfd *fds, nfds_t nfds, int timeout); ``` int poll(struct pollfd *fds, nfds_t nfds, int timeout); \u901a\u8fc7 man poll \u67e5\u770b\u5e2e\u52a9 \u53c2\u6570 fds \uff1a\u662f\u4e00\u4e2a struct pollfd \u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u96c6\u5408 nfds \uff1a\u8fd9\u4e2a\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u6709\u6548\u5143\u7d20\u7684\u4e0b\u6807 + 1 timeout \uff1a\u963b\u585e\u65f6\u957f 0\uff1a\u4e0d\u963b\u585e -1\uff1a\u963b\u585e\uff0c\u5f53\u68c0\u6d4b\u5230\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u89e3\u9664\u963b\u585e >0\uff1a\u5177\u4f53\u7684\u963b\u585e\u65f6\u957f(ms) \u8fd4\u56de\u503c -1\uff1a\u5931\u8d25 >0(n)\uff1a\u68c0\u6d4b\u7684\u96c6\u5408\u4e2d\u6709n\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u53d8\u5316 events \u53ca revents \u53d6\u503c\uff0c\u5982\u679c\u6709\u591a\u4e2a\u4e8b\u4ef6\u9700\u8981\u68c0\u6d4b\uff0c\u7528 | \u5373\u53ef\uff0c\u5982\u540c\u65f6\u68c0\u6d4b\u8bfb\u548c\u5199\uff1a POLLIN | POLLOUT","title":"\u51fd\u6570\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_86","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_87","text":"nfds \u8868\u793a\u7684\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e0b\u6807\uff0c\u6240\u4ee5\u5728\u904d\u5386\u65f6\uff0c\u9700\u8981\u4f7f\u7528 fds[i].fd \u53d6\u5f97\u76f8\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u5982\u4f55\u4f18\u96c5\u7684\u66f4\u65b0nfds?\u4ee3\u7801\u4e2d\u4f7f\u7528\u8fde\u63a5\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4f5c\u4e3a\u66ff\u4ee3\u66f4\u65b0","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_88","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <poll.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } struct pollfd fds[1024]; // \u521d\u59cb\u5316 for (int i = 0; i < 1024; i++) { fds[i].fd = -1; fds[i].events = POLLIN; } // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165 fds[0].fd = listenfd; int nfds = 0; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // \u4f7f\u7528poll\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = poll(fds, nfds + 1, -1); if (num == -1) { perror(\"poll\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u9996\u5148\u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 if (fds[0].revents & POLLIN) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // \u904d\u5386\u96c6\u5408, \u5c06\u65b0\u7684\u9700\u8981\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u96c6\u5408 for (int i = 1; i < 1024; i++) { if (fds[i].fd == -1) { fds[i].fd = connfd; fds[i].events = POLLIN; break; } } // \u66f4\u65b0\u6700\u5927\u7684\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\u4e0b\u6807 // \u5b58\u5728\u95ee\u9898\uff1a\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u66ff\u4ee3\u6700\u5927\u5bf9\u5e94\u4e0b\u6807 nfds = nfds > connfd ? nfds : connfd; } // \u904d\u5386\u96c6\u5408\u5224\u65ad\u662f\u5426\u6709\u53d8\u52a8\uff0c\u5982\u679c\u6709\u53d8\u52a8\uff0c\u90a3\u4e48\u901a\u4fe1 char recv_buf[1024] = {0}; for (int i = 1; i <= nfds; i++) { if (fds[i].fd != -1 && fds[i].revents & POLLIN) { ret = read(fds[i].fd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); write(fds[i].fd, recv_buf, strlen(recv_buf)); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(fds[i].fd); fds[i].fd = -1; break; } } } } } close(listenfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_89","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; write(connfd, send_buf, strlen(send_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_90","text":"\u7f3a\u70b9\u540c select \u7b2c\u4e00\u70b9\u548c\u7b2c\u4e8c\u70b9(\u5982\u4e0b)\uff0c\u5373\u89e3\u51b3\u4e86\u7b2c\u4e09\u70b9\u548c\u7b2c\u56db\u70b9 \u6bcf\u6b21\u8c03\u7528select\uff0c\u90fd\u9700\u8981\u628afd\u96c6\u5408\u4ece\u7528\u6237\u6001\u62f7\u8d1d\u5230\u5185\u6838\u6001\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4f1a\u5f88\u5927 \u540c\u65f6\u6bcf\u6b21\u8c03\u7528select\u90fd\u9700\u8981\u5728\u5185\u6838\u904d\u5386\u4f20\u9012\u8fdb\u6765\u7684\u6240\u6709fd\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728fd\u5f88\u591a\u65f6\u4e5f\u5f88\u5927","title":"\u5b58\u5728\u95ee\u9898(\u7f3a\u70b9)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#epoll_1","text":"","title":"epoll"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_91","text":"\u76f4\u63a5\u5728 \u5185\u6838\u6001 \u521b\u5efa eventpoll\u5b9e\u4f8b (\u7ed3\u6784\u4f53)\uff0c\u901a\u8fc7 epoll \u63d0\u4f9b\u7684API\u64cd\u4f5c\u8be5\u5b9e\u4f8b \u7ed3\u6784\u4f53\u4e2d\u6709 \u7ea2\u9ed1\u6811 \u548c \u53cc\u94fe\u8868 \uff0c\u5206\u522b\u7528\u6765 \u5b58\u50a8\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 \u548c \u5b58\u50a8\u5df2\u7ecf\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26","title":"\u4e3b\u65e8\u601d\u60f3"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_92","text":"\u6982\u89c8 ```c #include // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684epoll\u5b9e\u4f8b // \u5728\u5185\u6838\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u636e\uff0c\u8fd9\u4e2a\u6570\u636e\u4e2d\u6709\u4e24\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u662f\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4fe1\u606f\uff08\u7ea2\u9ed1\u6811\uff09\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f\u5c31\u7eea\u5217\u8868\uff0c\u5b58\u653e\u68c0\u6d4b\u5230\u6570\u636e\u53d1\u9001\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\uff08\u53cc\u5411\u94fe\u8868\uff09 int epoll_create(int size); // \u5bf9epoll\u5b9e\u4f8b\u8fdb\u884c\u7ba1\u7406\uff1a\u6dfb\u52a0\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\uff0c\u5220\u9664\u4fe1\u606f\uff0c\u4fee\u6539\u4fe1\u606f int epoll_ctl(int epfd, int op, int fd, struct epoll_event event); struct epoll_event { uint32_t events; / Epoll events / epoll_data_t data; / User data variable / }; typedef union epoll_data { void ptr; int fd; uint32_t u32; uint64_t u64; } epoll_data_t; // \u68c0\u6d4b\u51fd\u6570 int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout); ``` int epoll_create(int size); \u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684epoll\u5b9e\u4f8b \u53c2\u6570\uff1a size \uff0c\u76ee\u524d\u6ca1\u6709\u610f\u4e49\u4e86(\u4e4b\u524d\u5e95\u5c42\u5b9e\u73b0\u662f\u54c8\u5e0c\u8868\uff0c\u73b0\u5728\u662f\u7ea2\u9ed1\u6811)\uff0c\u968f\u4fbf\u5199\u4e00\u4e2a\u6570\uff0c\u5fc5\u987b\u5927\u4e8e0 \u8fd4\u56de\u503c -1\uff1a\u5931\u8d25 >0\uff1a\u64cd\u4f5c epoll\u5b9e\u4f8b \u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event); \u529f\u80fd\uff1a\u5bf9epoll\u5b9e\u4f8b\u8fdb\u884c\u7ba1\u7406\uff1a\u6dfb\u52a0\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f\uff0c\u5220\u9664\u4fe1\u606f\uff0c\u4fee\u6539\u4fe1\u606f \u53c2\u6570\uff1a epfd \uff1aepoll\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 op \uff1a\u8981\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c \u6dfb\u52a0\uff1a EPOLL_CTL_ADD \u5220\u9664\uff1a EPOLL_CTL_DEL \u4fee\u6539\uff1a EPOLL_CTL_MOD fd \uff1a\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 event \uff1a\u68c0\u6d4b\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ec0\u4e48\u4e8b\u60c5\uff0c\u901a\u8fc7\u8bbe\u7f6e epoll_event.events \uff0c\u5e38\u89c1\u64cd\u4f5c \u8bfb\u4e8b\u4ef6\uff1a EPOLLIN \u5199\u4e8b\u4ef6\uff1a EPOLLOUT \u9519\u8bef\u4e8b\u4ef6\uff1a EPOLLERR \u8bbe\u7f6e\u8fb9\u6cbf\u89e6\u53d1\uff1a EPOLLET \uff08\u9ed8\u8ba4\u6c34\u5e73\u89e6\u53d1\uff09 \u8fd4\u56de\u503c\uff1a\u6210\u529f0\uff0c\u5931\u8d25-1 int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout); \u529f\u80fd\uff1a\u68c0\u6d4b\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u751f\u4e86\u6539\u53d8 \u53c2\u6570\uff1a epfd \uff1aepoll\u5b9e\u4f8b\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 events \uff1a\u4f20\u51fa\u53c2\u6570\uff0c\u4fdd\u5b58\u4e86\u53d1\u751f\u4e86\u53d8\u5316\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4fe1\u606f maxevents \uff1a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed3\u6784\u4f53\u6570\u7ec4\u7684\u5927\u5c0f timeout \uff1a\u963b\u585e\u65f6\u957f 0\uff1a\u4e0d\u963b\u585e -1\uff1a\u963b\u585e\uff0c\u5f53\u68c0\u6d4b\u5230\u9700\u8981\u68c0\u6d4b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u89e3\u9664\u963b\u585e >0\uff1a\u5177\u4f53\u7684\u963b\u585e\u65f6\u957f(ms) \u8fd4\u56de\u503c\uff1a > 0\uff1a\u6210\u529f\uff0c\u8fd4\u56de\u53d1\u9001\u53d8\u5316\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570 -1\uff1a\u5931\u8d25","title":"\u51fd\u6570\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_93","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_94","text":"events \u662f\u5c01\u88c5\u4e86\u76d1\u542c\u63cf\u8ff0\u7b26\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\uff0c\u6bcf\u4e00\u4e2a\u65b0\u589e\u6587\u4ef6\u90fd\u9700\u8981\u8fd9\u4e2a(\u53ef\u91cd\u7528) \u9700\u8981\u6ce8\u610f\u53ef\u80fd\u540c\u65f6\u53d1\u751f\u4e86\u591a\u4e2a\u76d1\u542c\uff08\u5982\u76d1\u542c\u8bfb\u4e8b\u4ef6\u548c\u5199\u4e8b\u4ef6\uff09\uff0c\u90a3\u4e48\u4ee3\u7801\u903b\u8f91\u9700\u8981\u505a\u76f8\u5e94\u5224\u65ad \u5982\u672c\u4f8b\u4e2d\u53ea\u68c0\u6d4b\u8bfb\u4e8b\u4ef6\uff0c\u6392\u9664\u4e86\u5199\u4e8b\u4ef6","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_95","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/epoll.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u521b\u5efaepoll\u5b9e\u4f8b int epfd = epoll_create(100); // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u5b9e\u4f8b struct epoll_event event; event.events = EPOLLIN; event.data.fd = listenfd; ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &event); if (ret == -1) { perror(\"epoll_ctl\"); exit(-1); } // \u6b64\u7ed3\u6784\u4f53\u7528\u6765\u4fdd\u5b58\u5185\u6838\u6001\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f struct epoll_event events[1024]; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // \u4f7f\u7528epoll\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = epoll_wait(epfd, events, 1024, -1); if (num == -1) { perror(\"poll\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u904d\u5386\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408 for (int i = 0; i < num; i++) { // \u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 int curfd = events[i].data.fd; if (curfd == listenfd) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // \u5c06\u4fe1\u606f\u52a0\u5165\u76d1\u542c\u96c6\u5408 event.events = EPOLLIN; event.data.fd = connfd; epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &event); } else { // \u53ea\u68c0\u6d4b\u8bfb\u4e8b\u4ef6 if (events[i].events & EPOLLOUT) { continue; } // \u63a5\u6536\u6d88\u606f char recv_buf[1024] = {0}; ret = read(curfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); write(curfd, recv_buf, strlen(recv_buf)); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(curfd); epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL); break; } } } } } close(listenfd); close(epfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_96","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e char *send_buf = \"client message\"; write(connfd, send_buf, strlen(send_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#ltet","text":"","title":"\u5de5\u4f5c\u6a21\u5f0f(LT\u4e0eET)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#level-triggered-lt","text":"epoll\u7684\u7f3a\u7701\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5e76\u4e14\u540c\u65f6\u652f\u6301 block \u548c non-block socket \u5728\u8fd9\u79cd\u505a\u6cd5\u4e2d\uff0c\u5185\u6838\u544a\u8bc9\u4f60\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u5c31\u7eea\u4e86\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5c31\u7eea\u7684 fd \u8fdb\u884c IO \u64cd\u4f5c\u3002\u5982\u679c\u4f60\u4e0d\u4f5c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5185\u6838\u8fd8\u662f\u4f1a\u7ee7\u7eed\u901a\u77e5\u4f60\u7684","title":"\u6c34\u5e73\u89e6\u53d1(level triggered, LT)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#edge-triggered-et","text":"\u662f\u9ad8\u901f\u5de5\u4f5c\u65b9\u5f0f\uff0c\u53ea\u652f\u6301 non-block socket\uff0c\u9700\u8981\u5bf9\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bbe\u7f6e\u624d\u80fd\u5b9e\u73b0 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u5f53\u63cf\u8ff0\u7b26\u4ece\u672a\u5c31\u7eea\u53d8\u4e3a\u5c31\u7eea\u65f6\uff0c\u5185\u6838\u901a\u8fc7epoll\u544a\u8bc9\u4f60\u3002\u7136\u540e\u5b83\u4f1a\u5047\u8bbe\u4f60\u77e5\u9053\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u7ecf\u5c31\u7eea\uff0c\u5e76\u4e14\u4e0d\u4f1a\u518d\u4e3a\u90a3\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d1\u9001\u66f4\u591a\u7684\u5c31\u7eea\u901a\u77e5\uff0c\u76f4\u5230\u4f60\u505a\u4e86\u67d0\u4e9b\u64cd\u4f5c\u5bfc\u81f4\u90a3\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u518d\u4e3a\u5c31\u7eea\u72b6\u6001\u4e86\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u76f4\u4e0d\u5bf9\u8fd9\u4e2a fd \u4f5c IO \u64cd\u4f5c\uff08\u4ece\u800c\u5bfc\u81f4\u5b83\u518d\u6b21\u53d8\u6210\u672a\u5c31\u7eea\uff09\uff0c\u5185\u6838\u4e0d\u4f1a\u53d1\u9001\u66f4\u591a\u7684\u901a\u77e5\uff08only once\uff09","title":"\u8fb9\u6cbf\u89e6\u53d1(edge triggered, ET)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_97","text":"ET \u6a21\u5f0f\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86 epoll \u4e8b\u4ef6\u88ab\u91cd\u590d\u89e6\u53d1\u7684\u6b21\u6570\uff0c\u56e0\u6b64\u6548\u7387\u8981\u6bd4 LT \u6a21\u5f0f\u9ad8 epoll\u5de5\u4f5c\u5728 ET \u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u4f7f\u7528\u975e\u963b\u585e\u5957\u63a5\u53e3\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u7684\u963b\u585e\u8bfb/\u963b\u585e\u5199\u64cd\u4f5c\u628a\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4efb\u52a1\u997f\u6b7b \u6240\u4ee5\u5982\u679c\u4f7f\u7528ET\u4e14\u7f13\u51b2\u533a\u5185\u5bb9\u4e0d\u80fd\u4e00\u6b21\u6027\u8bfb\u5b8c\uff0c \u9700\u8981\u5199\u4e00\u4e2a\u5faa\u73af\u5c06\u5185\u5bb9\u5168\u90e8\u8bfb\u53d6\uff0c\u4e14\u9700\u8981\u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e \u8bf4\u660e\uff1a\u5047\u8bbe\u59d4\u6258\u5185\u6838\u68c0\u6d4b\u8bfb\u4e8b\u4ef6\uff0c\u5373\u68c0\u6d4bfd\u7684\u8bfb\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u5982\u679c\u8bfb\u7f13\u51b2\u533a\u6709\u6570\u636e \uff0cepoll\u68c0\u6d4b\u5230\u4e86\u4f1a\u7ed9\u7528\u6237\u901a\u77e5 LT \u7528\u6237\u4e0d\u8bfb\u6570\u636e\uff0c\u6570\u636e\u4e00\u76f4\u5728\u7f13\u51b2\u533a\uff0cepoll \u4f1a\u4e00\u76f4\u901a\u77e5 \u7528\u6237\u53ea\u8bfb\u4e86\u4e00\u90e8\u5206\u6570\u636e\uff0cepoll\u4f1a\u901a\u77e5 \u7f13\u51b2\u533a\u7684\u6570\u636e\u8bfb\u5b8c\u4e86\uff0c\u4e0d\u901a\u77e5 ET \u7528\u6237\u4e0d\u8bfb\u6570\u636e\uff0c\u6570\u636e\u4e00\u81f4\u5728\u7f13\u51b2\u533a\u4e2d\uff0cepoll\u4e0b\u6b21\u68c0\u6d4b\u7684\u65f6\u5019\u5c31\u4e0d\u901a\u77e5\u4e86 \u7528\u6237\u53ea\u8bfb\u4e86\u4e00\u90e8\u5206\u6570\u636e\uff0cepoll\u4e0d\u901a\u77e5 \u7f13\u51b2\u533a\u7684\u6570\u636e\u8bfb\u5b8c\u4e86\uff0c\u4e0d\u901a\u77e5","title":"\u533a\u522b\u4e0e\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#et","text":"","title":"\u4ee3\u7801(ET)"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_98","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #include <sys/epoll.h> #include <fcntl.h> #include <errno.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff09 int listenfd = socket(AF_INET, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } int opt = 1; setsockopt(listenfd, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)); // 2. \u7ed1\u5b9a struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; // \u70b9\u5206\u5341\u8fdb\u5236\u8f6c\u6362\u4e3a\u7f51\u7edc\u5b57\u8282\u5e8f inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); // \u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u7ed1\u5b9a0.0.0.0\u5373\u4efb\u610f\u5730\u5740 // server_addr.sin_addr.s_addr = INADDR_ANY; server_addr.sin_port = htons(PORT); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // \u521b\u5efaepoll\u5b9e\u4f8b int epfd = epoll_create(100); // \u5c06\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a0\u5165\u5b9e\u4f8b struct epoll_event event; event.events = EPOLLIN; event.data.fd = listenfd; ret = epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &event); if (ret == -1) { perror(\"epoll_ctl\"); exit(-1); } // \u6b64\u7ed3\u6784\u4f53\u7528\u6765\u4fdd\u5b58\u5185\u6838\u6001\u8fd4\u56de\u7ed9\u7528\u6237\u6001\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4fe1\u606f struct epoll_event events[1024]; // \u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5 while (1) { // \u4f7f\u7528epoll\uff0c\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff0c\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u5316\u624d\u8fd4\u56de int num = epoll_wait(epfd, events, 1024, -1); // \u65b9\u4fbf\u89c2\u5bdfepoll\u901a\u77e5\u4e86\u51e0\u6b21 printf(\"num = %d\\n\", num); if (num == -1) { perror(\"poll\"); exit(-1); } else if (num == 0) { // \u5f53\u524d\u65e0\u6587\u4ef6\u63cf\u8ff0\u7b26\u6709\u53d8\u5316\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u904d\u5386 // \u5728\u672c\u6b21\u8bbe\u7f6e\u4e2d\u65e0\u6548\uff08\u56e0\u4e3aselect\u88ab\u8bbe\u7f6e\u4e3a\u6c38\u4e45\u963b\u585e\uff09 continue; } else { // \u904d\u5386\u53d1\u751f\u6539\u53d8\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408 for (int i = 0; i < num; i++) { // \u5224\u65ad\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5426\u53d1\u751f\u6539\u53d8\uff08\u5373\u662f\u5426\u6709\u5ba2\u6237\u7aef\u8fde\u63a5\uff09 int curfd = events[i].data.fd; if (curfd == listenfd) { // 4. \u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5 struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"accept\"); exit(-1); } // \u8f93\u51fa\u5ba2\u6237\u7aef\u4fe1\u606f\uff0cIP\u7ec4\u6210\u81f3\u5c1116\u4e2a\u5b57\u7b26\uff08\u5305\u542b\u7ed3\u675f\u7b26\uff09 char client_ip[16] = {0}; inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, client_ip, sizeof(client_ip)); unsigned short client_port = ntohs(client_addr.sin_port); printf(\"ip:%s, port:%d\\n\", client_ip, client_port); // \u5c06\u901a\u4fe1\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e int flag = fcntl(connfd, F_GETFL); flag |= O_NONBLOCK; fcntl(connfd, F_SETFL, flag); // \u5c06\u4fe1\u606f\u52a0\u5165\u76d1\u542c\u96c6\u5408\uff0c\u8bbe\u7f6e\u4e3aET\u6a21\u5f0f event.events = EPOLLIN | EPOLLET; event.data.fd = connfd; epoll_ctl(epfd, EPOLL_CTL_ADD, connfd, &event); } else { // \u53ea\u68c0\u6d4b\u8bfb\u4e8b\u4ef6 if (events[i].events & EPOLLOUT) { continue; } // \u63a5\u6536\u6d88\u606f\uff0c\u5c06\u7f13\u51b2\u533a\u51cf\u5c11\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u8bf4\u660e\u4e00\u6b21\u6027\u65e0\u6cd5\u8bfb\u53d6\u6570\u636e\u65f6\uff0cepoll\u7684\u64cd\u4f5c // \u9700\u8981\u5faa\u73af\u8bfb\u53d6\u6570\u636e char recv_buf[5] = {0}; while ((ret = read(curfd, recv_buf, sizeof(recv_buf))) > 0) { // \u5e94\u8be5\u662f\u6253\u5370\u7684\u65f6\u5019\u6700\u540e\u6ca1\u6709\u7ed3\u675f\u7b26 char test_buf[6] = {0}; strcpy(test_buf, recv_buf); printf(\"recv server data : %s\\n\", test_buf); // write(STDOUT_FILENO, recv_buf, ret); // write(curfd, recv_buf, strlen(recv_buf)); write(curfd, recv_buf, sizeof(recv_buf)); memset(recv_buf, 0, sizeof(recv_buf)); } if (ret == -1) { if(errno == EAGAIN) { printf(\"data over...\\n\"); }else { perror(\"read\"); exit(-1); } } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); close(curfd); epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, NULL); break; } } } } } close(listenfd); close(epfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_99","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <unistd.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efasocket\uff08\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff09 int connfd = socket(AF_INET, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u8fde\u63a5\u670d\u52a1\u5668\u7aef struct sockaddr_in server_addr; server_addr.sin_family = PF_INET; inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); server_addr.sin_port = htons(PORT); int ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } // 3. \u901a\u4fe1 char recv_buf[1024] = {0}; while (1) { // \u53d1\u9001\u6570\u636e\uff0c\u4fee\u6539\u4e3a\u4ece\u952e\u76d8\u83b7\u53d6\u5185\u5bb9 fgets(recv_buf, sizeof(recv_buf), stdin); write(connfd, recv_buf, strlen(recv_buf)); // \u56e0\u4e3a\u7528\u7684\u65f6\u540c\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e0d\u6e05\u7a7a\u5c31\u4f1a\u6709\u6b8b\u7559\u6570\u636e memset(recv_buf, 0, sizeof(recv_buf)); // \u63a5\u6536\u6570\u636e ret = read(connfd, recv_buf, sizeof(recv_buf)); if (ret == -1) { perror(\"read\"); exit(-1); } else if (ret > 0) { printf(\"recv server data : %s\\n\", recv_buf); } else { // \u8868\u793a\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5 printf(\"client closed...\\n\"); } // \u4f11\u7720\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u89c2\u5bdf\uff0c\u653e\u5728\u6b64\u5904\u53ef\u4ee5\u89e3\u51b3read: Connection reset by peer\u95ee\u9898 sleep(1); } // \u5173\u95ed\u8fde\u63a5 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#udp_1","text":"","title":"UDP\u4e0e\u672c\u5730\u5957\u63a5\u5b57"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_100","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/04Linux\u7f51\u7edc\u7f16\u7a0b/04 UDP\u4e0e\u672c\u5730\u5957\u63a5\u5b57","title":"\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#udp_2","text":"","title":"UDP\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_101","text":"","title":"\u901a\u4fe1\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_102","text":"ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen); \u529f\u80fd\uff1audp\u53d1\u9001\u6d88\u606f\u51fd\u6570 \u53c2\u6570 sockfd \uff1a\u901a\u4fe1\u7684\u5957\u63a5\u5b57(\u6587\u4ef6\u63cf\u8ff0\u7b26) buf \uff1a\u8981\u53d1\u9001\u7684\u6570\u636e len \uff1a\u53d1\u9001\u6570\u636e\u7684\u957f\u5ea6 flags \uff1a\u8bbe\u7f6e\u4e3a0\u5373\u53ef dest_addr \uff1a\u901a\u4fe1\u7684\u53e6\u5916\u4e00\u7aef\u7684\u5730\u5740\u4fe1\u606f addrlen \uff1a\u5730\u5740\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u5373 sizeof(dest_addr) \u8fd4\u56de\u503c\uff1a\u5931\u8d25-1\uff0c\u5426\u5219\u8fd4\u56de\u53d1\u9001\u6570\u636e\u5927\u5c0f ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen); \u529f\u80fd\uff1audp\u63a5\u6536\u6d88\u606f\u51fd\u6570 \u53c2\u6570 sockfd \uff1a\u901a\u4fe1\u7684\u5957\u63a5\u5b57(\u6587\u4ef6\u63cf\u8ff0\u7b26) buf \uff1a\u63a5\u6536\u7684\u6570\u636e len \uff1a\u63a5\u6536\u6570\u636e\u7684\u957f\u5ea6 flags \uff1a\u8bbe\u7f6e\u4e3a0\u5373\u53ef dest_addr \uff1a\u901a\u4fe1\u7684\u53e6\u5916\u4e00\u7aef\u7684\u5730\u5740\u4fe1\u606f\uff0c\u4e0d\u9700\u8981\u8bbe\u7f6e\u4e3aNULL\u5373\u53ef addrlen \uff1a\u5730\u5740\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u5373 sizeof(dest_addr) \u8fd4\u56de\u503c\uff1a\u5931\u8d25-1\uff0c\u5426\u5219\u8fd4\u56de\u53d1\u9001\u6570\u636e\u5927\u5c0f","title":"\u6d88\u606f\u6536\u53d1\u51fd\u6570"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#udp_3","text":"","title":"\u5b9e\u4f8b\uff1aUDP\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_103","text":"\u670d\u52a1\u7aef\u4e0d\u9700\u8981\u8bbe\u7f6e\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26=>\u56e0\u4e3a\u4e0d\u9700\u8981\u4e09\u6b21\u63e1\u624b \u4e0d\u9700\u8981\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b\uff0c\u6216\u8005IO\u591a\u8def\u590d\u7528\u5373\u53ef\u5b9e\u73b0\u591a\u5e76\u53d1","title":"\u8bf4\u660e"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_104","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2. \u7ed1\u5b9a\u672c\u673a\u5730\u5740(\u670d\u52a1\u7aef) struct sockaddr_in server_addr; server_addr.sin_family = AF_INET; server_addr.sin_port = htons(PORT); inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); int ret = bind(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if(ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u901a\u4fe1 while (1) { char recvbuf[128]; char ipbuf[16]; struct sockaddr_in cliaddr; int len = sizeof(cliaddr); // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, recvbuf, sizeof(recvbuf), 0, (struct sockaddr *)&cliaddr, &len); printf(\"client IP : %s, Port : %d\\n\", inet_ntop(AF_INET, &cliaddr.sin_addr.s_addr, ipbuf, sizeof(ipbuf)), ntohs(cliaddr.sin_port)); printf(\"client say : %s\\n\", recvbuf); // \u53d1\u9001\u6570\u636e sendto(connfd, recvbuf, strlen(recvbuf) + 1, 0, (struct sockaddr *)&cliaddr, sizeof(cliaddr)); } return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_105","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define SERVERIP \"127.0.0.1\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2. \u901a\u4fe1 // \u8bbe\u7f6e\u670d\u52a1\u5668\u4fe1\u606f struct sockaddr_in server_addr; server_addr.sin_family = AF_INET; server_addr.sin_port = htons(PORT); inet_pton(AF_INET, SERVERIP, &server_addr.sin_addr.s_addr); int num = 0; while (1) { // \u53d1\u9001\u6570\u636e char sendBuf[128]; sprintf(sendBuf, \"hello , i am client %d \\n\", num++); sendto(connfd, sendBuf, strlen(sendBuf) + 1, 0, (struct sockaddr *)&server_addr, sizeof(server_addr)); // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, sendBuf, sizeof(sendBuf), 0, NULL, NULL); printf(\"server say : %s\\n\", sendBuf); sleep(1); } return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_106","text":"","title":"\u5e7f\u64ad"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_107","text":"\u53ea\u80fd\u5728\u5c40\u57df\u7f51\u4e2d\u4f7f\u7528 \u5ba2\u6237\u7aef\u9700\u8981\u7ed1\u5b9a\u670d\u52a1\u5668\u5e7f\u64ad\u4f7f\u7528\u7684\u7aef\u53e3\uff0c\u624d\u53ef\u4ee5\u63a5\u6536\u5230\u5e7f\u64ad\u6d88\u606f \u5411\u5b50\u7f51\u4e2d\u591a\u53f0\u8ba1\u7b97\u673a\u53d1\u9001\u6d88\u606f\uff0c\u5e76\u4e14\u5b50\u7f51\u4e2d\u6240\u6709\u7684\u8ba1\u7b97\u673a\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u53d1\u9001\u65b9\u53d1\u9001\u7684\u6d88\u606f\uff0c\u6bcf\u4e2a\u5e7f\u64ad\u6d88\u606f\u90fd\u5305\u542b\u4e00\u4e2a\u7279\u6b8a\u7684IP\u5730\u5740\uff0c\u8fd9\u4e2aIP\u4e2d\u5b50\u7f51\u5185\u4e3b\u673a\u6807\u5fd7\u90e8\u5206\u7684\u4e8c\u8fdb\u5236\u5168\u90e8\u4e3a1","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_108","text":"\u901a\u8fc7\u8bbe\u7f6e setsockopt \u51fd\u6570\uff0c\u670d\u52a1\u7aef\u8fdb\u884c\u8bbe\u7f6e\uff08\u53d1\u9001\u5e7f\u64ad\u7aef\uff09 int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); sockfd \uff1a\u901a\u4fe1\u5957\u63a5\u5b57 level \uff1a\u8bbe\u7f6e\u4e3a SOL_SOCKET optname \uff1a\u8bbe\u7f6e\u4e3a SO_BROADCAST optval \uff1aint\u7c7b\u578b\u7684\u503c\uff0c\u4e3a1\u8868\u793a\u5141\u8bb8\u5e7f\u64ad optlen \uff1aoptval\u7684\u5927\u5c0f","title":"\u65b9\u6cd5"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_109","text":"\u6b64\u65f6\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u754c\u9650\u6a21\u7cca\uff0c\u6309\u7406\u6765\u8bf4\uff0c\u9700\u8981 bind \u7aef\u4e3a\u670d\u52a1\u7aef\uff0c\u800c\u5728\u5e7f\u64ad\u65f6\uff0c\u9700\u8981 bind \u7684\u4e00\u7aef\u4e3a\u63a5\u6536\u6d88\u606f\u7aef \u53d1\u9001\u5e7f\u64ad\u7aef \u9700\u8981\u901a\u8fc7 setsockopt \u8bbe\u7f6e\u76f8\u5173\u4fe1\u606f\uff0c\u5e7f\u64ad\u5730\u5740\u9700\u8981\u6839\u636e\u672c\u5730IP\u8fdb\u884c\u914d\u7f6e\uff0c\u5373 xxx.xxx.xxx.255 \u63a5\u6536\u5e7f\u64ad\u7aef \u9700\u8981\u7ed1\u5b9a\u5e7f\u64ad\u5730\u5740\u6216\u8bbe\u7f6e\u4e3a\u63a5\u6536\u4efb\u610f\u5730\u5740\u6d88\u606f \u63a5\u6536\u7aef\u5728\u8fde\u5165\u65f6\uff0c\u5df2\u7ecf\u8fc7\u53bb\u7684\u6d88\u606f\u5c06\u4e0d\u88ab\u63a5\u6536","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_110","text":"","title":"\u5b9e\u4f8b\uff1a\u5e7f\u64ad"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_111","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define BROADCASTIP \"192.168.213.255\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u8bbe\u7f6e\u5e7f\u64ad\u5c5e\u6027 int op = 1; setsockopt(connfd, SOL_SOCKET, SO_BROADCAST, &op, sizeof(op)); // 3.\u521b\u5efa\u4e00\u4e2a\u5e7f\u64ad\u7684\u5730\u5740 struct sockaddr_in broad_addr; broad_addr.sin_family = AF_INET; broad_addr.sin_port = htons(PORT); inet_pton(AF_INET, BROADCASTIP, &broad_addr.sin_addr.s_addr); // 4. \u901a\u4fe1 int num = 0; while (1) { char sendBuf[128]; sprintf(sendBuf, \"hello, client....%d\", num++); // \u53d1\u9001\u6570\u636e sendto(connfd, sendBuf, strlen(sendBuf) + 1, 0, (struct sockaddr *)&broad_addr, sizeof(broad_addr)); printf(\"\u5e7f\u64ad\u7684\u6570\u636e\uff1a%s\\n\", sendBuf); sleep(1); } close(connfd); return 0; }","title":"\u670d\u52a1\u7aef\uff08\u53d1\u9001\u5e7f\u64ad\u7aef\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_112","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define BROADCASTIP \"192.168.213.255\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u5ba2\u6237\u7aef\u7ed1\u5b9a\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3 struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_port = htons(PORT); // \u8bbe\u7f6e\u4e3a\u63a5\u6536\u4efb\u610f\u7f51\u5740\u4fe1\u606f\u6216\u6307\u5b9a\u591a\u64ad\u5730\u5740 // addr.sin_addr.s_addr = INADDR_ANY; inet_pton(AF_INET, BROADCASTIP, &addr.sin_addr.s_addr); // 3. \u5c06\u4fe1\u606f\u8fdb\u884c\u7ed1\u5b9a int ret = bind(connfd, (struct sockaddr *)&addr, sizeof(addr)); if(ret == -1) { perror(\"bind\"); exit(-1); } // 4. \u901a\u4fe1 while (1) { char buf[128]; // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, buf, sizeof(buf), 0, NULL, NULL); printf(\"server say : %s\\n\", buf); } close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef\uff08\u63a5\u6536\u5e7f\u64ad\u7aef\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_113","text":"","title":"\u7ec4\u64ad(\u591a\u64ad\uff09"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_114","text":"\u7ec4\u64ad\u65e2\u53ef\u4ee5\u7528\u4e8e\u5c40\u57df\u7f51\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5e7f\u57df\u7f51 \u5ba2\u6237\u7aef\u9700\u8981\u52a0\u5165\u591a\u64ad\u7ec4\uff0c\u624d\u80fd\u63a5\u6536\u5230\u591a\u64ad\u7684\u6570\u636e \u5355\u64ad\u5730\u5740\u6807\u8bc6\u5355\u4e2a IP \u63a5\u53e3\uff0c\u5e7f\u64ad\u5730\u5740\u6807\u8bc6\u67d0\u4e2a\u5b50\u7f51\u7684\u6240\u6709 IP \u63a5\u53e3\uff0c\u591a\u64ad\u5730\u5740\u6807\u8bc6\u4e00\u7ec4 IP \u63a5\u53e3 \u5355\u64ad\u548c\u5e7f\u64ad\u662f\u5bfb\u5740\u65b9\u6848\u7684\u4e24\u4e2a\u6781\u7aef\uff08\u8981\u4e48\u5355\u4e2a\u8981\u4e48\u5168\u90e8\uff09\uff0c\u591a\u64ad\u5219\u610f\u5728\u4e24\u8005\u4e4b\u95f4\u63d0\u4f9b\u4e00\u79cd\u6298\u4e2d\u65b9\u6848 \u591a\u64ad\u6570\u636e\u62a5\u53ea\u5e94\u8be5\u7531\u5bf9\u5b83\u611f\u5174\u8da3\u7684\u63a5\u53e3\u63a5\u6536\uff0c\u4e5f\u5c31\u662f\u8bf4\u7531\u8fd0\u884c\u76f8\u5e94\u591a\u64ad\u4f1a\u8bdd\u5e94\u7528\u7cfb\u7edf\u7684\u4e3b\u673a\u4e0a\u7684\u63a5\u53e3\u63a5\u6536\u3002\u53e6\u5916\uff0c\u5e7f\u64ad\u4e00\u822c\u5c40\u9650\u4e8e\u5c40\u57df\u7f51\u5185\u4f7f\u7528\uff0c\u800c\u591a\u64ad\u5219\u65e2\u53ef\u4ee5\u7528\u4e8e\u5c40\u57df\u7f51\uff0c\u4e5f\u53ef\u4ee5\u8de8\u5e7f\u57df\u7f51\u4f7f\u7528","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_115","text":"\u901a\u8fc7\u8bbe\u7f6e setsockopt \u51fd\u6570\uff0c\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u90fd\u9700\u8981\u8fdb\u884c\u8bbe\u7f6e int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen); \u670d\u52a1\u7aef\uff1a\u8bbe\u7f6e\u591a\u64ad\u7684\u4fe1\u606f\uff0c\u5916\u51fa\u63a5\u53e3 sockfd \uff1a\u901a\u4fe1\u5957\u63a5\u5b57 level \uff1a\u8bbe\u7f6e\u4e3a IPPROTO_IP optname \uff1a\u8bbe\u7f6e\u4e3a IP_MULTICAST_IF optval \uff1a struct in_addr \u7c7b\u578b optlen \uff1aoptval\u7684\u5927\u5c0f \u5ba2\u6237\u7aef\uff1a\u52a0\u5165\u591a\u64ad\u7ec4 sockfd \uff1a\u901a\u4fe1\u5957\u63a5\u5b57 level \uff1a\u8bbe\u7f6e\u4e3a IPPROTO_IP optname \uff1a\u8bbe\u7f6e\u4e3a IP_ADD_MEMBERSHIP optval \uff1a struct ip_mreq \u7c7b\u578b optlen \uff1aoptval\u7684\u5927\u5c0f typedef uint32_t in_addr_t; struct in_addr { in_addr_t s_addr; }; struct ip_mreq { /* IP multicast address of group. */ struct in_addr imr_multiaddr; // \u7ec4\u64ad\u7684IP\u5730\u5740 /* Local IP address of interface. */ struct in_addr imr_interface; // \u672c\u5730\u7684IP\u5730\u5740 };","title":"\u65b9\u6cd5"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_116","text":"\u670d\u52a1\u7aef\u901a\u8fc7 setsockopt \u8bbe\u7f6e optval \u65f6\uff0c\u9700\u8981\u6307\u5b9a\u591a\u64ad\u5730\u5740\uff0c\u5373 239.0.0.0~239.255.255.255 \u5176\u4e2d\u4e00\u4e2a\u5373\u53ef","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_117","text":"","title":"\u5b9e\u4f8b\uff1a\u7ec4\u64ad"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_118","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define MULTIIP \"239.0.0.10\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u8bbe\u7f6e\u591a\u64ad\u5c5e\u6027 struct in_addr op; // \u521d\u59cb\u5316\u591a\u64ad\u5730\u5740 inet_pton(AF_INET, MULTIIP, &op.s_addr); setsockopt(connfd, IPPROTO_IP, IP_MULTICAST_IF, &op, sizeof(op)); // 3.\u521d\u59cb\u5316\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f struct sockaddr_in cliaddr; cliaddr.sin_family = AF_INET; cliaddr.sin_port = htons(PORT); inet_pton(AF_INET, MULTIIP, &cliaddr.sin_addr.s_addr); // 4. \u901a\u4fe1 int num = 0; while (1) { char sendBuf[128]; sprintf(sendBuf, \"hello, client....%d\", num++); // \u53d1\u9001\u6570\u636e sendto(connfd, sendBuf, strlen(sendBuf) + 1, 0, (struct sockaddr *)&cliaddr, sizeof(cliaddr)); printf(\"\u591a\u64ad\u7684\u6570\u636e\uff1a%s\\n\", sendBuf); sleep(1); } close(connfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_119","text":"#include <stdio.h> #include <arpa/inet.h> #include <stdlib.h> #include <string.h> #include <unistd.h> #define MULTIIP \"239.0.0.10\" #define PORT 6789 int main() { // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_INET, SOCK_DGRAM, 0); // 2.\u5ba2\u6237\u7aef\u7ed1\u5b9a\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3 struct sockaddr_in addr; addr.sin_family = AF_INET; addr.sin_port = htons(PORT); // \u8bbe\u7f6e\u4e3a\u63a5\u6536\u4efb\u610f\u7f51\u5740\u4fe1\u606f\u6216\u6307\u5b9a\u591a\u64ad\u5730\u5740 // addr.sin_addr.s_addr = INADDR_ANY; inet_pton(AF_INET, MULTIIP, &addr.sin_addr.s_addr); // 3. \u5c06\u4fe1\u606f\u8fdb\u884c\u7ed1\u5b9a int ret = bind(connfd, (struct sockaddr *)&addr, sizeof(addr)); if(ret == -1) { perror(\"bind\"); exit(-1); } // 4. \u52a0\u5165\u591a\u64ad\u7ec4 // \u8bbe\u7f6e\u591a\u64ad\u5c5e\u6027 struct ip_mreq op; inet_pton(AF_INET, MULTIIP, &op.imr_multiaddr.s_addr); op.imr_interface.s_addr = INADDR_ANY; // \u52a0\u5165\u591a\u64ad\u7ec4 setsockopt(connfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &op, sizeof(op)); // 5. \u901a\u4fe1 while (1) { char buf[128]; // \u63a5\u6536\u6570\u636e int num = recvfrom(connfd, buf, sizeof(buf), 0, NULL, NULL); printf(\"server say : %s\\n\", buf); } close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_120","text":"","title":"\u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_121","text":"\u672c\u5730\u5957\u63a5\u5b57\u7684\u4f5c\u7528\uff1a\u672c\u5730\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u5305\u62ec \u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u901a\u4fe1(\u7236\u5b50\u8fdb\u7a0b) \u548c \u6ca1\u6709\u5173\u7cfb\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1 \u672c\u5730\u5957\u63a5\u5b57\u5b9e\u73b0\u6d41\u7a0b\u548c\u7f51\u7edc\u5957\u63a5\u5b57\u7c7b\u4f3c\uff0c\u4e00\u822c\u91c7\u7528 TCP\u7684\u901a\u4fe1\u6d41\u7a0b","title":"\u7b80\u4ecb"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_122","text":"\u670d\u52a1\u7aef \u521b\u5efa\u76d1\u542c\u7684\u5957\u63a5\u5b57\uff1a int lfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, 0); \u76d1\u542c\u7684\u5957\u63a5\u5b57\u7ed1\u5b9a\u672c\u5730\u7684\u5957\u63a5\u5b57\u6587\u4ef6\uff1a bind(lfd, addr, len); \uff0c\u7ed1\u5b9a\u6210\u529f\u4e4b\u540e\uff0c\u6307\u5b9a\u7684 sun_path \u4e2d\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u4f1a\u81ea\u52a8\u751f\u6210 \u76d1\u542c\uff1a listen(lfd, 100); \u7b49\u5f85\u5e76\u63a5\u53d7\u8fde\u63a5\u8bf7\u6c42\uff1a int cfd = accept(lfd, &cliaddr, len); \u901a\u4fe1 \u63a5\u6536\u6570\u636e\uff1a read/recv \u53d1\u9001\u6570\u636e\uff1a write/send \u5173\u95ed\u8fde\u63a5\uff1a close() \u5ba2\u6237\u7aef \u521b\u5efa\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff1a int cfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, 0); \u76d1\u542c\u7684\u5957\u63a5\u5b57\u7ed1\u5b9a\u672c\u5730\u7684IP\u7aef\u53e3\uff1a bind(cfd, &addr, len); \uff0c\u7ed1\u5b9a\u6210\u529f\u4e4b\u540e\uff0c\u6307\u5b9a\u7684sun_path\u4e2d\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u4f1a\u81ea\u52a8\u751f\u6210 \u8fde\u63a5\u670d\u52a1\u5668\uff1a connect(fd, &serveraddr, sizeof(serveraddr)); \u901a\u4fe1 \u63a5\u6536\u6570\u636e\uff1a read/recv \u53d1\u9001\u6570\u636e\uff1a write/send \u5173\u95ed\u8fde\u63a5\uff1a close()","title":"\u901a\u4fe1\u6d41\u7a0b"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_123","text":"\u5730\u5740\u7ed3\u6784\u4f53\u4e3a\uff1a struct sockaddr_un \u7c7b\u578b c // \u5934\u6587\u4ef6: sys/un.h #define UNIX_PATH_MAX 108 struct sockaddr_un { sa_family_t sun_family; // \u5730\u5740\u65cf\u534f\u8bae af_local char sun_path[UNIX_PATH_MAX]; // \u5957\u63a5\u5b57\u6587\u4ef6\u7684\u8def\u5f84, \u8fd9\u662f\u4e00\u4e2a\u4f2a\u6587\u4ef6, \u5927\u5c0f\u6c38\u8fdc=0 }; \u4f7f\u7528 unlink \u89e3\u9664\u5360\u7528\uff1a\u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\u901a\u8fc7\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u7528unlink\u89e3\u9664\u5360\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\"bind: Address already in use\"","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_124","text":"","title":"\u5b9e\u4f8b\uff1a\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_125","text":"#include <stdio.h> #include <arpa/inet.h> #include <sys/un.h> #include <stdlib.h> #include <string.h> #include <unistd.h> int main() { // \u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\u901a\u8fc7\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u7528unlink\u89e3\u9664\u5360\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\"bind: Address already in use\" unlink(\"server.sock\"); // 1. \u521b\u5efa\u76d1\u542c\u5957\u63a5\u5b57 int listenfd = socket(PF_LOCAL, SOCK_STREAM, 0); if (listenfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a\u672c\u5730\u4fe1\u606f struct sockaddr_un server_addr; server_addr.sun_family = AF_LOCAL; strcpy(server_addr.sun_path, \"server.sock\"); int ret = bind(listenfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u76d1\u542c ret = listen(listenfd, 8); if (ret == -1) { perror(\"listen\"); exit(-1); } // 4. \u63a5\u6536\u8fde\u63a5 struct sockaddr_un client_addr; int client_addr_len = sizeof(client_addr); client_addr.sun_family = AF_LOCAL; strcpy(server_addr.sun_path, \"client.sock\"); int connfd = accept(listenfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror(\"connect\"); exit(-1); } // 5. \u901a\u4fe1 while (1) { // \u63a5\u6536\u4fe1\u606f char buf[1024]; int buf_len = recv(connfd, buf, sizeof(buf), 0); if (buf_len == -1) { perror(\"recv\"); exit(-1); } else if (buf_len == 0) { printf(\"client close...\\n\"); break; } else { printf(\"client say : %s\\n\", buf); // \u53d1\u9001\u4fe1\u606f send(connfd, buf, strlen(buf) + 1, 0); } } // 6. \u5173\u95ed\u5957\u63a5\u5b57 close(connfd); close(listenfd); return 0; }","title":"\u670d\u52a1\u7aef"},{"location":"Linux504/04Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_126","text":"#include <stdio.h> #include <arpa/inet.h> #include <sys/un.h> #include <stdlib.h> #include <string.h> #include <unistd.h> int main() { // \u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1\u901a\u8fc7\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u7528unlink\u89e3\u9664\u5360\u7528\uff0c\u5219\u4f1a\u51fa\u73b0\"bind: Address already in use\" unlink(\"client.sock\"); // 1. \u521b\u5efa\u901a\u4fe1\u5957\u63a5\u5b57 int connfd = socket(PF_LOCAL, SOCK_STREAM, 0); if (connfd == -1) { perror(\"socket\"); exit(-1); } // 2. \u7ed1\u5b9a struct sockaddr_un client_addr; client_addr.sun_family = AF_LOCAL; strcpy(client_addr.sun_path, \"client.sock\"); int ret = bind(connfd, (struct sockaddr*)&client_addr, sizeof(client_addr)); if (ret == -1) { perror(\"bind\"); exit(-1); } // 3. \u5efa\u7acb\u8fde\u63a5 struct sockaddr_un server_addr; server_addr.sun_family = AF_LOCAL; strcpy(server_addr.sun_path, \"server.sock\"); ret = connect(connfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror(\"connect\"); exit(-1); } int num = 0; // 5. \u901a\u4fe1 while (1) { // \u53d1\u9001\u4fe1\u606f char buf[1024]; sprintf(buf, \"the data is %d\", num++); send(connfd, buf, strlen(buf) + 1, 0); // \u63a5\u6536\u4fe1\u606f int buf_len = recv(connfd, buf, sizeof(buf), 0); if (buf_len == -1) { perror(\"recv\"); exit(-1); } else if (buf_len == 0) { printf(\"server close...\\n\"); break; } else { printf(\"server say : %s\\n\", buf); } sleep(1); } // 6. \u5173\u95ed\u5957\u63a5\u5b57 close(connfd); return 0; }","title":"\u5ba2\u6237\u7aef"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/","text":"\u8bf4\u660e \u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/05\u9879\u76ee\u5b9e\u6218 \u963b\u585e/\u975e\u963b\u585e & \u540c\u6b65/\u5f02\u6b65 \u4e00\u4e2a\u5178\u578b\u7684\u7f51\u7edcIO\u63a5\u53e3\u8c03\u7528\uff0c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u662f \u6570\u636e\u5c31\u7eea \u548c \u6570\u636e\u8bfb\u5199 \u6570\u636e\u5c31\u7eea\u9636\u6bb5 \u5206\u4e3a \u963b\u585e \u548c \u975e\u963b\u585e \u963b\u585e\uff1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6 \u975e\u963b\u585e\uff1a\u76f4\u63a5\u8fd4\u56de\uff0c\u7b49\u6ee1\u8db3\u6761\u4ef6\u65f6\u518d\u901a\u77e5 \u6570\u636e\u8bfb\u5199\u9636\u6bb5 \u5206\u4e3a \u540c\u6b65 \u548c \u5f02\u6b65 \u540c\u6b65\uff1a\u5f53A\u5411B\u8bf7\u6c42\u8c03\u7528\u4e00\u4e2a\u7f51\u7edcIO\u63a5\u53e3\u65f6(\u6216\u8005\u8c03\u7528\u67d0\u4e2a\u4e1a\u52a1\u903b\u8f91API\u63a5\u53e3\u65f6)\uff0c \u6570\u636e\u7684\u8bfb\u5199\u90fd\u662f\u7531\u8bf7\u6c42\u65b9A\u81ea\u5df1\u6765\u5b8c\u6210\u7684(\u4e0d\u7ba1\u662f\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e) \u5f02\u6b65\uff1aA\u5411B\u8bf7\u6c42\u8c03\u7528\u4e00\u4e2a\u7f51\u7edcIO\u63a5\u53e3\u65f6(\u6216\u8005\u8c03\u7528\u67d0\u4e2a\u4e1a\u52a1\u903b\u8f91API\u63a5\u53e3\u65f6)\uff0c \u5411B\u4f20\u5165\u8bf7\u6c42\u7684\u4e8b\u4ef6\u4ee5\u53ca\u4e8b\u4ef6\u53d1\u751f\u65f6\u901a\u77e5\u7684\u65b9\u5f0f\uff0cA\u5c31\u53ef\u4ee5\u5904\u7406\u5176\u5b83\u903b\u8f91\u4e86 \uff0c\u5f53B\u76d1\u542c\u5230\u4e8b\u4ef6\u5904\u7406\u5b8c\u6210\u540e\uff0c\u4f1a\u7528\u4e8b\u5148\u7ea6\u5b9a\u597d\u7684\u901a\u77e5\u65b9\u5f0f\uff0c\u901a\u77e5A\u5904\u7406\u7ed3\u679c \u5c0f\u7ed3 \u9648\u7855\uff1a\u5728\u5904\u7406 IO \u7684\u65f6\u5019\uff0c\u963b\u585e\u548c\u975e\u963b\u585e\u90fd\u662f\u540c\u6b65 IO\uff0c\u53ea\u6709\u4f7f\u7528\u4e86\u7279\u6b8a\u7684 API \u624d\u662f\u5f02\u6b65 IO \u56fe\u793a\u8bf4\u660e sockfd \u5bf9\u5e94\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684TCP\u63a5\u6536\u7f13\u51b2\u533a recv \u9ed8\u8ba4\u963b\u585e\uff0c\u76f4\u5230\u8bfb\u5230\u6570\u636e\u624d\u5f80\u4e0b\u6267\u884c\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de\u503c\u5224\u65ad size == -1 \uff1a\u8bf4\u660e\u8bfb\u53d6\u51fa\u9519\u4e86\uff0c\u4f46\u6709\u51e0\u79cd\u4f8b\u5916\u9700\u8981\u5224\u65ad\uff0c\u5982\u4ea7\u751f\u4e86 EINTR (\u4fe1\u53f7\u6355\u6349\u56de\u6536\u5b50\u8fdb\u7a0b\u8d44\u6e90\u65f6\u4ea7\u751f SIGCHLD \u5bfc\u81f4\u8fd9\u4e2a\u4fe1\u53f7)\uff0c EAGAIN/EWOULDBLOCK \u4fe1\u53f7 size == 0 \uff1a\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u5373\u5bf9\u65b9\u8fde\u63a5\u5df2\u5173\u95ed size > 0 \uff1a\u8bfb\u5230\u4e86\u5927\u5c0f\u4e3a size \u7684\u6570\u636e \u53c2\u8003 linux\u4e2d\u5bf9errno\u662fEINTR\u7684\u5904\u7406 Linux\u4e2d\u7684EAGAIN\u542b\u4e49 Unix/Linux\u4e0a\u7684I/O\u6a21\u578b \u963b\u585e(BIO, blocking) \u8c03\u7528\u8005\u8c03\u7528\u4e86\u67d0\u4e2a\u51fd\u6570\uff0c \u7b49\u5f85\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\uff0c\u671f\u95f4\u4ec0\u4e48\u4e5f\u4e0d\u505a \uff0c\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u8fd9\u4e2a\u51fd\u6570\u6709\u6ca1\u6709\u8fd4\u56de\uff0c\u5fc5\u987b\u7b49\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u6b65\u52a8\u4f5c \u975e\u963b\u585e(NIO, non-blocking) \u975e\u963b\u585e\u7b49\u5f85\uff0c \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u53bb\u68c0\u6d4bIO\u4e8b\u4ef6\u662f\u5426\u5c31\u7eea\uff0c\u6ca1\u6709\u5c31\u7eea\u5c31\u53ef\u4ee5\u505a\u5176\u4ed6\u4e8b \u975e\u963b\u585e I/O \u6267\u884c\u7cfb\u7edf\u8c03\u7528\u603b\u662f\u7acb\u5373\u8fd4\u56de\uff0c\u4e0d\u7ba1\u4e8b\u4ef6\u662f\u5426\u5df2\u7ecf\u53d1\u751f \u82e5\u4e8b\u4ef6\u6ca1\u6709\u53d1\u751f\uff0c\u5219\u8fd4\u56de-1\uff0c\u6b64\u65f6\u53ef\u4ee5\u6839\u636e errno \u533a\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5bf9\u4e8e accept \uff0c recv \u548c send \uff0c\u4e8b\u4ef6\u672a\u53d1\u751f\u65f6\uff0c errno \u901a\u5e38\u88ab\u8bbe\u7f6e\u6210 EAGAIN IO \u590d\u7528(IO multiplexing) Linux \u7528 select/poll/epoll \u51fd\u6570\u5b9e\u73b0 IO \u590d\u7528\u6a21\u578b\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\uff0c\u4f46\u662f \u548c\u963b\u585eIO\u6240\u4e0d\u540c\u7684\u662f\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u540c\u65f6\u963b\u585e\u591a\u4e2aIO\u64cd\u4f5c \u53ef\u4ee5\u540c\u65f6\u5bf9\u591a\u4e2a\u8bfb\u64cd\u4f5c\u3001\u5199\u64cd\u4f5c\u7684IO\u51fd\u6570\u8fdb\u884c\u68c0\u6d4b\u3002\u76f4\u5230\u6709\u6570\u636e\u53ef\u8bfb\u6216\u53ef\u5199\u65f6\uff0c\u624d\u771f\u6b63\u8c03\u7528IO\u64cd\u4f5c\u51fd\u6570 \u4fe1\u53f7\u9a71\u52a8(signal-driven) Linux \u7528\u5957\u63a5\u53e3\u8fdb\u884c\u4fe1\u53f7\u9a71\u52a8 IO\uff0c\u5b89\u88c5\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c \u8fdb\u7a0b\u7ee7\u7eed\u8fd0\u884c\u5e76\u4e0d\u963b\u585e\uff0c\u5f53IO\u4e8b\u4ef6\u5c31\u7eea\uff0c\u8fdb\u7a0b\u6536\u5230SIGIO \u4fe1\u53f7\uff0c\u7136\u540e\u5904\u7406 IO \u4e8b\u4ef6 \u4e0b\u56fe\u4e2d\uff0c\u5185\u6838\u5728\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5f02\u6b65\uff0c\u5728\u7b2c\u4e8c\u4e2a\u9636\u6bb5\u662f\u540c\u6b65 \u4e0e\u975e\u963b\u585eIO\u7684\u533a\u522b\u5728\u4e8e\u5b83\u63d0\u4f9b\u4e86\u6d88\u606f\u901a\u77e5\u673a\u5236\uff0c\u4e0d\u9700\u8981\u7528\u6237\u8fdb\u7a0b\u4e0d\u65ad\u7684\u8f6e\u8be2\u68c0\u67e5\uff0c\u51cf\u5c11\u4e86\u7cfb\u7edfAPI\u7684\u8c03\u7528\u6b21\u6570\uff0c\u63d0\u9ad8\u4e86\u6548\u7387 \u5f02\u6b65(asynchronous) Linux\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528 aio_read \u51fd\u6570\u544a\u8bc9\u5185\u6838 \u63cf\u8ff0\u5b57\u7f13\u51b2\u533a\u6307\u9488\u548c\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3001\u6587\u4ef6\u504f\u79fb\u53ca\u901a\u77e5\u7684\u65b9\u5f0f \uff0c\u7136\u540e\u7acb\u5373\u8fd4\u56de\uff0c\u5f53\u5185\u6838\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7f13\u51b2\u533a\u540e\uff0c\u518d\u901a\u77e5\u5e94\u7528\u7a0b\u5e8f /* Asynchronous I/O control block. */ struct aiocb { int aio_fildes; /* File desriptor. */ int aio_lio_opcode; /* Operation to be performed. */ int aio_reqprio; /* Request priority offset. */ volatile void *aio_buf; /* Location of buffer. */ size_t aio_nbytes; /* Length of transfer. */ struct sigevent aio_sigevent; /* Signal number and value. */ /* Internal members. */ struct aiocb *__next_prio; int __abs_prio; int __policy; int __error_code; __ssize_t __return_value; #ifndef __USE_FILE_OFFSET64 __off_t aio_offset; /* File offset. */ char __pad[sizeof (__off64_t) - sizeof (__off_t)]; #else __off64_t aio_offset; /* File offset. */ #endif char __glibc_reserved[32]; };","title":"\u8bf4\u660e"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#_1","text":"\u672c\u90e8\u5206\u7b14\u8bb0\u53ca\u6e90\u7801\u51fa\u81ea slide/05\u9879\u76ee\u5b9e\u6218","title":"\u8bf4\u660e"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#_2","text":"\u4e00\u4e2a\u5178\u578b\u7684\u7f51\u7edcIO\u63a5\u53e3\u8c03\u7528\uff0c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u5206\u522b\u662f \u6570\u636e\u5c31\u7eea \u548c \u6570\u636e\u8bfb\u5199 \u6570\u636e\u5c31\u7eea\u9636\u6bb5 \u5206\u4e3a \u963b\u585e \u548c \u975e\u963b\u585e \u963b\u585e\uff1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6 \u975e\u963b\u585e\uff1a\u76f4\u63a5\u8fd4\u56de\uff0c\u7b49\u6ee1\u8db3\u6761\u4ef6\u65f6\u518d\u901a\u77e5 \u6570\u636e\u8bfb\u5199\u9636\u6bb5 \u5206\u4e3a \u540c\u6b65 \u548c \u5f02\u6b65 \u540c\u6b65\uff1a\u5f53A\u5411B\u8bf7\u6c42\u8c03\u7528\u4e00\u4e2a\u7f51\u7edcIO\u63a5\u53e3\u65f6(\u6216\u8005\u8c03\u7528\u67d0\u4e2a\u4e1a\u52a1\u903b\u8f91API\u63a5\u53e3\u65f6)\uff0c \u6570\u636e\u7684\u8bfb\u5199\u90fd\u662f\u7531\u8bf7\u6c42\u65b9A\u81ea\u5df1\u6765\u5b8c\u6210\u7684(\u4e0d\u7ba1\u662f\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e) \u5f02\u6b65\uff1aA\u5411B\u8bf7\u6c42\u8c03\u7528\u4e00\u4e2a\u7f51\u7edcIO\u63a5\u53e3\u65f6(\u6216\u8005\u8c03\u7528\u67d0\u4e2a\u4e1a\u52a1\u903b\u8f91API\u63a5\u53e3\u65f6)\uff0c \u5411B\u4f20\u5165\u8bf7\u6c42\u7684\u4e8b\u4ef6\u4ee5\u53ca\u4e8b\u4ef6\u53d1\u751f\u65f6\u901a\u77e5\u7684\u65b9\u5f0f\uff0cA\u5c31\u53ef\u4ee5\u5904\u7406\u5176\u5b83\u903b\u8f91\u4e86 \uff0c\u5f53B\u76d1\u542c\u5230\u4e8b\u4ef6\u5904\u7406\u5b8c\u6210\u540e\uff0c\u4f1a\u7528\u4e8b\u5148\u7ea6\u5b9a\u597d\u7684\u901a\u77e5\u65b9\u5f0f\uff0c\u901a\u77e5A\u5904\u7406\u7ed3\u679c \u5c0f\u7ed3 \u9648\u7855\uff1a\u5728\u5904\u7406 IO \u7684\u65f6\u5019\uff0c\u963b\u585e\u548c\u975e\u963b\u585e\u90fd\u662f\u540c\u6b65 IO\uff0c\u53ea\u6709\u4f7f\u7528\u4e86\u7279\u6b8a\u7684 API \u624d\u662f\u5f02\u6b65 IO \u56fe\u793a\u8bf4\u660e sockfd \u5bf9\u5e94\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684TCP\u63a5\u6536\u7f13\u51b2\u533a recv \u9ed8\u8ba4\u963b\u585e\uff0c\u76f4\u5230\u8bfb\u5230\u6570\u636e\u624d\u5f80\u4e0b\u6267\u884c\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de\u503c\u5224\u65ad size == -1 \uff1a\u8bf4\u660e\u8bfb\u53d6\u51fa\u9519\u4e86\uff0c\u4f46\u6709\u51e0\u79cd\u4f8b\u5916\u9700\u8981\u5224\u65ad\uff0c\u5982\u4ea7\u751f\u4e86 EINTR (\u4fe1\u53f7\u6355\u6349\u56de\u6536\u5b50\u8fdb\u7a0b\u8d44\u6e90\u65f6\u4ea7\u751f SIGCHLD \u5bfc\u81f4\u8fd9\u4e2a\u4fe1\u53f7)\uff0c EAGAIN/EWOULDBLOCK \u4fe1\u53f7 size == 0 \uff1a\u8bfb\u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u5373\u5bf9\u65b9\u8fde\u63a5\u5df2\u5173\u95ed size > 0 \uff1a\u8bfb\u5230\u4e86\u5927\u5c0f\u4e3a size \u7684\u6570\u636e \u53c2\u8003 linux\u4e2d\u5bf9errno\u662fEINTR\u7684\u5904\u7406 Linux\u4e2d\u7684EAGAIN\u542b\u4e49","title":"\u963b\u585e/\u975e\u963b\u585e &amp; \u540c\u6b65/\u5f02\u6b65"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#unixlinuxio","text":"","title":"Unix/Linux\u4e0a\u7684I/O\u6a21\u578b"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#bio-blocking","text":"\u8c03\u7528\u8005\u8c03\u7528\u4e86\u67d0\u4e2a\u51fd\u6570\uff0c \u7b49\u5f85\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\uff0c\u671f\u95f4\u4ec0\u4e48\u4e5f\u4e0d\u505a \uff0c\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u8fd9\u4e2a\u51fd\u6570\u6709\u6ca1\u6709\u8fd4\u56de\uff0c\u5fc5\u987b\u7b49\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u6b65\u52a8\u4f5c","title":"\u963b\u585e(BIO, blocking)"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#nio-non-blocking","text":"\u975e\u963b\u585e\u7b49\u5f85\uff0c \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u53bb\u68c0\u6d4bIO\u4e8b\u4ef6\u662f\u5426\u5c31\u7eea\uff0c\u6ca1\u6709\u5c31\u7eea\u5c31\u53ef\u4ee5\u505a\u5176\u4ed6\u4e8b \u975e\u963b\u585e I/O \u6267\u884c\u7cfb\u7edf\u8c03\u7528\u603b\u662f\u7acb\u5373\u8fd4\u56de\uff0c\u4e0d\u7ba1\u4e8b\u4ef6\u662f\u5426\u5df2\u7ecf\u53d1\u751f \u82e5\u4e8b\u4ef6\u6ca1\u6709\u53d1\u751f\uff0c\u5219\u8fd4\u56de-1\uff0c\u6b64\u65f6\u53ef\u4ee5\u6839\u636e errno \u533a\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5bf9\u4e8e accept \uff0c recv \u548c send \uff0c\u4e8b\u4ef6\u672a\u53d1\u751f\u65f6\uff0c errno \u901a\u5e38\u88ab\u8bbe\u7f6e\u6210 EAGAIN","title":"\u975e\u963b\u585e(NIO, non-blocking)"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#io-io-multiplexing","text":"Linux \u7528 select/poll/epoll \u51fd\u6570\u5b9e\u73b0 IO \u590d\u7528\u6a21\u578b\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\uff0c\u4f46\u662f \u548c\u963b\u585eIO\u6240\u4e0d\u540c\u7684\u662f\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u540c\u65f6\u963b\u585e\u591a\u4e2aIO\u64cd\u4f5c \u53ef\u4ee5\u540c\u65f6\u5bf9\u591a\u4e2a\u8bfb\u64cd\u4f5c\u3001\u5199\u64cd\u4f5c\u7684IO\u51fd\u6570\u8fdb\u884c\u68c0\u6d4b\u3002\u76f4\u5230\u6709\u6570\u636e\u53ef\u8bfb\u6216\u53ef\u5199\u65f6\uff0c\u624d\u771f\u6b63\u8c03\u7528IO\u64cd\u4f5c\u51fd\u6570","title":"IO \u590d\u7528(IO multiplexing)"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#signal-driven","text":"Linux \u7528\u5957\u63a5\u53e3\u8fdb\u884c\u4fe1\u53f7\u9a71\u52a8 IO\uff0c\u5b89\u88c5\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c \u8fdb\u7a0b\u7ee7\u7eed\u8fd0\u884c\u5e76\u4e0d\u963b\u585e\uff0c\u5f53IO\u4e8b\u4ef6\u5c31\u7eea\uff0c\u8fdb\u7a0b\u6536\u5230SIGIO \u4fe1\u53f7\uff0c\u7136\u540e\u5904\u7406 IO \u4e8b\u4ef6 \u4e0b\u56fe\u4e2d\uff0c\u5185\u6838\u5728\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5f02\u6b65\uff0c\u5728\u7b2c\u4e8c\u4e2a\u9636\u6bb5\u662f\u540c\u6b65 \u4e0e\u975e\u963b\u585eIO\u7684\u533a\u522b\u5728\u4e8e\u5b83\u63d0\u4f9b\u4e86\u6d88\u606f\u901a\u77e5\u673a\u5236\uff0c\u4e0d\u9700\u8981\u7528\u6237\u8fdb\u7a0b\u4e0d\u65ad\u7684\u8f6e\u8be2\u68c0\u67e5\uff0c\u51cf\u5c11\u4e86\u7cfb\u7edfAPI\u7684\u8c03\u7528\u6b21\u6570\uff0c\u63d0\u9ad8\u4e86\u6548\u7387","title":"\u4fe1\u53f7\u9a71\u52a8(signal-driven)"},{"location":"Linux504/05%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E4%B8%8E%E6%80%BB%E7%BB%93/#asynchronous","text":"Linux\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528 aio_read \u51fd\u6570\u544a\u8bc9\u5185\u6838 \u63cf\u8ff0\u5b57\u7f13\u51b2\u533a\u6307\u9488\u548c\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3001\u6587\u4ef6\u504f\u79fb\u53ca\u901a\u77e5\u7684\u65b9\u5f0f \uff0c\u7136\u540e\u7acb\u5373\u8fd4\u56de\uff0c\u5f53\u5185\u6838\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u7f13\u51b2\u533a\u540e\uff0c\u518d\u901a\u77e5\u5e94\u7528\u7a0b\u5e8f /* Asynchronous I/O control block. */ struct aiocb { int aio_fildes; /* File desriptor. */ int aio_lio_opcode; /* Operation to be performed. */ int aio_reqprio; /* Request priority offset. */ volatile void *aio_buf; /* Location of buffer. */ size_t aio_nbytes; /* Length of transfer. */ struct sigevent aio_sigevent; /* Signal number and value. */ /* Internal members. */ struct aiocb *__next_prio; int __abs_prio; int __policy; int __error_code; __ssize_t __return_value; #ifndef __USE_FILE_OFFSET64 __off_t aio_offset; /* File offset. */ char __pad[sizeof (__off64_t) - sizeof (__off_t)]; #else __off64_t aio_offset; /* File offset. */ #endif char __glibc_reserved[32]; };","title":"\u5f02\u6b65(asynchronous)"}]}